<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>

<bookinfo>
<title>The Mutt E-Mail Client</title>
<author>
<firstname>Michael</firstname><surname>Elkins</surname>
<email>me@cs.hmc.edu</email>
</author>
<releaseinfo>version 1.5.19 (2009-01-05)</releaseinfo>

<abstract>
<para>
<quote>All mail clients suck.  This one just sucks less.</quote> -me, circa 1995
</para>
</abstract>
</bookinfo>

<chapter id="intro">
<title>Introduction</title>

<para>
<emphasis role="bold">Mutt</emphasis> is a small but very powerful text-based MIME mail client.  Mutt is
highly configurable, and is well suited to the mail power user with advanced
features like key bindings, keyboard macros, mail threading, regular
expression searches and a powerful pattern matching language for selecting
groups of messages.
</para>

<sect1 id="homepage">
<title>Mutt Home Page</title>

<para>
The official homepage can be found at
<ulink url="http://www.mutt.org/">http://www.mutt.org/</ulink>.
</para>

</sect1>

<sect1 id="muttlists">
<title>Mailing Lists</title>

<para>
To subscribe to one of the following mailing lists, send a message with the
word <emphasis>subscribe</emphasis> in the body to
<literal>list-name</literal><emphasis>-request</emphasis><literal>@mutt.org</literal>.
</para>

<itemizedlist>
<listitem>

<para>
<email>mutt-announce-request@mutt.org</email> -- low traffic list for announcements
</para>
</listitem>
<listitem>

<para>
<email>mutt-users-request@mutt.org</email> -- help, bug reports and feature requests
</para>
</listitem>
<listitem>

<para>
<email>mutt-dev-request@mutt.org</email> -- development mailing list
</para>
</listitem>

</itemizedlist>

<note>
<para>
All messages posted to
<emphasis>mutt-announce</emphasis> are automatically forwarded to
<emphasis>mutt-users</emphasis>, so you do not need to be subscribed to
both lists.
</para>
</note>

</sect1>

<sect1 id="distribution">
<title>Software Distribution Sites</title>

<para>
Mutt releases can be downloaded from
<ulink url="ftp://ftp.mutt.org/mutt/">ftp://ftp.mutt.org/mutt/</ulink>.
For a list of mirror sites, please refer to
<ulink url="http://www.mutt.org/download.html">http://www.mutt.org/download.html</ulink>.
</para>

</sect1>

<sect1 id="irc">
<title>Mutt online resources</title>

<variablelist>

<varlistentry>
<term>Bug Tracking System</term>
<listitem>
<para>
The official mutt bug tracking system can be found at
<ulink url="http://dev.mutt.org/">http://dev.mutt.org/</ulink>
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Wiki</term>
<listitem>
<para>
An (unofficial) wiki can be found
at <ulink url="http://wiki.mutt.org/">http://wiki.mutt.org/</ulink>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>IRC</term>
<listitem>
<para>
For the IRC user community, visit channel <emphasis>&num;mutt</emphasis> on
<ulink url="http://www.freenode.net/">irc.freenode.net</ulink>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>USENET</term>
<listitem>
<para>
For USENET, see the newsgroup <ulink url="news:comp.mail.mutt">comp.mail.mutt</ulink>.
</para>
</listitem>
</varlistentry>

</variablelist>

</sect1>

<sect1 id="contrib">
<title>Contributing to Mutt</title>

<para>
There are various ways to contribute to the Mutt project.
</para>

<para>
Especially for new users it may be helpful to meet other new and
experienced users to chat about Mutt, talk about problems and share
tricks.
</para>

<para>
Since translations of Mutt into other languages are highly appreciated,
the mutt developers always look for skilled translators that help
improve and continue to maintain stale translations.
</para>

<para>
For contributing code patches for new features and bug fixes, please
refer to the developer pages at
<ulink url="http://dev.mutt.org/">http://dev.mutt.org/</ulink> for more details.
</para>

</sect1>

<sect1 id="typo">
<title>Typograhical conventions</title>

<para>
This section lists typographical conventions followed throughout this
manual. See table <xref linkend="tab-typo"/> for typographical
conventions for special terms.
</para>

<table id="tab-typo">
<title>Typographical conventions for special terms</title>
<tgroup cols="2">
<thead>
<row><entry>Item</entry><entry>Refers to...</entry></row>
</thead>
<tbody>
<row><entry><literal>printf(3)</literal></entry><entry>UNIX manual pages, execute <literal>man 3 printf</literal></entry></row>
<row><entry><literal>&lt;PageUp&gt;</literal></entry><entry>named keys</entry></row>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>named Mutt function</entry></row>
<row><entry><literal>&circ;G</literal></entry><entry>Control+G key combination</entry></row>
<row><entry><literal>&dollar;mail&lowbar;check</literal></entry><entry>Mutt configuration option</entry></row>
</tbody>
</tgroup>
</table>

<para>
Examples are presented as:
</para>

<screen>
mutt -v
</screen>

<para>
Within command synopsis, curly brackets (<quote>&lcub;&rcub;</quote>) denote a set
of options of which one is mandatory, square brackets
(<quote>&lsqb;&rsqb;</quote>) denote optional arguments, three dots
denote that the argument may be repeated arbitrary times.
</para>

</sect1>

<sect1 id="copyright">
<title>Copyright</title>

<para>
Mutt is Copyright (C) 1996-2009 Michael R. Elkins
<email>me@mutt.org</email> and others.
</para>

<para>
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
</para>

<para>
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
</para>

<para>
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
</para>

</sect1>

</chapter>

<chapter id="gettingstarted">
<title>Getting Started</title>

<para>
This section is intended as a brief overview of how to use Mutt.  There are
many other features which are described elsewhere in the manual.  There
is even more information available in the Mutt FAQ and various web
pages. See the <ulink url="http://www.mutt.org/">Mutt homepage</ulink> for more details.
</para>

<para>
The keybindings described in this section are the defaults as distributed.
Your local system administrator may have altered the defaults for your site.
You can always type <quote>?</quote> in any menu to display the current bindings.
</para>

<para>
The first thing you need to do is invoke mutt, simply by typing <literal>mutt</literal>
at the command line.  There are various command-line options, see
either the mutt man page or the <link linkend="commandline">reference</link>.
</para>

<sect1 id="core-concepts">
<title>Core concepts</title>

<para>
Mutt is a text-based application which interacts with users through
different menus which are mostly line-/entry-based or page-based. A
line-based menu is the so-called <quote>index</quote> menu (listing all messages of
the currently opened folder) or the <quote>alias</quote> menu (allowing you to
select recipients from a list). Examples for page-based menus are the
<quote>pager</quote> (showing one message at a time) or the <quote>help</quote> menu listing
all available key bindings.
</para>

<para>
The user interface consists of a context sensitive help line at the top,
the menu's contents followed by a context sensitive status line and
finally the command line. The command line is used to display
informational and error messages as well as for prompts and for entering
interactive commands.
</para>

<para>
Because Mutt allows for customizing almost all key bindings, there are
so-called <quote>functions</quote> which can be executed manually (using the
command line) or in macros. Macros allow the user to bind a sequence of
commands to a single key or a short key sequence instead of repeating a
sequence of actions over and over.
</para>

<para>
Many commands (such as saving or copying a message to another folder)
can be applied to a single message or a set of messages (so-called
<quote>tagged</quote> messages). To help selecting messages, Mutt provides a rich
set of message patterns (such as recipients, sender, body contents, date
sent/received, etc.) which can be combined into complex expressions
using the boolean <emphasis>and</emphasis> and <emphasis>or</emphasis>
operations as well as negating. These patterns can also be used to (for
example) search for messages or to limit the index to show only matching
messages.
</para>

<para>
Mutt supports a <quote>hook</quote> concept which allows the user to execute
arbitrary configuration commands and functions in certain situations
such as entering a folder, starting a new message or replying to an
existing one. These hooks can be used to highly customize Mutt's
behaviour including managing multiple identities, customizing the
display for a folder or even implementing auto-archiving based on a
per-folder basis and much more.
</para>

</sect1>

<sect1 id="menus">
<title>Moving Around in Menus</title>

<para>
The most important navigation keys common to all menus are shown in
<xref linkend="tab-keys-nav"/>.
</para>

<table id="tab-keys-nav">
<title>Most common navigation keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>j or &lt;Down&gt;</entry><entry><literal>&lt;next-entry&gt;</literal></entry><entry>move to the next entry</entry></row>
<row><entry>k or &lt;Up&gt;</entry><entry><literal>&lt;previous-entry&gt;</literal></entry><entry>move to the previous entry</entry></row>
<row><entry>z or &lt;PageDn&gt;</entry><entry><literal>&lt;page-down&gt;</literal></entry><entry>go to the next page</entry></row>
<row><entry>Z or &lt;PageUp&gt;</entry><entry><literal>&lt;page-up&gt;</literal></entry><entry>go to the previous page</entry></row>
<row><entry>= or &lt;Home&gt;</entry><entry><literal>&lt;first-entry&gt;</literal></entry><entry>jump to the first entry</entry></row>
<row><entry>* or &lt;End&gt;</entry><entry><literal>&lt;last-entry&gt;</literal></entry><entry>jump to the last entry</entry></row>
<row><entry>q</entry><entry><literal>&lt;quit&gt;</literal></entry><entry>exit the current menu</entry></row>
<row><entry>?</entry><entry><literal>&lt;help&gt;</literal></entry><entry>list all keybindings for the current menu</entry></row>
</tbody>
</tgroup>
</table>

</sect1>

<sect1 id="editing">
<title>Editing Input Fields</title>

<sect2 id="editing-intro">
<title>Introduction</title>

<para>
Mutt has a built-in line editor for inputting text, e.g. email
addresses or filenames. The keys used to manipulate text input are
very similar to those of Emacs. See <xref linkend="tab-keys-editor"/> for a full
reference of available functions, their default key bindings, and
short descriptions.
</para>

<table id="tab-keys-editor">
<title>Most common line editor keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&circ;A or &lt;Home&gt;</entry><entry><literal>&lt;bol&gt;</literal></entry><entry>move to the start of the line</entry></row>
<row><entry>&circ;B or &lt;Left&gt;</entry><entry><literal>&lt;backward-char&gt;</literal></entry><entry>move back one char</entry></row>
<row><entry>Esc B</entry><entry><literal>&lt;backward-word&gt;</literal></entry><entry>move back one word</entry></row>
<row><entry>&circ;D or &lt;Delete&gt;</entry><entry><literal>&lt;delete-char&gt;</literal></entry><entry>delete the char under the cursor</entry></row>
<row><entry>&circ;E or &lt;End&gt;</entry><entry><literal>&lt;eol&gt;</literal></entry><entry>move to the end of the line</entry></row>
<row><entry>&circ;F or &lt;Right&gt;</entry><entry><literal>&lt;forward-char&gt;</literal></entry><entry>move forward one char</entry></row>
<row><entry>Esc F</entry><entry><literal>&lt;forward-word&gt;</literal></entry><entry>move forward one word</entry></row>
<row><entry>&lt;Tab&gt;</entry><entry><literal>&lt;complete&gt;</literal></entry><entry>complete filename or alias</entry></row>
<row><entry>&circ;T</entry><entry><literal>&lt;complete-query&gt;</literal></entry><entry>complete address with query</entry></row>
<row><entry>&circ;K</entry><entry><literal>&lt;kill-eol&gt;</literal></entry><entry>delete to the end of the line</entry></row>
<row><entry>Esc d</entry><entry><literal>&lt;kill-eow&gt;</literal></entry><entry>delete to the end of the word</entry></row>
<row><entry>&circ;W</entry><entry><literal>&lt;kill-word&gt;</literal></entry><entry>kill the word in front of the cursor</entry></row>
<row><entry>&circ;U</entry><entry><literal>&lt;kill-line&gt;</literal></entry><entry>delete entire line</entry></row>
<row><entry>&circ;V</entry><entry><literal>&lt;quote-char&gt;</literal></entry><entry>quote the next typed key</entry></row>
<row><entry>&lt;Up&gt;</entry><entry><literal>&lt;history-up&gt;</literal></entry><entry>recall previous string from history</entry></row>
<row><entry>&lt;Down&gt;</entry><entry><literal>&lt;history-down&gt;</literal></entry><entry>recall next string from history</entry></row>
<row><entry>&lt;BackSpace&gt;</entry><entry><literal>&lt;backspace&gt;</literal></entry><entry>kill the char in front of the cursor</entry></row>
<row><entry>Esc u</entry><entry><literal>&lt;upcase-word&gt;</literal></entry><entry>convert word to upper case</entry></row>
<row><entry>Esc l</entry><entry><literal>&lt;downcase-word&gt;</literal></entry><entry>convert word to lower case</entry></row>
<row><entry>Esc c</entry><entry><literal>&lt;capitalize-word&gt;</literal></entry><entry>capitalize the word</entry></row>
<row><entry>&circ;G</entry><entry>n/a</entry><entry>abort</entry></row>
<row><entry>&lt;Return&gt;</entry><entry>n/a</entry><entry>finish editing</entry></row>
</tbody>
</tgroup>
</table>

<para>
You can remap the <emphasis>editor</emphasis> functions using the
<link linkend="bind">bind</link> command.  For example, to make
the &lt;Delete&gt; key delete the character in front of
the cursor rather than under, you could use:
</para>

<screen>
bind editor &lt;delete&gt; backspace
</screen>

</sect2>

<sect2 id="editing-history">
<title>History</title>

<para>
Mutt maintains a history for the built-in editor.  The number of items
is controlled by the <link linkend="history">&dollar;history</link>
variable and can be made persistent using an external file specified
using <link linkend="history-file">&dollar;history&lowbar;file</link>.
You may cycle through them at an editor prompt by using the
<literal>&lt;history-up&gt;</literal> and/or
<literal>&lt;history-down&gt;</literal> commands.
</para>

<para>
Mutt maintains several distinct history lists, one for each of the
following categories:
</para>

<itemizedlist>
<listitem><para>muttrc commands</para></listitem>
<listitem><para>addresses and aliases</para></listitem>
<listitem><para>shell commands</para></listitem>
<listitem><para>filenames</para></listitem>
<listitem><para>patterns</para></listitem>
<listitem><para>everything else</para></listitem>
</itemizedlist>

<para>
Mutt automatically filters out repeated items from the history.  It
also mimics the behavior of some shells by ignoring items starting
with a space. The latter feature can be useful in macros to not clobber
the history's valuable entries with unwanted entries.
</para>

</sect2>

</sect1>

<sect1 id="reading">
<title>Reading Mail - The Index and Pager</title>

<para>
Similar to many other mail clients, there are two modes in which mail is
read in Mutt.  The first is the index of messages in the mailbox, which is
called the <quote>index</quote> in Mutt.  The second mode is the display of the
message contents.  This is called the <quote>pager.</quote>
</para>

<para>
The next few sections describe the functions provided in each of these
modes.
</para>

<sect2 id="index-menu">
<title>The Message Index</title>

<para>
Common keys used to navigate through and manage messages in the index
are shown in <xref linkend="tab-key-index"/>. How messages are presented
in the index menu can be customized using the
<link linkend="index-format">&dollar;index&lowbar;format</link> variable.
</para>

<table id="tab-key-index">
<title>Most common message index keys</title>
<tgroup cols="2">
<thead>
<row><entry>Key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>c</entry><entry>change to a different mailbox</entry></row>
<row><entry>Esc c</entry><entry>change to a folder in read-only mode</entry></row>
<row><entry>C</entry><entry>copy the current message to another mailbox</entry></row>
<row><entry>Esc C</entry><entry>decode a message and copy it to a folder</entry></row>
<row><entry>Esc s</entry><entry>decode a message and save it to a folder</entry></row>
<row><entry>D</entry><entry>delete messages matching a pattern</entry></row>
<row><entry>d</entry><entry>delete the current message</entry></row>
<row><entry>F</entry><entry>mark as important</entry></row>
<row><entry>l</entry><entry>show messages matching a pattern</entry></row>
<row><entry>N</entry><entry>mark message as new</entry></row>
<row><entry>o</entry><entry>change the current sort method</entry></row>
<row><entry>O</entry><entry>reverse sort the mailbox</entry></row>
<row><entry>q</entry><entry>save changes and exit</entry></row>
<row><entry>s</entry><entry>save-message</entry></row>
<row><entry>T</entry><entry>tag messages matching a pattern</entry></row>
<row><entry>t</entry><entry>toggle the tag on a message</entry></row>
<row><entry>Esc t</entry><entry>toggle tag on entire message thread</entry></row>
<row><entry>U</entry><entry>undelete messages matching a pattern</entry></row>
<row><entry>u</entry><entry>undelete-message</entry></row>
<row><entry>v</entry><entry>view-attachments</entry></row>
<row><entry>x</entry><entry>abort changes and exit</entry></row>
<row><entry>&lt;Return&gt;</entry><entry>display-message</entry></row>
<row><entry>&lt;Tab&gt;</entry><entry>jump to the next new or unread message</entry></row>
<row><entry>@</entry><entry>show the author's full e-mail address</entry></row>
<row><entry>$</entry><entry>save changes to mailbox</entry></row>
<row><entry>/</entry><entry>search</entry></row>
<row><entry>Esc /</entry><entry>search-reverse</entry></row>
<row><entry>&circ;L</entry><entry>clear and redraw the screen</entry></row>
<row><entry>&circ;T</entry><entry>untag messages matching a pattern</entry></row>
</tbody>
</tgroup>
</table>

<para>
In addition to who sent the message and the subject, a short summary of
the disposition of each message is printed beside the message number.
Zero or more of the <quote>flags</quote> in <xref linkend="tab-msg-status-flags"/>
may appear, some of which can be turned on or off using these functions:
<literal>&lt;set-flag&gt;</literal> and
<literal>&lt;clear-flag&gt;</literal>
bound by default to <quote>w</quote> and <quote>W</quote> respectively.
</para>

<para>
Furthermore, the flags in <xref linkend="tab-msg-recip-flags"/> reflect
who the message is addressed to. They can be customized with the
<link linkend="to-chars">&dollar;to&lowbar;chars</link> variable.
</para>

<table id="tab-msg-status-flags">
<title>Message status flags</title>
<tgroup cols="2">
<thead>
<row><entry>Flag</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>D</entry><entry>message is deleted (is marked for deletion)</entry></row>
<row><entry>d</entry><entry>message has attachments marked for deletion</entry></row>
<row><entry>K</entry><entry>contains a PGP public key</entry></row>
<row><entry>N</entry><entry>message is new</entry></row>
<row><entry>O</entry><entry>message is old</entry></row>
<row><entry>P</entry><entry>message is PGP encrypted</entry></row>
<row><entry>r</entry><entry>message has been replied to</entry></row>
<row><entry>S</entry><entry>message is signed, and the signature is successfully verified</entry></row>
<row><entry>s</entry><entry>message is signed</entry></row>
<row><entry>!</entry><entry>message is flagged</entry></row>
<row><entry>*</entry><entry>message is tagged</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-msg-recip-flags">
<title>Message recipient flags</title>
<tgroup cols="2">
<thead>
<row><entry>Flag</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>+</entry><entry>message is to you and you only</entry></row>
<row><entry>T</entry><entry>message is to you, but also to or cc'ed to others</entry></row>
<row><entry>C</entry><entry>message is cc'ed to you</entry></row>
<row><entry>F</entry><entry>message is from you</entry></row>
<row><entry>L</entry><entry>message is sent to a subscribed mailing list</entry></row>
</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pager-menu">
<title>The Pager</title>

<para>
By default, Mutt uses its builtin pager to display the contents of messages.
The pager is very similar to the Unix program <emphasis>less</emphasis> though not nearly as
featureful.
</para>

<table id="tab-key-pager">
<title>Most common pager keys</title>
<tgroup cols="2">
<thead>
<row><entry>Key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&lt;Return&gt;</entry><entry>go down one line</entry></row>
<row><entry>&lt;Space&gt;</entry><entry>display the next page (or next message if at the end of a message)</entry></row>
<row><entry>-</entry><entry>go back to the previous page</entry></row>
<row><entry>n</entry><entry>search for next match</entry></row>
<row><entry>S</entry><entry>skip beyond quoted text</entry></row>
<row><entry>T</entry><entry>toggle display of quoted text</entry></row>
<row><entry>?</entry><entry>show keybindings</entry></row>
<row><entry>/</entry><entry>regular expression search</entry></row>
<row><entry>Esc /</entry><entry>backward regular expression search</entry></row>
<row><entry>&bsol;</entry><entry>toggle highlighting of search matches</entry></row>
<row><entry>&circ;</entry><entry>jump to the top of the message</entry></row>
</tbody>
</tgroup>
</table>

<para>
In addition to key bindings in <xref linkend="tab-key-pager"/>,
many of the functions from the index menu are also available in
the pager, such as <literal>&lt;delete-message&gt;</literal> or <literal>&lt;copy-message&gt;</literal>
(this is one advantage over using an external pager to view messages).
</para>

<para>
Also, the internal pager supports a couple other advanced features. For
one, it will accept and translate the <quote>standard</quote> nroff sequences for
bold and underline. These sequences are a series of either the letter,
backspace (&circ;H), the letter again for bold or the letter, backspace,
<quote>&lowbar;</quote> for denoting underline. Mutt will attempt to display these
in bold and underline respectively if your terminal supports them. If
not, you can use the bold and underline <link linkend="color">color</link>
objects to specify a color or mono attribute for them.
</para>

<para>
Additionally, the internal pager supports the ANSI escape sequences for
character attributes.  Mutt translates them into the correct color and
character settings.  The sequences Mutt supports are:
</para>

<screen>
&bsol;e&lsqb;<emphasis>Ps</emphasis>;<emphasis>Ps</emphasis>;..<emphasis>Ps</emphasis>;m
</screen>

<para>
where <emphasis>Ps</emphasis> can be one of the codes shown in
<xref linkend="tab-ansi-esc"/>.
</para>

<table id="tab-ansi-esc">
<title>ANSI escape sequences</title>
<tgroup cols="2">
<thead>
<row><entry>Escape code</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>0</entry><entry>All attributes off</entry></row>
<row><entry>1</entry><entry>Bold on</entry></row>
<row><entry>4</entry><entry>Underline on</entry></row>
<row><entry>5</entry><entry>Blink on</entry></row>
<row><entry>7</entry><entry>Reverse video on</entry></row>
<row><entry>3<emphasis>&lt;color&gt;</emphasis></entry><entry>Foreground color is <emphasis>&lt;color&gt;</emphasis> (see <xref linkend="tab-color"/>)</entry></row>
<row><entry>4<emphasis>&lt;color&gt;</emphasis></entry><entry>Background color is <emphasis>&lt;color&gt;</emphasis> (see <xref linkend="tab-color"/>)</entry></row>
</tbody>
</tgroup>
</table>

<table id="tab-color">
<title>Color sequences</title>
<tgroup cols="2">
<thead>
<row><entry>Color code</entry><entry>Color</entry></row>
</thead>
<tbody>
<row><entry>0</entry><entry>Black</entry></row>
<row><entry>1</entry><entry>Red</entry></row>
<row><entry>2</entry><entry>Green</entry></row>
<row><entry>3</entry><entry>Yellow</entry></row>
<row><entry>4</entry><entry>Blue</entry></row>
<row><entry>5</entry><entry>Magenta</entry></row>
<row><entry>6</entry><entry>Cyan</entry></row>
<row><entry>7</entry><entry>White</entry></row>
</tbody>
</tgroup>
</table>

<para>
Mutt uses these attributes for handling <literal>text/enriched</literal>
messages, and they can also be used by an external
<link linkend="auto-view">autoview</link> script for highlighting
purposes.
</para>

<note>
<para>
If you change the colors for your
display, for example by changing the color associated with color2 for
your xterm, then that color will be used instead of green.
</para>
</note>

<note>
<para>
Note that the search commands in the pager take regular expressions,
which are not quite the same as the more
complex <link linkend="patterns">patterns</link> used by the search
command in the index. This is because the pager only performs simple
text search, whereas the index provides boolean filtering on several
aspects of messages.
</para>
</note>

</sect2>

<sect2 id="threads">
<title>Threaded Mode</title>

<para>
When the mailbox is <link linkend="sort">sorted</link> by <emphasis>threads</emphasis>, there are
a few additional functions available in the <emphasis>index</emphasis> and <emphasis>pager</emphasis> modes
as shown in <xref linkend="tab-key-threads"/>.
</para>

<table id="tab-key-threads">
<title>Most common thread mode keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&circ;D</entry><entry><literal>&lt;delete-thread&gt;</literal></entry><entry>delete all messages in the current thread</entry></row>
<row><entry>&circ;U</entry><entry><literal>&lt;undelete-thread&gt;</literal></entry><entry>undelete all messages in the current thread</entry></row>
<row><entry>&circ;N</entry><entry><literal>&lt;next-thread&gt;</literal></entry><entry>jump to the start of the next thread</entry></row>
<row><entry>&circ;P</entry><entry><literal>&lt;previous-thread&gt;</literal></entry><entry>jump to the start of the previous thread</entry></row>
<row><entry>&circ;R</entry><entry><literal>&lt;read-thread&gt;</literal></entry><entry>mark the current thread as read</entry></row>
<row><entry>Esc d</entry><entry><literal>&lt;delete-subthread&gt;</literal></entry><entry>delete all messages in the current subthread</entry></row>
<row><entry>Esc u</entry><entry><literal>&lt;undelete-subthread&gt;</literal></entry><entry>undelete all messages in the current subthread</entry></row>
<row><entry>Esc n</entry><entry><literal>&lt;next-subthread&gt;</literal></entry><entry>jump to the start of the next subthread</entry></row>
<row><entry>Esc p</entry><entry><literal>&lt;previous-subthread&gt;</literal></entry><entry>jump to the start of the previous subthread</entry></row>
<row><entry>Esc r</entry><entry><literal>&lt;read-subthread&gt;</literal></entry><entry>mark the current subthread as read</entry></row>
<row><entry>Esc t</entry><entry><literal>&lt;tag-thread&gt;</literal></entry><entry>toggle the tag on the current thread</entry></row>
<row><entry>Esc v</entry><entry><literal>&lt;collapse-thread&gt;</literal></entry><entry>toggle collapse for the current thread</entry></row>
<row><entry>Esc V</entry><entry><literal>&lt;collapse-all&gt;</literal></entry><entry>toggle collapse for all threads</entry></row>
<row><entry>P</entry><entry><literal>&lt;parent-message&gt;</literal></entry><entry>jump to parent message in thread</entry></row>
</tbody>
</tgroup>
</table>

<note>
<para>
Collapsing a thread displays only the first message
in the thread and hides the others. This is useful when threads
contain so many messages that you can only see a handful of threads on
the screen. See &percnt;M in <link linkend="index-format">&dollar;index&lowbar;format</link>.
For example, you could use "&percnt;?M?(&num;&percnt;03M)&amp;(&percnt;4l)?" in <link linkend="index-format">&dollar;index&lowbar;format</link> to optionally
display the number of hidden messages if the thread is collapsed.
</para>
</note>

<para>
See also: <link linkend="strict-threads">&dollar;strict&lowbar;threads</link>.
</para>

</sect2>

<sect2 id="reading-misc">
<title>Miscellaneous Functions</title>

<para>
In addition, the <emphasis>index</emphasis> and <emphasis>pager</emphasis>
menus have these interesting functions:
</para>

<variablelist>

<varlistentry>
<term>
<literal>&lt;create-alias&gt;</literal><anchor id="create-alias"/> (default: a)
</term>
<listitem>
<para>
Creates a new alias based upon the current message (or prompts for a
new one).  Once editing is complete, an <link linkend="alias">alias</link>
command is added to the file specified by
the <link linkend="alias-file">&dollar;alias&lowbar;file</link> variable
for future use
</para>

<note>
<para>
Mutt does not read the <link linkend="alias-file">&dollar;alias&lowbar;file</link>
upon startup so you must explicitly <link linkend="source">source</link> the file.
</para>
</note>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;check-traditional-pgp&gt;</literal><anchor id="check-traditional-pgp"/> (default: Esc P)
</term>
<listitem>
<para>
This function will search the current message for content signed or
encrypted with PGP the <quote>traditional</quote> way, that is, without proper
MIME tagging.  Technically, this function will temporarily change
the MIME content types of the body parts containing PGP data; this
is similar to the <link linkend="edit-type"><literal>&lt;edit-type&gt;</literal></link> function's
effect.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;edit&gt;</literal><anchor id="edit"/> (default: e)
</term>
<listitem>
<para>
This command (available in the index and pager) allows you to
edit the raw current message as it's present in the mail folder.
After you have finished editing, the changed message will be
appended to the current folder, and the original message will be
marked for deletion; if the message is unchanged it won't be replaced.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;edit-type&gt;</literal><anchor id="edit-type"/> (default:
&circ;E on the attachment menu, and in the pager and index menus;
&circ;T on the compose menu)
</term>
<listitem>
<para>
This command is used to temporarily edit an attachment's content
type to fix, for instance, bogus character set parameters.  When
invoked from the index or from the pager, you'll have the
opportunity to edit the top-level attachment's content type.  On the
<link linkend="attach-menu">attachment menu</link>, you can change any
attachment's content type. These changes are not persistent, and get
lost upon changing folders.
</para>

<para>
Note that this command is also available on the <link linkend="compose-menu">compose
menu</link>.  There, it's used to fine-tune the properties of attachments you are going
to send.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;enter-command&gt;</literal><anchor id="enter-command"/> (default: <quote>:</quote>)
</term>
<listitem>
<para>
This command is used to execute any command you would normally put in a
configuration file.  A common use is to check the settings of variables, or
in conjunction with <link linkend="macro">macros</link> to change settings on the
fly.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;extract-keys&gt;</literal><anchor id="extract-keys"/> (default: &circ;K)
</term>
<listitem>
<para>
This command extracts PGP public keys from the current or tagged
message(s) and adds them to your PGP public key ring.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;forget-passphrase&gt;</literal><anchor id="forget-passphrase"/> (default:
&circ;F)
</term>
<listitem>
<para>
This command wipes the passphrase(s) from memory. It is useful, if
you misspelled the passphrase.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;list-reply&gt;</literal><anchor id="list-reply"/> (default: L)
</term>
<listitem>
<para>
Reply to the current or tagged message(s) by extracting any addresses which
match the regular expressions given by the <link linkend="lists">lists or subscribe</link>
commands, but also honor any <literal>Mail-Followup-To</literal> header(s) if the
<link linkend="honor-followup-to">&dollar;honor&lowbar;followup&lowbar;to</link>
configuration variable is set.  Using this when replying to messages posted
to mailing lists helps avoid duplicate copies being sent to the author of
the message you are replying to.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;pipe-message&gt;</literal><anchor id="pipe-message"/> (default: &verbar;)
</term>
<listitem>
<para>
Asks for an external Unix command and pipes the current or
tagged message(s) to it.  The variables <link linkend="pipe-decode">&dollar;pipe&lowbar;decode</link>, <link linkend="pipe-split">&dollar;pipe&lowbar;split</link>,
<link linkend="pipe-sep">&dollar;pipe&lowbar;sep</link> and <link linkend="wait-key">&dollar;wait&lowbar;key</link> control the exact behavior of this function.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;resend-message&gt;</literal><anchor id="resend-message"/> (default: Esc e)
</term>
<listitem>
<para>
Mutt takes the current message as a template for a
new message.  This function is best described as "recall from arbitrary
folders".  It can conveniently be used to forward MIME messages while
preserving the original mail structure. Note that the amount of headers
included here depends on the value of the <link linkend="weed">&dollar;weed</link>
variable.
</para>

<para>
This function is also available from the attachment menu. You can use this
to easily resend a message which was included with a bounce message
as a <literal>message/rfc822</literal> body part.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;shell-escape&gt;</literal><anchor id="shell-escape"/> (default: !)
</term>
<listitem>
<para>
Asks for an external Unix command and executes it.  The <link linkend="wait-key">&dollar;wait&lowbar;key</link> can be used to control
whether Mutt will wait for a key to be pressed when the command returns
(presumably to let the user read the output of the command), based on
the return status of the named command. If no command is given, an
interactive shell is executed.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;toggle-quoted&gt;</literal><anchor id="toggle-quoted"/> (default: T)
</term>
<listitem>
<para>
The pager uses the <link linkend="quote-regexp">&dollar;quote&lowbar;regexp</link> variable to detect quoted text when
displaying the body of the message.  This function toggles the display
of the quoted material in the message.  It is particularly useful when
being interested in just the response and there is a large amount of
quoted text in the way.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<literal>&lt;skip-quoted&gt;</literal><anchor id="skip-quoted"/> (default: S)
</term>
<listitem>
<para>
This function will go to the next line of non-quoted text which comes
after a line of quoted text in the internal pager.
</para>
</listitem>
</varlistentry>

</variablelist>

</sect2>

</sect1>

<sect1 id="sending">
<title>Sending Mail</title>

<sect2 id="sending-intro">
<title>Introduction</title>

<para>
The bindings shown in <xref linkend="tab-key-send"/> are available in the
<emphasis>index</emphasis> and <emphasis>pager</emphasis> to start a new message.
</para>

<table id="tab-key-send">
<title>Most common mail sending keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>m</entry><entry><literal>&lt;compose&gt;</literal></entry><entry>compose a new message</entry></row>
<row><entry>r</entry><entry><literal>&lt;reply&gt;</literal></entry><entry>reply to sender</entry></row>
<row><entry>g</entry><entry><literal>&lt;group-reply&gt;</literal></entry><entry>reply to all recipients</entry></row>
<row><entry>L</entry><entry><literal>&lt;list-reply&gt;</literal></entry><entry>reply to mailing list address</entry></row>
<row><entry>f</entry><entry><literal>&lt;forward&gt;</literal></entry><entry>forward message</entry></row>
<row><entry>b</entry><entry><literal>&lt;bounce&gt;</literal></entry><entry>bounce (remail) message</entry></row>
<row><entry>Esc k</entry><entry><literal>&lt;mail-key&gt;</literal></entry><entry>mail a PGP public key to someone</entry></row>
</tbody>
</tgroup>
</table>

<para>
<emphasis>Bouncing</emphasis> a message sends the message as-is to the recipient you
specify.  <emphasis>Forwarding</emphasis> a message allows you to add comments or
modify the message you are forwarding.  These items are discussed
in greater detail in the next chapter <quote><link linkend="forwarding-mail">Forwarding
and Bouncing Mail</link>.</quote>
</para>

<para>
Mutt will then enter the <emphasis>compose</emphasis> menu and prompt you for the
recipients to place on the <quote>To:</quote> header field.  Next, it will ask
you for the <quote>Subject:</quote> field for the message, providing a default if
you are replying to or forwarding a message.  See also
<link linkend="askcc">&dollar;askcc</link>,
<link linkend="askbcc">&dollar;askbcc</link>,
<link linkend="autoedit">&dollar;autoedit</link>,
<link linkend="bounce">&dollar;bounce</link>,
<link linkend="fast-reply">&dollar;fast&lowbar;reply</link>,
and <link linkend="include">&dollar;include</link>
for changing how Mutt asks these questions.
</para>

<para>
Mutt will then automatically start your <link linkend="editor">&dollar;editor</link>
on the message body. If the <link linkend="edit-headers">&dollar;edit&lowbar;headers</link>
variable is set, the headers will be at the top of the message in your editor.
Any messages you are replying to will be added in sort order to the message,
with appropriate <link linkend="attribution">&dollar;attribution</link>,
<link linkend="indent-string">&dollar;indent&lowbar;string</link> and
<link linkend="post-indent-string">&dollar;post&lowbar;indent&lowbar;string</link>.
When forwarding a message, if the <link linkend="mime-forward">&dollar;mime&lowbar;forward</link>
variable is unset, a copy of the forwarded message will be included.  If
you have specified a <link linkend="signature">&dollar;signature</link>, it
will be appended to the message.
</para>

<para>
Once you have finished editing the body of your mail message, you are
returned to the <emphasis>compose</emphasis> menu providing the functions
shown in <xref linkend="tab-func-compose"/> to modify, send or postpone the
message.
</para>

<table id="tab-func-compose">
<title>Most common compose menu keys</title>
<tgroup cols="3">
<thead>
<row><entry>Key</entry><entry>Function</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>a</entry><entry><literal>&lt;attach-file&gt;</literal></entry><entry>attach a file</entry></row>
<row><entry>A</entry><entry><literal>&lt;attach-message&gt;</literal></entry><entry>attach message(s) to the message</entry></row>
<row><entry>Esc k</entry><entry><literal>&lt;attach-key&gt;</literal></entry><entry>attach a PGP public key</entry></row>
<row><entry>d</entry><entry><literal>&lt;edit-description&gt;</literal></entry><entry>edit description on attachment</entry></row>
<row><entry>D</entry><entry><literal>&lt;detach-file&gt;</literal></entry><entry>detach a file</entry></row>
<row><entry>t</entry><entry><literal>&lt;edit-to&gt;</literal></entry><entry>edit the To field</entry></row>
<row><entry>Esc f</entry><entry><literal>&lt;edit-from&gt;</literal></entry><entry>edit the From field</entry></row>
<row><entry>r</entry><entry><literal>&lt;edit-reply-to&gt;</literal></entry><entry>edit the Reply-To field</entry></row>
<row><entry>c</entry><entry><literal>&lt;edit-cc&gt;</literal></entry><entry>edit the Cc field</entry></row>
<row><entry>b</entry><entry><literal>&lt;edit-bcc&gt;</literal></entry><entry>edit the Bcc field</entry></row>
<row><entry>y</entry><entry><literal>&lt;send-message&gt;</literal></entry><entry>send the message</entry></row>
<row><entry>s</entry><entry><literal>&lt;edit-subject&gt;</literal></entry><entry>edit the Subject</entry></row>
<row><entry>S</entry><entry><literal>&lt;smime-menu&gt;</literal></entry><entry>select S/MIME options</entry></row>
<row><entry>f</entry><entry><literal>&lt;edit-fcc&gt;</literal></entry><entry>specify an <quote>Fcc</quote> mailbox</entry></row>
<row><entry>p</entry><entry><literal>&lt;pgp-menu&gt;</literal></entry><entry>select PGP options</entry></row>
<row><entry>P</entry><entry><literal>&lt;postpone-message&gt;</literal></entry><entry>postpone this message until later</entry></row>
<row><entry>q</entry><entry><literal>&lt;quit&gt;</literal></entry><entry>quit (abort) sending the message</entry></row>
<row><entry>w</entry><entry><literal>&lt;write-fcc&gt;</literal></entry><entry>write the message to a folder</entry></row>
<row><entry>i</entry><entry><literal>&lt;ispell&gt;</literal></entry><entry>check spelling (if available on your system)</entry></row>
<row><entry>&circ;F</entry><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>wipe passphrase(s) from memory</entry></row>
</tbody>
</tgroup>
</table>

<para>
The compose menu is also used to edit the attachments for a message which can be either files
or other messages. The <literal>&lt;attach-message&gt;</literal> function to will prompt you for a folder to
attach messages from. You can now tag messages in that folder and they
will be attached to the message you are sending.
</para>

<note>
<para>
Note that certain
operations like composing a new mail, replying, forwarding, etc. are
not permitted when you are in that folder. The &percnt;r in
<link linkend="status-format">&dollar;status&lowbar;format</link> will change to
a <quote>A</quote> to indicate that you are in attach-message mode.
</para>
</note>

</sect2>

<sect2 id="edit-header">
<title>Editing the message header</title>

<para>
When editing the header because of <link linkend="edit-headers">&dollar;edit&lowbar;headers</link>
being set, there are a several pseudo headers available which
will not be included in sent messages.
</para>

<sect3 id="fcc-header">
<title>Fcc: pseudo header</title>

<para>
If you specify

<literal>Fcc:</literal> <emphasis>filename</emphasis>

as a header, Mutt will pick up <emphasis>filename</emphasis>
just as if you had used the <literal>&lt;edit-fcc&gt;</literal> function in the <emphasis>compose</emphasis> menu.
</para>

</sect3>

<sect3 id="attach-header">
<title>Attach: pseudo header</title>

<para>
You can also attach files to your message by specifying

<literal>Attach:</literal> <emphasis>filename</emphasis>  &lsqb; <emphasis>description</emphasis> &rsqb;

where <emphasis>filename</emphasis> is the file to attach and <emphasis>description</emphasis> is an
optional string to use as the description of the attached file.
</para>

</sect3>

<sect3 id="pgp-header">
<title>Pgp: pseudo header</title>

<para>
If you want to use PGP, you can specify
</para>

<para>
<literal>Pgp:</literal> &lsqb; <literal>E</literal> &verbar; <literal>S</literal> &verbar; <literal>S</literal><emphasis>&lt;id&gt;</emphasis> &rsqb;

</para>

<para>
<quote>E</quote> selects encryption, <quote>S</quote> selects signing and
<quote>S&lt;id&gt;</quote> selects signing with the given key, setting
<link linkend="pgp-sign-as">&dollar;pgp&lowbar;sign&lowbar;as</link>
permanently.
</para>

</sect3>

<sect3 id="in-reply-to-header">
<title>In-Reply-To: header</title>

<para>
When replying to messages, the <emphasis>In-Reply-To:</emphasis> header contains the
Message-Id of the message(s) you reply to. If you remove its value, Mutt will not generate a
<emphasis>References:</emphasis> field, which allows you to create a new message thread, for example
to create a new message to a mailing list without having to enter the mailing list's address.
</para>

</sect3>

</sect2>

<sect2 id="sending-crypto">
<title>Sending cryptographically signed/encrypted messages</title>

<para>
If you have told mutt to PGP or S/MIME encrypt a message, it will guide you
through a key selection process when you try to send the message.
Mutt will not ask you any questions about keys which have a
certified user ID matching one of the message recipients' mail
addresses.  However, there may be situations in which there are
several keys, weakly certified user ID fields, or where no matching
keys can be found.
</para>

<para>
In these cases, you are dropped into a menu with a list of keys from
which you can select one.  When you quit this menu, or mutt can't
find any matching keys, you are prompted for a user ID.  You can, as
usually, abort this prompt using <literal>&circ;G</literal>.  When you do so, mutt will
return to the compose screen.
</para>

<para>
Once you have successfully finished the key selection, the message
will be encrypted using the selected public keys when sent out.
</para>

<para>
Most fields of the entries in the key selection menu (see also <link linkend="pgp-entry-format">&dollar;pgp&lowbar;entry&lowbar;format</link>)
have obvious meanings.  But some explanations on the capabilities, flags,
and validity fields are in order.
</para>

<para>
The flags sequence (&percnt;f) will expand to one of the flags in
<xref linkend="tab-pgp-menuflags"/>.
</para>

<table id="tab-pgp-menuflags">
<title>PGP key menu flags</title>
<tgroup cols="2">
<thead>
<row><entry>Flag</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>R</entry><entry>The key has been revoked and can't be used.</entry></row>
<row><entry>X</entry><entry>The key is expired and can't be used.</entry></row>
<row><entry>d</entry><entry>You have marked the key as disabled.</entry></row>
<row><entry>c</entry><entry>There are unknown critical self-signature packets.</entry></row>
</tbody>
</tgroup>
</table>

<para>
The capabilities field (&percnt;c) expands to a two-character sequence
representing a key's capabilities.  The first character gives
the key's encryption capabilities: A minus sign (<quote>-</quote>) means
that the key cannot be used for encryption.  A dot (<quote>.</quote>) means that
it's marked as a signature key in one of the user IDs, but may
also be used for encryption.  The letter <quote>e</quote> indicates that
this key can be used for encryption.
</para>

<para>
The second character indicates the key's signing capabilities.  Once
again, a <quote>-</quote> implies <quote>not for signing</quote>, <quote>.</quote> implies
that the key is marked as an encryption key in one of the user-ids, and
<quote>s</quote> denotes a key which can be used for signing.
</para>

<para>
Finally, the validity field (&percnt;t) indicates how well-certified a user-id
is.  A question mark (<quote>?</quote>) indicates undefined validity, a minus
character (<quote>-</quote>) marks an untrusted association, a space character
means a partially trusted association, and a plus character (<quote>+</quote>)
indicates complete validity.
</para>

</sect2>

<sect2 id="sending-mixmaster">
<title>Sending anonymous messages via mixmaster</title>

<para>
You may also have compiled mutt to co-operate with Mixmaster, an
anonymous remailer.  Mixmaster permits you to send your messages
anonymously using a chain of remailers. Mixmaster support in mutt is for
mixmaster version 2.04 (beta 45 appears to be the latest) and 2.03.
It does not support earlier versions or the later so-called version 3 betas,
of which the latest appears to be called 2.9b23.
</para>

<para>
To use it, you'll have to obey certain restrictions.  Most
important, you cannot use the <literal>Cc</literal> and <literal>Bcc</literal> headers.  To tell
Mutt to use mixmaster, you have to select a remailer chain, using
the mix function on the compose menu.
</para>

<para>
The chain selection screen is divided into two parts.  In the
(larger) upper part, you get a list of remailers you may use.  In
the lower part, you see the currently selected chain of remailers.
</para>

<para>
You can navigate in the chain using the <literal>&lt;chain-prev&gt;</literal> and
<literal>&lt;chain-next&gt;</literal> functions, which are by default bound to the left
and right arrows and to the <literal>h</literal> and <literal>l</literal> keys (think vi
keyboard bindings).  To insert a remailer at the current chain
position, use the <literal>&lt;insert&gt;</literal> function.  To append a remailer behind
the current chain position, use <literal>&lt;select-entry&gt;</literal> or <literal>&lt;append&gt;</literal>.
You can also delete entries from the chain, using the corresponding
function.  Finally, to abandon your changes, leave the menu, or
<literal>&lt;accept&gt;</literal> them pressing (by default) the <literal>Return</literal> key.
</para>

<para>
Note that different remailers do have different capabilities,
indicated in the &percnt;c entry of the remailer menu lines (see
<link linkend="mix-entry-format">&dollar;mix&lowbar;entry&lowbar;format</link>).  Most important is
the <quote>middleman</quote> capability, indicated by a capital <quote>M</quote>: This
means that the remailer in question cannot be used as the final
element of a chain, but will only forward messages to other
mixmaster remailers.  For details on the other capabilities, please
have a look at the mixmaster documentation.
</para>

</sect2>

<sect2 id="ff">
<title>Sending format=flowed messages</title>

<sect3 id="ff-concept">
<title>Concept</title>

<para>
<literal>format=flowed</literal>-style messages (or <literal>f=f</literal>
for short) are <literal>text/plain</literal> messages that consist of paragraphs which a receiver's
mail client may reformat to its own needs which mostly means to
customize line lengths regardless of what the sender sent. Technically this is
achieved by letting lines of a <quote>flowable</quote> paragraph end in spaces
except for the last line.
</para>

<para>
While for text-mode clients like mutt it's the best way to assume only a
standard 80x25 character cell terminal, it may be desired to let the
receiver decide completely how to view a message.
</para>

</sect3>

<sect3 id="ff-support">
<title>Mutt support</title>

<para>
Mutt only supports setting the required <literal>format=flowed</literal>
MIME parameter on outgoing messages if the <link
linkend="text-flowed">&dollar;text&lowbar;flowed</link>
variable is set, specifically it does not add the
trailing spaces.
</para>

<para>
After editing the initial message text and before entering
the compose menu, mutt properly space-stuffes the message.
<emphasis>Space-stuffing</emphasis> is required by RfC3676 defining
<literal>format=flowed</literal> and means to prepend a space to:
</para>

<itemizedlist>
<listitem><para>all lines starting with a space</para></listitem>
<listitem><para>lines starting with the word <quote><literal>From</literal></quote>
followed by space</para></listitem>
<listitem><para>all lines starting with <quote><literal>&gt;</literal></quote> which
is not intended to be a quote character</para></listitem>
</itemizedlist>

<note>
<para>
Mutt only supports space-stuffing
for the first two types of lines but not for the third: It is impossible to
safely detect whether a leading <literal>&gt;</literal> character starts a
quote or not. Furthermore, Mutt only applies space-stuffing
<emphasis>once</emphasis> after the initial edit is finished.
</para>
</note>

<para>
All leading spaces are to be removed by receiving clients to restore
the original message prior to further processing.
</para>

</sect3>

<sect3 id="ff-editor">
<title>Editor considerations</title>

<para>
As mutt provides no additional features to compose <literal>f=f</literal>
messages, it's completely up to the user and his editor to produce
proper messages. Please consider your editor's documentation if you
intend to send <literal>f=f</literal> messages.
</para>

<para>
Please note that when editing messages from the compose menu several
times before really sending a mail, it's up to the user to ensure that
the message is properly space-stuffed.
</para>

<para>
For example, <emphasis>vim</emphasis> provides the <literal>w</literal>
flag for its <literal>formatoptions</literal> setting to assist in
creating <literal>f=f</literal> messages, see <literal>:help
fo-table</literal> for details.
</para>

</sect3>

</sect2>

</sect1>

<sect1 id="forwarding-mail">
<title>Forwarding and Bouncing Mail</title>

<para>
Bouncing and forwarding let you send an existing message to recipients
that you specify. Bouncing a message sends a verbatim copy of a message
to alternative addresses as if they were the message's original
recipients specified in the Bcc header.
Forwarding a message, on the other hand, allows you to modify the message
before it is resent (for example, by adding your own comments). Bouncing
is done using the <literal>&lt;bounce&gt;</literal> function and forwarding
using the <literal>&lt;forward&gt;</literal> function bound to <quote>b</quote> and <quote>f</quote>
respectively.
</para>

<para>
Forwarding can be done by including the original message in the new
message's body (surrounded by indicating lines) or including it as a MIME
attachment, depending on the value of the <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> variable.  Decoding of attachments,
like in the pager, can be controlled by the <link linkend="forward-decode">&dollar;forward&lowbar;decode</link> and <link linkend="mime-forward-decode">&dollar;mime&lowbar;forward&lowbar;decode</link> variables,
respectively.  The desired forwarding format may depend on the content,
therefore <emphasis>&dollar;mime&lowbar;forward</emphasis> is a quadoption which, for
example, can be set to <quote>ask-no</quote>.
</para>

<para>
The inclusion of headers is controlled by the current setting of the
<link linkend="weed">&dollar;weed</link> variable, unless <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> is set.
</para>

<para>
Editing the message to forward follows the same procedure as sending or
replying to a message does.
</para>

</sect1>

<sect1 id="postponing-mail">
<title>Postponing Mail</title>

<para>
At times it is desirable to delay sending a message that you have
already begun to compose.  When the <literal>&lt;postpone-message&gt;</literal> function is
used in the <emphasis>compose</emphasis> menu, the body of your message and attachments
are stored in the mailbox specified by the <link linkend="postponed">&dollar;postponed</link> variable.  This means that you can recall the
message even if you exit Mutt and then restart it at a later time.
</para>

<para>
Once a message is postponed, there are several ways to resume it.  From the
command line you can use the <quote>-p</quote> option, or if you compose a new
message from the <emphasis>index</emphasis> or <emphasis>pager</emphasis> you will be prompted if postponed
messages exist.  If multiple messages are currently postponed, the
<emphasis>postponed</emphasis> menu will pop up and you can select which message you would
like to resume.
</para>

<note>
<para>
If you postpone a reply to a message, the reply setting of
the message is only updated when you actually finish the message and
send it.  Also, you must be in the same folder with the message you
replied to for the status of the message to be updated.
</para>
</note>

<para>
See also the <link linkend="postpone">&dollar;postpone</link> quad-option.
</para>

</sect1>

</chapter>

<chapter id="configuration">
<title>Configuration</title>

<sect1 id="configuration-files">
<title>Location of initialization files</title>

<para>
While the default configuration (or <quote>preferences</quote>) make Mutt
usable right out of the box, it is often desirable to tailor Mutt to
suit your own tastes. When Mutt is first invoked, it will attempt to
read the <quote>system</quote> configuration file (defaults set by your local
system administrator), unless the <quote>-n</quote> <link linkend="commandline">command line</link> option is specified.  This file is typically
<literal>/usr/local/share/mutt/Muttrc</literal> or <literal>/etc/Muttrc</literal>. Mutt
will next look for a file named <literal>.muttrc</literal> in your home
directory.  If this file does not exist and your home directory has
a subdirectory named <literal>.mutt</literal>, mutt try to load a file named
<literal>.mutt/muttrc</literal>.
</para>

<para>
<literal>.muttrc</literal> is the file where you will usually place your <link linkend="commands">commands</link> to configure Mutt.
</para>

<para>
In addition, mutt supports version specific configuration files that are
parsed instead of the default files as explained above.  For instance, if
your system has a <literal>Muttrc-0.88</literal> file in the system configuration
directory, and you are running version 0.88 of mutt, this file will be
sourced instead of the <literal>Muttrc</literal> file.  The same is true of the user
configuration file, if you have a file <literal>.muttrc-0.88.6</literal> in your home
directory, when you run mutt version 0.88.6, it will source this file
instead of the default <literal>.muttrc</literal> file.  The version number is the
same which is visible using the <quote>-v</quote> <link linkend="commandline">command line</link> switch or using the <literal>show-version</literal> key (default:
V) from the index menu.
</para>

</sect1>

<sect1 id="muttrc-syntax" xreflabel="Syntax of Initialization Files">
<title>Syntax of Initialization Files</title>

<para>
An initialization file consists of a series of <link linkend="commands">commands</link>.  Each line of the file may contain one or more commands.
When multiple commands are used, they must be separated by a semicolon
(;).
</para>

<example id="ex-rc-multiple-cmds">
<title>Multiple configuration commands per line</title>
<screen>
set realname='Mutt user' ; ignore x-
</screen>
</example>

<para>
The hash mark, or pound sign
(<quote>&num;</quote>), is used as a <quote>comment</quote> character. You can use it to
annotate your initialization file. All text after the comment character
to the end of the line is ignored. For example,
</para>

<example id="ex-ec-comment">
<title>Commenting configuration files</title>
<screen>
my_hdr X-Disclaimer: Why are you listening to me? &num; This is a comment
</screen>
</example>

<para>
Single quotes (') and double quotes (&quot;) can be used to quote strings
which contain spaces or other special characters.  The difference between
the two types of quotes is similar to that of many popular shell programs,
namely that a single quote is used to specify a literal string (one that is
not interpreted for shell variables or quoting with a backslash &lsqb;see
next paragraph&rsqb;), while double quotes indicate a string for which
should be evaluated.  For example, backticks are evaluated inside of double
quotes, but <emphasis role="bold">not</emphasis> for single quotes.
</para>

<para>
&bsol; quotes the next character, just as in shells such as bash and zsh.
For example, if want to put quotes <quote>&quot;</quote> inside of a string, you can use
<quote>&bsol;</quote> to force the next character to be a literal instead of interpreted
character.
</para>

<example id="ex-rc-quote">
<title>Escaping quotes in congfiguration files</title>
<screen>
set realname="Michael \"MuttDude\" Elkins"
</screen>
</example>

<para>
<quote>&bsol;&bsol;</quote> means to insert a literal <quote>&bsol;</quote> into the line.
<quote>&bsol;n</quote> and <quote>&bsol;r</quote> have their usual C meanings of linefeed and
carriage-return, respectively.
</para>

<para>
A &bsol; at the end of a line can be used to split commands over
multiple lines, provided that the split points don't appear in the
middle of command names.
</para>

<para>
It is also possible to substitute the output of a Unix command in an
initialization file.  This is accomplished by enclosing the command in
backticks (``).  For example,
</para>

<example id="ex-rc-backtick">
<title>Using external command's output in configuration files</title>
<screen>
my_hdr X-Operating-System: `uname -a`
</screen>
</example>

<para>
The output of the Unix command <quote>uname -a</quote> will be substituted before the
line is parsed.
</para>

<note>
<para>
Since initialization files are line oriented, only
the first line of output from the Unix command will be substituted.
</para>
</note>

<para>
Both environment variables and mutt variables can be accessed by
prepending <quote>&dollar;</quote> to the name of the variable. For example,
</para>

<example id="ex-rc-env">
<title>Using environment variables in configuration files</title>
<screen>
set record=+sent_on_$HOSTNAME
</screen>
</example>

<para>
will cause mutt to save outgoing messages to a folder named
<quote>sent_on_kremvax</quote> if the environment variable HOSTNAME is set to
<quote>kremvax.</quote> (See <link linkend="record">&dollar;record</link> for
details.)
</para>

<para>
Mutt expands the variable when it is assigned, not when it is used. If
the value of a variable on the right-hand side of an assignment
changes after the assignment, the variable on the left-hand side will
not be affected.
</para>

<para>
The commands understood by mutt are explained in the next paragraphs.
For a complete list, see the <link linkend="commands">command reference</link>.
</para>

<para>
All configuration files are expected to be in the current locale as
specified by the <link linkend="charset">&dollar;charset</link> variable
which doesn't have a default value since it's determined by Mutt at startup.
If a configuration file is not encoded in the same character set the
<link linkend="config-charset">&dollar;config&lowbar;charset</link>
variable should be used: all lines starting with the next are recoded
from &dollar;config&lowbar;charset to &dollar;charset.
</para>

<para>
This mechanism should be avoided if possible as it has the
following implications:
</para>

<itemizedlist>

<listitem><para>These variables should be set early in a configuration
file with &dollar;charset preceding &dollar;config&lowbar;charset so Mutt
know what character set to convert to.</para></listitem>

<listitem><para>If &dollar;config&lowbar;charset is set, it should be set
in each configuration file because the value is global and <emphasis>not</emphasis>
per configuration file.</para></listitem>

<listitem><para>Because Mutt first recodes a line before it attempts to parse it,
a conversion introducing question marks or other characters as
part of errors (unconvertable characters, transliteration) may introduce syntax
errors or silently change the meaning of certain tokens (e.g. inserting
question marks into regular expressions).</para></listitem>

</itemizedlist>

</sect1>

<sect1 id="addrgroup">
<title>Address groups</title>

<para>Usage:</para>

<cmdsynopsis>
<command>group</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>

<cmdsynopsis>
<command>ungroup</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
<literal>group</literal> is used to directly add either addresses or
regular expressions to the specified group or groups. The different
categories of arguments to the <literal>group</literal> command can be
in any order. The flags <literal>-rx</literal> and
<literal>-addr</literal> specify what the following strings (that cannot
begin with a hyphen) should be interpreted as: either a regular
expression or an email address, respectively.
</para>

<para>
These address groups can also be created implicitly by the
<link linkend="alias">alias</link>, <link linkend="lists">lists</link>,
<link linkend="lists">subscribe</link> and
<link linkend="alternates">alternates</link> commands by specifying the
optional <literal>-group</literal> option.
</para>

<para>
Once defined, these address groups can be used in
<link linkend="patterns">patterns</link> to search for and limit the
display to messages matching a group.
</para>

<para>
<literal>ungroup</literal> is used to remove addresses or regular
expressions from the specified group or groups. The syntax is similar to
the <literal>group</literal> command, however the special character
<literal>*</literal> can be used to empty a group of all of its
contents.
</para>

</sect1>

<sect1 id="alias">
<title>Defining/Using aliases</title>

<para>Usage:</para>

<cmdsynopsis>
<command>alias</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">address</replaceable>
</arg>
</cmdsynopsis>

<para>
It's usually very cumbersome to remember or type out the address of someone
you are communicating with.  Mutt allows you to create <quote>aliases</quote> which map
a short string to a full address.
</para>

<note>
<para>
If you want to create an alias for more than
one address, you <emphasis role="bold">must</emphasis> separate the addresses with a comma (<quote>,</quote>).
</para>
</note>

<para>
The optional <literal>-group</literal> argument to
<literal>alias</literal> causes the aliased address(es) to be added to
the named <emphasis>group</emphasis>.
</para>

<para>
To remove an alias or aliases (<quote>*</quote> means all aliases):
</para>

<cmdsynopsis>
<command>unalias</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">key</replaceable>
</arg>
</group>
</cmdsynopsis>

<screen>
alias muttdude me@cs.hmc.edu (Michael Elkins)
alias theguys manny, moe, jack
</screen>

<para>
Unlike other mailers, Mutt doesn't require aliases to be defined
in a special file.  The <literal>alias</literal> command can appear anywhere in
a configuration file, as long as this file is <link linkend="source">sourced</link>.  Consequently, you can have multiple alias files, or
you can have all aliases defined in your muttrc.
</para>

<para>
On the other hand, the <link linkend="create-alias"><literal>&lt;create-alias&gt;</literal></link>
function can use only one file, the one pointed to by the <link linkend="alias-file">&dollar;alias&lowbar;file</link> variable (which is
<literal>&tilde;/.muttrc</literal> by default). This file is not special either,
in the sense that Mutt will happily append aliases to any file, but in
order for the new aliases to take effect you need to explicitly <link linkend="source">source</link> this file too.
</para>

<para>
For example:
</para>

<example id="ex-alias-external">
<title>Configuring external alias files</title>
<screen>
source /usr/local/share/Mutt.aliases
source ~/.mail_aliases
set alias_file=~/.mail_aliases
</screen>
</example>

<para>
To use aliases, you merely use the alias at any place in mutt where mutt
prompts for addresses, such as the <emphasis>To:</emphasis> or <emphasis>Cc:</emphasis> prompt.  You can
also enter aliases in your editor at the appropriate headers if you have the
<link linkend="edit-headers">&dollar;edit&lowbar;headers</link> variable set.
</para>

<para>
In addition, at the various address prompts, you can use the tab character
to expand a partial alias to the full alias.  If there are multiple matches,
mutt will bring up a menu with the matching aliases.  In order to be
presented with the full list of aliases, you must hit tab with out a partial
alias, such as at the beginning of the prompt or after a comma denoting
multiple addresses.
</para>

<para>
In the alias menu, you can select as many aliases as you want with the
<literal>select-entry</literal> key (default: &lt;Return&gt;), and use the
<emphasis>exit</emphasis> key (default: q) to return to the address prompt.
</para>

</sect1>

<sect1 id="bind">
<title>Changing the default key bindings</title>

<para>Usage:</para>

<cmdsynopsis>
<command>bind</command>
<arg choice="plain">
<replaceable class="parameter">map</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>

<para>
This command allows you to change the default key bindings (operation
invoked when pressing a key).
</para>

<para>
<emphasis>map</emphasis> specifies in which menu the binding belongs.  Multiple maps may
be specified by separating them with commas (no additional whitespace is
allowed). The currently defined maps are:
</para>

<anchor id="maps"/>
<variablelist>

<varlistentry>
<term>generic</term>
<listitem>
<para>
This is not a real menu, but is used as a fallback for all of the other
menus except for the pager and editor modes.  If a key is not defined in
another menu, Mutt will look for a binding to use in this menu.  This allows
you to bind a key to a certain function in multiple menus instead of having
multiple bind statements to accomplish the same task.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>alias</term>
<listitem>
<para>
The alias menu is the list of your personal aliases as defined in your
muttrc.  It is the mapping from a short alias name to the full email
address(es) of the recipient(s).
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>attach</term>
<listitem>
<para>
The attachment menu is used to access the attachments on received messages.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>browser</term>
<listitem>
<para>
The browser is used for both browsing the local directory structure, and for
listing all of your incoming mailboxes.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>editor</term>
<listitem>
<para>
The editor is the line-based editor the user enters text data.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>index</term>
<listitem>
<para>
The index is the list of messages contained in a mailbox.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>compose</term>
<listitem>
<para>
The compose menu is the screen used when sending a new message.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>pager</term>
<listitem>
<para>
The pager is the mode used to display message/attachment data, and help
listings.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>pgp</term>
<listitem>
<para>
The pgp menu is used to select the OpenPGP keys used to encrypt outgoing
messages.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>smime</term>
<listitem>
<para>
The smime menu is used to select the OpenSSL certificates used to encrypt outgoing
messages.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>postpone</term>
<listitem>
<para>
The postpone menu is similar to the index menu, except is used when
recalling a message the user was composing, but saved until later.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>query</term>
<listitem>
<para>
The query menu is the browser for results returned by
<link linkend="query-command">&dollar;query&lowbar;command</link>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>mix</term>
<listitem>
<para>
The mixmaster screen is used to select remailer options for outgoing
messages (if Mutt is compiled with Mixmaster support).
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
<emphasis>key</emphasis> is the key (or key sequence) you wish to bind.  To specify a
control character, use the sequence <emphasis>&bsol;Cx</emphasis>, where <emphasis>x</emphasis> is the
letter of the control character (for example, to specify control-A use
<quote>&bsol;Ca</quote>).  Note that the case of <emphasis>x</emphasis> as well as <emphasis>&bsol;C</emphasis> is
ignored, so that <emphasis>&bsol;CA</emphasis>, <emphasis>&bsol;Ca</emphasis>, <emphasis>&bsol;cA</emphasis> and <emphasis>&bsol;ca</emphasis> are all
equivalent.  An alternative form is to specify the key as a three digit
octal number prefixed with a <quote>&bsol;</quote> (for example <emphasis>&bsol;177</emphasis> is
equivalent to <emphasis>&bsol;c?</emphasis>). In addition, <emphasis>key</emphasis> may
be a symbolic name as shown in <xref linkend="tab-key-names"/>.
</para>

<table id="tab-key-names">
<title>Symbolic key names</title>
<tgroup cols="2">
<thead>
<row><entry>Symbolic name</entry><entry>Meaning</entry></row>
</thead>
<tbody>
<row><entry>&bsol;t</entry><entry>tab</entry></row>
<row><entry>&lt;tab&gt;</entry><entry>tab</entry></row>
<row><entry>&lt;backtab&gt;</entry><entry>backtab / shift-tab</entry></row>
<row><entry>&bsol;r</entry><entry>carriage return</entry></row>
<row><entry>&bsol;n</entry><entry>newline</entry></row>
<row><entry>&bsol;e</entry><entry>escape</entry></row>
<row><entry>&lt;esc&gt;</entry><entry>escape</entry></row>
<row><entry>&lt;up&gt;</entry><entry>up arrow</entry></row>
<row><entry>&lt;down&gt;</entry><entry>down arrow</entry></row>
<row><entry>&lt;left&gt;</entry><entry>left arrow</entry></row>
<row><entry>&lt;right&gt;</entry><entry>right arrow</entry></row>
<row><entry>&lt;pageup&gt;</entry><entry>Page Up</entry></row>
<row><entry>&lt;pagedown&gt;</entry><entry>Page Down</entry></row>
<row><entry>&lt;backspace&gt;</entry><entry>Backspace</entry></row>
<row><entry>&lt;delete&gt;</entry><entry>Delete</entry></row>
<row><entry>&lt;insert&gt;</entry><entry>Insert</entry></row>
<row><entry>&lt;enter&gt;</entry><entry>Enter</entry></row>
<row><entry>&lt;return&gt;</entry><entry>Return</entry></row>
<row><entry>&lt;home&gt;</entry><entry>Home</entry></row>
<row><entry>&lt;end&gt;</entry><entry>End</entry></row>
<row><entry>&lt;space&gt;</entry><entry>Space bar</entry></row>
<row><entry>&lt;f1&gt;</entry><entry>function key 1</entry></row>
<row><entry>&lt;f10&gt;</entry><entry>function key 10</entry></row>
</tbody>
</tgroup>
</table>

<para>
<emphasis>key</emphasis> does not need to be enclosed in quotes unless it contains a
space (<quote>&puncsp;</quote>) or semi-colon (<quote>;</quote>).
</para>

<para>
<emphasis>function</emphasis> specifies which action to take when <emphasis>key</emphasis> is pressed.
For a complete list of functions, see the <link linkend="functions">reference</link>.  The special function <literal>&lt;noop&gt;</literal> unbinds the specified key
sequence.
</para>

</sect1>

<sect1 id="charset-hook">
<title>Defining aliases for character sets </title>

<para>Usage:</para>

<cmdsynopsis>
<command>charset-hook</command>
<arg choice="plain">
<replaceable class="parameter">alias</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>iconv-hook</command>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">local-charset</replaceable>
</arg>
</cmdsynopsis>

<para>
The <literal>charset-hook</literal> command defines an alias for a character set.
This is useful to properly display messages which are tagged with a
character set name not known to mutt.
</para>

<para>
The <literal>iconv-hook</literal> command defines a system-specific name for a
character set.  This is helpful when your systems character
conversion library insists on using strange, system-specific names
for character sets.
</para>

</sect1>

<sect1 id="folder-hook">
<title>Setting variables based upon mailbox</title>

<para>Usage:</para>

<cmdsynopsis>
<command>folder-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
It is often desirable to change settings based on which mailbox you are
reading.  The folder-hook command provides a method by which you can execute
any configuration command.  <emphasis>regexp</emphasis> is a regular expression specifying
in which mailboxes to execute <emphasis>command</emphasis> before loading.  If a mailbox
matches multiple folder-hook's, they are executed in the order given in the
muttrc.
</para>

<note>
<para>
If you use the <quote>!</quote> shortcut for <link linkend="spoolfile">&dollar;spoolfile</link> at the beginning of the pattern, you must place it
inside of double or single quotes in order to distinguish it from the
logical <emphasis>not</emphasis> operator for the expression.
</para>
</note>

<note>
<para>
Settings are <emphasis>not</emphasis> restored when you leave the mailbox.
For example, a command action to perform is to change the sorting method
based upon the mailbox being read:
</para>
</note>

<screen>
folder-hook mutt set sort=threads
</screen>

<para>
However, the sorting method is not restored to its previous value when
reading a different mailbox.  To specify a <emphasis>default</emphasis> command, use the
pattern <quote>.</quote> before other folder-hooks adjusting a value on a per-folder basis
because folder-hooks are evaluated in the order given in the configuration file.
The following example will set the <link linkend="sort">sort</link> variable
to <literal>date-sent</literal> for all folders but to <literal>threads</literal>
for all folders containing <quote>mutt</quote> in their name.
</para>

<example id="ex-folder-sorting">
<title>Setting sort method based on mailbox name</title>
<screen>
folder-hook . set sort=date-sent
folder-hook mutt set sort=threads
</screen>
</example>

</sect1>

<sect1 id="macro">
<title>Keyboard macros</title>

<para>Usage:</para>

<cmdsynopsis>
<command>macro</command>
<arg choice="plain">
<replaceable class="parameter">menu</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">sequence</replaceable>
</arg>
<arg choice="opt">
<replaceable class="parameter">description</replaceable>
</arg>
</cmdsynopsis>

<para>
Macros are useful when you would like a single key to perform a series of
actions.  When you press <emphasis>key</emphasis> in menu <emphasis>menu</emphasis>, Mutt will behave as if
you had typed <emphasis>sequence</emphasis>.  So if you have a common sequence of commands
you type, you can create a macro to execute those commands with a single
key or fewer keys.
</para>

<para>
<emphasis>menu</emphasis> is the <link linkend="maps">map</link> which the macro will be bound in.
Multiple maps may be specified by separating multiple menu arguments by
commas. Whitespace may not be used in between the menu arguments and the
commas separating them.
</para>

<para>
<emphasis>key</emphasis> and <emphasis>sequence</emphasis> are expanded by the same rules as the
<link linkend="bind">key bindings</link> with some additions.  The
first is that control characters in <emphasis>sequence</emphasis> can also be specified
as <emphasis>&circ;x</emphasis>.  In order to get a caret (<quote>&circ;</quote>) you need to use
<emphasis>&circ;&circ;</emphasis>.  Secondly, to specify a certain key such as <emphasis>up</emphasis>
or to invoke a function directly, you can use the format
<emphasis>&lt;key name&gt;</emphasis> and <emphasis>&lt;function name&gt;</emphasis>.  For a listing of key
names see the section on <link linkend="bind">key bindings</link>.  Functions
are listed in the <link linkend="functions">reference</link>.
</para>

<para>
The advantage with using function names directly is that the macros will
work regardless of the current key bindings, so they are not dependent on
the user having particular key definitions.  This makes them more robust
and portable, and also facilitates defining of macros in files used by more
than one user (e.g., the system Muttrc).
</para>

<para>
Optionally you can specify a descriptive text after <emphasis>sequence</emphasis>,
which is shown in the help screens.
</para>

<note>
<para>
Macro definitions (if any) listed in the help screen(s), are
silently truncated at the screen width, and are not wrapped.
</para>
</note>

</sect1>

<sect1 id="color">
<title>Using color and mono video attributes</title>

<para>Usage:</para>

<cmdsynopsis>
<command>color</command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>color</command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>color</command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>uncolor</command>
<arg choice="plain">
<option>index</option>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
If your terminal supports color, you can spice up Mutt by creating your own
color scheme.  To define the color of an object (type of information), you
must specify both a foreground color <emphasis role="bold">and</emphasis> a background color (it is not
possible to only specify one or the other).
</para>

<para>
<emphasis>header</emphasis> and <emphasis>body</emphasis> match <emphasis>regexp</emphasis>
in the header/body of a message, <emphasis>index</emphasis> matches <emphasis>pattern</emphasis>
(see <xref linkend="patterns"/>) in the message index.
</para>

<para>
<emphasis>object</emphasis> can be one of:
</para>

<itemizedlist>
<listitem><para>attachment</para></listitem>
<listitem><para>bold (hiliting bold patterns in the body of messages)</para></listitem>
<listitem><para>error (error messages printed by Mutt)</para></listitem>
<listitem><para>hdrdefault (default color of the message header in the pager)</para></listitem>
<listitem><para>indicator (arrow or bar used to indicate the current item in a menu)</para></listitem>
<listitem><para>markers (the <quote>+</quote> markers at the beginning of wrapped lines in the pager)</para></listitem>
<listitem><para>message (informational messages)</para></listitem>
<listitem><para>normal</para></listitem>
<listitem><para>quoted (text matching <link linkend="quote-regexp">&dollar;quote&lowbar;regexp</link> in the body of a message)</para></listitem>
<listitem><para>quoted1, quoted2, ..., quoted<emphasis role="bold">N</emphasis> (higher levels of quoting)</para></listitem>
<listitem><para>search (hiliting of words in the pager)</para></listitem>
<listitem><para>signature</para></listitem><listitem><para>status (mode lines used to display info about the mailbox or message)</para></listitem>
<listitem><para>tilde (the <quote>&tilde;</quote> used to pad blank lines in the pager)</para></listitem>
<listitem><para>tree (thread tree drawn in the message index and attachment menu)</para></listitem>
<listitem><para>underline (hiliting underlined patterns in the body of messages)</para></listitem>
</itemizedlist>

<para>
<emphasis>foreground</emphasis> and <emphasis>background</emphasis> can be one of the following:
</para>

<itemizedlist>
<listitem><para>white</para></listitem>
<listitem><para>black</para></listitem>
<listitem><para>green</para></listitem>
<listitem><para>magenta</para></listitem>
<listitem><para>blue</para></listitem>
<listitem><para>cyan</para></listitem>
<listitem><para>yellow</para></listitem>
<listitem><para>red</para></listitem>
<listitem><para>default</para></listitem>
<listitem><para>color<emphasis>x</emphasis></para>
</listitem>
</itemizedlist>

<para>
<emphasis>foreground</emphasis> can optionally be prefixed with the keyword <literal>bright</literal> to make
the foreground color boldfaced (e.g., <literal>brightred</literal>).
</para>

<para>
If your terminal supports it, the special keyword <emphasis>default</emphasis> can be
used as a transparent color.  The value <emphasis>brightdefault</emphasis> is also valid.
If Mutt is linked against the <emphasis>S-Lang</emphasis> library, you also need to set
the <emphasis>COLORFGBG</emphasis> environment variable to the default colors of your
terminal for this to work; for example (for Bourne-like shells):
</para>

<screen>
set COLORFGBG="green;black"
export COLORFGBG
</screen>

<note>
<para>
The <emphasis>S-Lang</emphasis> library requires you to use the <emphasis>lightgray</emphasis>
and <emphasis>brown</emphasis> keywords instead of <emphasis>white</emphasis> and <emphasis>yellow</emphasis> when
setting this variable.
</para>
</note>

<note>
<para>
The uncolor command can be applied to the index object only.  It
removes entries from the list. You <emphasis role="bold">must</emphasis> specify the same pattern
specified in the color command for it to be removed.  The pattern <quote>*</quote> is
a special token which means to clear the color index list of all entries.
</para>
</note>

<para>
Mutt also recognizes the keywords <emphasis>color0</emphasis>, <emphasis>color1</emphasis>, &hellip;,
<emphasis>color</emphasis><emphasis role="bold">N-1</emphasis> (<emphasis role="bold">N</emphasis> being the number of colors supported
by your terminal).  This is useful when you remap the colors for your
display (for example by changing the color associated with <emphasis>color2</emphasis>
for your xterm), since color names may then lose their normal meaning.
</para>

<para>
If your terminal does not support color, it is still possible change the video
attributes through the use of the <quote>mono</quote> command:
</para>

<anchor id="mono"/>
<para>Usage:</para>

<cmdsynopsis>
<command>mono</command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>mono</command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>mono</command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unmono</command>
<arg choice="plain">
<option>index</option>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
For <emphasis>object</emphasis>, see the color command. <emphasis>attribute</emphasis>
can be one of the following:
</para>

<itemizedlist>
<listitem><para>none</para></listitem>
<listitem><para>bold</para></listitem>
<listitem><para>underline</para></listitem>
<listitem><para>reverse</para></listitem>
<listitem><para>standout</para></listitem>
</itemizedlist>

</sect1>

<sect1 id="ignore">
<title>Message header display</title>

<para>Usage:</para>

<cmdsynopsis>
<command>ignore</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unignore</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Messages often have many header fields added by automatic processing systems,
or which may not seem useful to display on the screen.  This command allows
you to specify header fields which you don't normally want to see in the pager.
</para>

<para>
You do not need to specify the full header field name.  For example,
<quote>ignore content-</quote> will ignore all header fields that begin with the pattern
<quote>content-</quote>. <quote>ignore *</quote> will ignore all headers.
</para>

<para>
To remove a previously added token from the list, use the <quote>unignore</quote> command.
The <quote>unignore</quote> command will make Mutt display headers with the given pattern.
For example, if you do <quote>ignore x-</quote> it is possible to <quote>unignore x-mailer</quote>.
</para>

<para>
<quote>unignore *</quote> will remove all tokens from the ignore list.
</para>

<para>
For example:
</para>

<example id="ex-header-weeding">
<title>Header weeding</title>
<screen>
# Sven's draconian header weeding
ignore *
unignore from date subject to cc
unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
unignore posted-to:
</screen>
</example>

<anchor id="hdr-order"/>
<para>Usage:</para>

<cmdsynopsis>
<command>hdr&lowbar;order</command>
<arg choice="plain">
<replaceable class="parameter">header</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">header</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unhdr&lowbar;order</command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>header</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
With the <literal>hdr&lowbar;order</literal> command you can specify an order in
which mutt will attempt to present these headers to you when viewing messages.
</para>

<para>
<quote>unhdr&lowbar;order *</quote> will clear all previous headers from the order list,
thus removing the header order effects set by the system-wide startup file.
</para>

<example id="ex-hdr-order">
<title>Configuring header display order</title>
<screen>
hdr&lowbar;order From Date: From: To: Cc: Subject:
</screen>
</example>

</sect1>

<sect1 id="alternates">
<title>Alternative addresses</title>

<para>Usage:</para>

<cmdsynopsis>
<command>alternates</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<arg choice="plain">
<replaceable>regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unalternates</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
With various functions, mutt will treat messages differently,
depending on whether you sent them or whether you received them from
someone else.  For instance, when replying to a message that you
sent to a different party, mutt will automatically suggest to send
the response to the original message's recipients -- responding to
yourself won't make much sense in many cases.  (See <link linkend="reply-to">&dollar;reply&lowbar;to</link>.)
</para>

<para>
Many users receive e-mail under a number of different addresses. To
fully use mutt's features here, the program must be able to
recognize what e-mail addresses you receive mail under. That's the
purpose of the <literal>alternates</literal> command: It takes a list of regular
expressions, each of which can identify an address under which you
receive e-mail.
</para>

<para>
As addresses are matched using regular expressions and not exact strict
comparisons, you should make sure you specify your addresses as precise
as possible to avoid mismatches. For example, if you specify:
</para>

<screen>
alternates user@example
</screen>

<para>
mutt will consider <quote><literal>some-user@example</literal></quote> as
being your address, too which may not be desired. As a solution, in such
cases addresses should be specified as:
</para>

<screen>
alternates '^user@example$'
</screen>

<para>
The <literal>-group</literal> flag causes all of the subsequent regular expressions
to be added to the named group.
</para>

<para>
The <literal>unalternates</literal> command can be used to write exceptions to
<literal>alternates</literal> patterns. If an address matches something in an
<literal>alternates</literal> command, but you nonetheless do not think it is
from you, you can list a more precise pattern under an <literal>unalternates</literal>
command.
</para>

<para>
To remove a regular expression from the <literal>alternates</literal> list, use the
<literal>unalternates</literal> command with exactly the same <emphasis>regexp</emphasis>.
Likewise, if the <emphasis>regexp</emphasis> for an <literal>alternates</literal> command matches
an entry on the <literal>unalternates</literal> list, that <literal>unalternates</literal>
entry will be removed. If the <emphasis>regexp</emphasis> for <literal>unalternates</literal>
is <quote>*</quote>, <emphasis>all entries</emphasis> on <literal>alternates</literal> will be removed.
</para>

</sect1>

<sect1 id="lists">
<title>Mailing lists</title>

<anchor id="subscribe"/>
<para>Usage:</para>

<cmdsynopsis>
<command>lists</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unlists</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<cmdsynopsis>
<command>subscribe</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unsubscribe</command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt has a few nice features for <link linkend="using-lists">handling mailing lists</link>.  In order to take advantage of them, you must
specify which addresses belong to mailing lists, and which mailing
lists you are subscribed to.  Once you have done this, the <link linkend="list-reply"><literal>&lt;list-reply&gt;</literal></link> function will work for all known lists.
Additionally, when you send a message to a subscribed list, mutt will
add a Mail-Followup-To header to tell other users' mail user agents
not to send copies of replies to your personal address.
</para>

<note>
<para>
The Mail-Followup-To header is a non-standard extension which is not
supported by all mail user agents.  Adding it is not bullet-proof against
receiving personal CCs of list messages.  Also note that the generation
of the Mail-Followup-To header is controlled by the
<link linkend="followup-to">&dollar;followup&lowbar;to</link>
configuration variable.
</para>
</note>

<para>
More precisely, Mutt maintains lists of patterns for the addresses
of known and subscribed mailing lists.  Every subscribed mailing
list is known. To mark a mailing list as known, use the <quote>lists</quote>
command.  To mark it as subscribed, use <quote>subscribe</quote>.
</para>

<para>
You can use regular expressions with both commands.  To mark all
messages sent to a specific bug report's address on mutt's bug
tracking system as list mail, for instance, you could say
<quote>subscribe &lsqb;0-9&rsqb;*@bugs.guug.de</quote>.  Often, it's sufficient to just
give a portion of the list's e-mail address.
</para>

<para>
Specify as much of the address as you need to to remove ambiguity.  For
example, if you've subscribed to the Mutt mailing list, you will receive mail
addressed to <emphasis>mutt-users@mutt.org</emphasis>.  So, to tell Mutt
that this is a mailing list, you could add <quote>lists mutt-users@</quote> to your
initialization file.  To tell mutt that you are subscribed to it,
add <quote>subscribe mutt-users</quote> to your initialization file instead.
If you also happen to get mail from someone whose address is
<emphasis>mutt-users@example.com</emphasis>, you could use
<quote>lists ^mutt-users@mutt&bsol;&bsol;.org$</quote>
or <quote>subscribe ^mutt-users@mutt&bsol;&bsol;.org$</quote> to
match only mail from the actual list.
</para>

<para>
The <literal>-group</literal> flag adds all of the subsequent regular expressions
to the named group.
</para>

<para>
The <quote>unlists</quote> command is used to remove a token from the list of
known and subscribed mailing-lists. Use <quote>unlists *</quote> to remove all
tokens.
</para>

<para>
To remove a mailing list from the list of subscribed mailing lists,
but keep it on the list of known mailing lists, use <quote>unsubscribe</quote>.
</para>

</sect1>

<sect1 id="mbox-hook">
<title>Using Multiple spool mailboxes</title>

<para>Usage:</para>

<cmdsynopsis>
<command>mbox-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to move read messages from a specified mailbox to a
different mailbox automatically when you quit or change folders.
<emphasis>pattern</emphasis> is a regular expression specifying the mailbox to treat as a
<quote>spool</quote> mailbox and <emphasis>mailbox</emphasis> specifies where mail should be saved when
read.
</para>

<para>
Unlike some of the other <emphasis>hook</emphasis> commands, only the <emphasis>first</emphasis> matching
pattern is used (it is not possible to save read mail in more than a single
mailbox).
</para>

</sect1>

<sect1 id="mailboxes">
<title>Monitoring incoming mail</title>

<para>Usage:</para>

<cmdsynopsis>
<command>mailboxes</command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unmailboxes</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
This command specifies folders which can receive mail and
which will be checked for new messages periodically.
</para>

<para>
<emphasis>folder</emphasis> can either be a local file or directory
(Mbox/Mmdf or Maildir/Mh). If Mutt was built with POP and/or IMAP
support, <emphasis>folder</emphasis> can also be a POP/IMAP folder
URL. The URL syntax is described in <xref linkend="url-syntax"/>,
POP and IMAP are described in <xref linkend="pop"/> and <xref linkend="imap"/>
respectively.
</para>

<para>
Mutt provides a number of advanced features for handling (possibly many)
folders and new mail within them, please refer to
<xref linkend="handling-folders"/> for details (including in what
situations and how often Mutt checks for new mail).
</para>

<para>
The <quote>unmailboxes</quote> command is used to remove a token from the list
of folders which receive mail. Use <quote>unmailboxes *</quote> to remove all
tokens.
</para>

<note>
<para>
The folders in the <literal>mailboxes</literal> command are resolved when
the command is executed, so if these names contain <link linkend="shortcuts">shortcut characters</link> (such as <quote>=</quote> and <quote>!</quote>), any variable
definition that affects these characters (like <link linkend="folder">&dollar;folder</link> and <link linkend="spoolfile">&dollar;spoolfile</link>)
should be set before the <literal>mailboxes</literal> command. If
none of these shorcuts are used, a local path should be absolute as
otherwise mutt tries to find it relative to the directory
from where mutt was started which may not always be desired.
</para>
</note>

<para>
For Mbox and Mmdf folders, new mail is detected by comparing access and/or
modification times of files: Mutt assumes a folder has new mail if it wasn't
accessed after it was last modified. Utilities like <literal>biff</literal> or
<literal>frm</literal> or any other program which accesses the mailbox might cause
Mutt to never detect new mail for that mailbox if they do not properly reset the
access time. Other possible causes of Mutt not detecting new mail in these folders
are backup tools (updating access times) or filesystems mounted without
access time update support.
</para>

<para>
In cases where new mail detection for Mbox or Mmdf folders appears to be
unreliable, the
<link linkend="check-mbox-size">&dollar;check&lowbar;mbox&lowbar;size</link>
option can be used to make Mutt track and consult file sizes for new
mail detection instead.
</para>

</sect1>

<sect1 id="my-hdr">
<title>User defined headers</title>

<para>Usage:</para>

<cmdsynopsis>
<command>my&lowbar;hdr</command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unmy&lowbar;hdr</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">field</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
The <literal>my&lowbar;hdr</literal> command allows you to create your own header
fields which will be added to every message you send.
</para>

<para>
For example, if you would like to add an <quote>Organization:</quote> header field to
all of your outgoing messages, you can put the command
</para>

<example id="ex-my-hdr">
<title>Defining custom headers</title>
<screen>
my&lowbar;hdr Organization: A Really Big Company, Anytown, USA
</screen>
</example>

<para>
in your <literal>.muttrc</literal>.
</para>

<note>
<para>
Space characters are <emphasis>not</emphasis> allowed between the keyword and
the colon (<quote>:</quote>). The standard for electronic mail (RFC2822) says that
space is illegal there, so Mutt enforces the rule.
</para>
</note>

<para>
If you would like to add a header field to a single message, you should
either set the <link linkend="edit-headers">&dollar;edit&lowbar;headers</link> variable,
or use the <literal>&lt;edit-headers&gt;</literal> function (default: <quote>E</quote>) in the compose menu so
that you can edit the header of your message along with the body.
</para>

<para>
To remove user defined header fields, use the <literal>unmy&lowbar;hdr</literal>
command. You may specify an asterisk (<quote>*</quote>) to remove all header
fields, or the fields to remove. For example, to remove all <quote>To</quote> and
<quote>Cc</quote> header fields, you could use:
</para>

<screen>
unmy&lowbar;hdr to cc
</screen>

</sect1>

<sect1 id="save-hook">
<title>Specify default save mailbox</title>

<para>Usage:</para>

<cmdsynopsis>
<command>save-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to override the default mailbox used when saving
messages. <emphasis>mailbox</emphasis> will be used as the default if the message
matches <emphasis>pattern</emphasis>, see <xref linkend="pattern-hook"/> for information
on the exact format.
</para>

<para>
To provide more flexibility and good defaults, Mutt applies the
expandos of <link linkend="index-format">&dollar;index&lowbar;format</link> to
<emphasis>mailbox</emphasis> after it was expanded.
</para>

<para>
Examples:
</para>

<example id="ex-save-hook-exando">
<title>Using %-expandos in <literal>save-hook</literal></title>
<screen>
# default: save all to ~/Mail/&lt;author name&gt;
save-hook . ~/Mail/%F

# save from me@turing.cs.hmc.edu and me@cs.hmc.edu to $folder/elkins
save-hook me@(turing\\.)?cs\\.hmc\\.edu$ +elkins

# save from aol.com to $folder/spam
save-hook aol\\.com$ +spam
</screen>
</example>

<para>
Also see the <link linkend="fcc-save-hook">fcc-save-hook</link> command.
</para>

</sect1>

<sect1 id="fcc-hook">
<title>Specify default Fcc: mailbox when composing</title>

<para>Usage:</para>

<cmdsynopsis>
<command>fcc-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to save outgoing mail in a mailbox other than
<link linkend="record">&dollar;record</link>.  Mutt searches the initial list of
message recipients for the first matching <emphasis>regexp</emphasis> and uses <emphasis>mailbox</emphasis>
as the default Fcc: mailbox.  If no match is found the message will be saved
to <link linkend="record">&dollar;record</link> mailbox.
</para>

<para>
To provide more flexibility and good defaults, Mutt applies the
expandos of <link linkend="index-format">&dollar;index&lowbar;format</link> to
<emphasis>mailbox</emphasis> after it was expanded.
</para>

<para>
See <xref linkend="pattern-hook"/> for information on the exact format of <emphasis>pattern</emphasis>.
</para>

<para>
Example: <literal>fcc-hook &lsqb;@.&rsqb;aol&bsol;&bsol;.com&dollar; +spammers</literal>
</para>

<para>
The above will save a copy of all messages going to the aol.com domain to
the `+spammers' mailbox by default.  Also see the <link linkend="fcc-save-hook">fcc-save-hook</link> command.
</para>

</sect1>

<sect1 id="fcc-save-hook">
<title>Specify default save filename and default Fcc: mailbox at once</title>

<para>Usage:</para>

<cmdsynopsis>
<command>fcc-save-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is a shortcut, equivalent to doing both a <link linkend="fcc-hook">fcc-hook</link>
and a <link linkend="save-hook">save-hook</link> with its arguments,
including &percnt;-expansion on <emphasis>mailbox</emphasis> according
to <link linkend="index-format">&dollar;index&lowbar;format</link>.
</para>

</sect1>

<sect1 id="send-hook">
<title>Change settings based upon message recipients</title>

<anchor id="reply-hook"/>
<anchor id="send2-hook"/>

<para>Usage:</para>

<cmdsynopsis>
<command>reply-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>send-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>send2-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
These commands can be used to execute arbitrary configuration commands based
upon recipients of the message.  <emphasis>pattern</emphasis> is used to match
the message, see <xref linkend="pattern-hook"/> for details. <emphasis>command</emphasis>
is executed when <emphasis>pattern</emphasis> matches.
</para>

<para>
<literal>reply-hook</literal> is matched against the message you are <emphasis>replying to</emphasis>,
instead of the message you are <emphasis>sending</emphasis>.  <literal>send-hook</literal> is
matched against all messages, both <emphasis>new</emphasis>
and <emphasis>replies</emphasis>.
</para>

<note>
<para>
<literal>reply-hook</literal>s are matched <emphasis role="bold">before</emphasis> the <literal>send-hook</literal>, <emphasis role="bold">regardless</emphasis>
of the order specified in the user's configuration file.
</para>
</note>

<para>
<literal>send2-hook</literal> is matched every time a message is changed, either
by editing it, or by using the compose menu to change its recipients
or subject.  <literal>send2-hook</literal> is executed after <literal>send-hook</literal>, and
can, e.g., be used to set parameters such as the <link linkend="sendmail">&dollar;sendmail</link> variable depending on the message's sender
address.
</para>

<para>
For each type of <literal>send-hook</literal> or <literal>reply-hook</literal>, when multiple matches
occur, commands are executed in the order they are specified in the muttrc
(for that type of hook).
</para>

<para>
Example: <literal>send-hook mutt &quot;set mime&lowbar;forward signature=''&quot;</literal>
</para>

<para>
Another typical use for this command is to change the values of the
<link linkend="attribution">&dollar;attribution</link>, <link linkend="signature">&dollar;signature</link> and <link linkend="locale">&dollar;locale</link>
variables in order to change the language of the attributions and
signatures based upon the recipients.
</para>

<note>
<para>
send-hook's are only executed once after getting the initial
list of recipients.  Adding a recipient after replying or editing the
message will not cause any send-hook to be executed.  Also note that
<literal>my&lowbar;hdr</literal> commands which modify recipient headers, or the message's
subject, don't have any effect on the current message when executed
from a send-hook.
</para>
</note>

</sect1>

<sect1 id="message-hook">
<title>Change settings before formatting a message</title>

<para>Usage:</para>

<cmdsynopsis>
<command>message-hook</command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>

<para>
This command can be used to execute arbitrary configuration commands
before viewing or formatting a message based upon information about the message.
<emphasis>command</emphasis> is executed if the <emphasis>pattern</emphasis> matches the message to be
displayed. When multiple matches occur, commands are executed in the order
they are specified in the muttrc.
</para>

<para>
See <xref linkend="pattern-hook"/> for
information on the exact format of <emphasis>pattern</emphasis>.
</para>

<para>
Example:
</para>

<screen>
message-hook ~A 'set pager=builtin'
message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'
</screen>

</sect1>

<sect1 id="crypt-hook">
<title>Choosing the cryptographic key of the recipient</title>

<para>Usage:</para>

<cmdsynopsis>
<command>crypt-hook</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">keyid</replaceable>
</arg>
</cmdsynopsis>

<para>
When encrypting messages with PGP/GnuPG or OpenSSL, you may want to associate a certain
key with a given e-mail address automatically, either because the
recipient's public key can't be deduced from the destination address,
or because, for some reasons, you need to override the key Mutt would
normally use.  The <literal>crypt-hook</literal> command provides a
method by which you can specify the ID of the public key to be used
when encrypting messages to a certain recipient.
</para>

<para>
The meaning of <emphasis>keyid</emphasis> is to be taken broadly in this context:  You
can either put a numerical key ID here, an e-mail address, or even
just a real name.
</para>

</sect1>

<sect1 id="push">
<title>Adding key sequences to the keyboard buffer</title>

<para>Usage:</para>

<cmdsynopsis>
<command>push</command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>

<para>
This command adds the named string to the keyboard buffer. The string may
contain control characters, key names and function names like the sequence
string in the <link linkend="macro">macro</link> command. You may use it to
automatically run a sequence of commands at startup, or when entering
certain folders. For example, the following command will automatically
collapse all threads when entering a folder:
</para>

<example id="ex-folder-hook-push">
<title>Embedding <literal>push</literal> in <literal>folder-hook</literal></title>
<screen>
folder-hook . 'push &lt;collapse-all&gt;'
</screen>
</example>

</sect1>

<sect1 id="exec">
<title>Executing functions</title>

<para>Usage:</para>

<cmdsynopsis>
<command>exec</command>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>

<para>
This command can be used to execute any function. Functions are
listed in the <link linkend="functions">function reference</link>.
<quote>exec function</quote> is equivalent to <quote>push &lt;function&gt;</quote>.
</para>

</sect1>

<sect1 id="score-command">
<title>Message Scoring</title>

<para>Usage:</para>

<cmdsynopsis>
<command>score</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">value</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unscore</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
The <literal>score</literal> commands adds <emphasis>value</emphasis> to a message's score if <emphasis>pattern</emphasis>
matches it.  <emphasis>pattern</emphasis> is a string in the format described in the <link linkend="patterns">patterns</link> section (note: For efficiency reasons, patterns
which scan information not available in the index, such as <literal>&tilde;b</literal>,
<literal>&tilde;B</literal> or <literal>&tilde;h</literal>, may not be used).  <emphasis>value</emphasis> is a
positive or negative integer.  A message's final score is the sum total of all
matching <literal>score</literal> entries.  However, you may optionally prefix <emphasis>value</emphasis> with
an equal sign (=) to cause evaluation to stop at a particular entry if there is
a match.  Negative final scores are rounded up to 0.
</para>

<para>
The <literal>unscore</literal> command removes score entries from the list.  You <emphasis role="bold">must</emphasis>
specify the same pattern specified in the <literal>score</literal> command for it to be
removed.  The pattern <quote>*</quote> is a special token which means to clear the list
of all score entries.
</para>

</sect1>

<sect1 id="spam">
<title>Spam detection</title>

<para>Usage:</para>

<cmdsynopsis>
<command>spam</command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>nospam</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
Mutt has generalized support for external spam-scoring filters.
By defining your spam patterns with the <literal>spam</literal> and <literal>nospam</literal>
commands, you can <emphasis>limit</emphasis>, <emphasis>search</emphasis>, and <emphasis>sort</emphasis> your
mail based on its spam attributes, as determined by the external
filter. You also can display the spam attributes in your index
display using the <literal>&percnt;H</literal> selector in the <link linkend="index-format">&dollar;index&lowbar;format</link> variable. (Tip: try <literal>&percnt;?H?[&percnt;H] ?</literal>
to display spam tags only when they are defined for a given message.)
</para>

<para>
Your first step is to define your external filter's spam patterns using
the <literal>spam</literal> command. <emphasis>pattern</emphasis> should be a regular expression
that matches a header in a mail message. If any message in the mailbox
matches this regular expression, it will receive a <quote>spam tag</quote> or
<quote>spam attribute</quote> (unless it also matches a <literal>nospam</literal> pattern -- see
below.) The appearance of this attribute is entirely up to you, and is
governed by the <emphasis>format</emphasis> parameter. <emphasis>format</emphasis> can be any static
text, but it also can include back-references from the <emphasis>pattern</emphasis>
expression. (A regular expression <quote>back-reference</quote> refers to a
sub-expression contained within parentheses.) <literal>&percnt;1</literal> is replaced with
the first back-reference in the regex, <literal>&percnt;2</literal> with the second, etc.
</para>

<para>
If you're using multiple spam filters, a message can have more than
one spam-related header. You can define <literal>spam</literal> patterns for each
filter you use. If a message matches two or more of these patterns, and
the &dollar;spam&lowbar;separator variable is set to a string, then the
message's spam tag will consist of all the <emphasis>format</emphasis> strings joined
together, with the value of &dollar;spam&lowbar;separator separating
them.
</para>

<para>
For example, suppose I use DCC, SpamAssassin, and PureMessage. I might
define these spam settings:
</para>

<example id="ex-spam">
<title>Configuring spam detection</title>
<screen>
spam "X-DCC-.*-Metrics:.*(....)=many"         "90+/DCC-%1"
spam "X-Spam-Status: Yes"                     "90+/SA"
spam "X-PerlMX-Spam: .*Probability=([0-9]+)%" "%1/PM"
set spam_separator=", "
</screen>
</example>

<para>
If I then received a message that DCC registered with <quote>many</quote> hits
under the <quote>Fuz2</quote> checksum, and that PureMessage registered with a
97&percnt; probability of being spam, that message's spam tag would read
<literal>90+/DCC-Fuz2, 97/PM</literal>. (The four characters before <quote>=many</quote> in a
DCC report indicate the checksum used -- in this case, <quote>Fuz2</quote>.)
</para>

<para>
If the &dollar;spam&lowbar;separator variable is unset, then each
spam pattern match supersedes the previous one. Instead of getting
joined <emphasis>format</emphasis> strings, you'll get only the last one to match.
</para>

<para>
The spam tag is what will be displayed in the index when you use
<literal>&percnt;H</literal> in the <literal>&dollar;index&lowbar;format</literal> variable. It's also the
string that the <literal>&tilde;H</literal> pattern-matching expression matches against for
<literal>&lt;search&gt;</literal> and <literal>&lt;limit&gt;</literal> functions. And it's what sorting by spam
attribute will use as a sort key.
</para>

<para>
That's a pretty complicated example, and most people's actual
environments will have only one spam filter. The simpler your
configuration, the more effective mutt can be, especially when it comes
to sorting.
</para>

<para>
Generally, when you sort by spam tag, mutt will sort <emphasis>lexically</emphasis> --
that is, by ordering strings alphanumerically. However, if a spam tag
begins with a number, mutt will sort numerically first, and lexically
only when two numbers are equal in value. (This is like UNIX's
<literal>sort -n</literal>.) A message with no spam attributes at all -- that is, one
that didn't match <emphasis>any</emphasis> of your <literal>spam</literal> patterns -- is sorted at
lowest priority. Numbers are sorted next, beginning with 0 and ranging
upward. Finally, non-numeric strings are sorted, with <quote>a</quote> taking lower
priority than <quote>z</quote>. Clearly, in general, sorting by spam tags is most
effective when you can coerce your filter to give you a raw number. But
in case you can't, mutt can still do something useful.
</para>

<para>
The <literal>nospam</literal> command can be used to write exceptions to <literal>spam</literal>
patterns. If a header pattern matches something in a <literal>spam</literal> command,
but you nonetheless do not want it to receive a spam tag, you can list a
more precise pattern under a <literal>nospam</literal> command.
</para>

<para>
If the <emphasis>pattern</emphasis> given to <literal>nospam</literal> is exactly the same as the
<emphasis>pattern</emphasis> on an existing <literal>spam</literal> list entry, the effect will be to
remove the entry from the spam list, instead of adding an exception.
Likewise, if the <emphasis>pattern</emphasis> for a <literal>spam</literal> command matches an entry
on the <literal>nospam</literal> list, that <literal>nospam</literal> entry will be removed. If the
<emphasis>pattern</emphasis> for <literal>nospam</literal> is <quote>*</quote>, <emphasis>all entries on both lists</emphasis>
will be removed. This might be the default action if you use <literal>spam</literal>
and <literal>nospam</literal> in conjunction with a <literal>folder-hook</literal>.
</para>

<para>
You can have as many <literal>spam</literal> or <literal>nospam</literal> commands as you like.
You can even do your own primitive spam detection within mutt -- for
example, if you consider all mail from <literal>MAILER-DAEMON</literal> to be spam,
you can use a <literal>spam</literal> command like this:
</para>

<screen>
spam "^From: .*MAILER-DAEMON"       "999"
</screen>

</sect1>

<sect1 id="set">
<title>Setting and Querying Variables</title>

<sect2 id="set-commands">
<title>Commands</title>

<para>
The following commands are available to manipulate and query variables:
</para>

<para>Usage:</para>

<cmdsynopsis>
<command>set</command>
<group choice="req">
<arg choice="plain">
<group choice="opt">
<arg choice="plain"><option>no</option></arg>
<arg choice="plain"><option>inv</option></arg>
</group>
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">variable=value</replaceable>
</arg>
</group>
<arg choice="opt" rep="repeat"/>
</cmdsynopsis>

<cmdsynopsis>
<command>toggle</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>unset</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<cmdsynopsis>
<command>reset</command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>

<para>
This command is used to set (and unset) <link linkend="variables">configuration variables</link>.  There are four basic types of variables:
boolean, number, string and quadoption.  <emphasis>boolean</emphasis> variables can be
<emphasis>set</emphasis> (true) or <emphasis>unset</emphasis> (false).  <emphasis>number</emphasis> variables can be
assigned a positive integer value.
<emphasis>string</emphasis> variables consist of any number of printable characters and
must be enclosed in quotes if they contain spaces or tabs.  You
may also use the escape sequences <quote>&bsol;n</quote> and <quote>&bsol;t</quote> for newline and tab, respectively.
<emphasis>quadoption</emphasis> variables are used to control whether or not to be prompted
for certain actions, or to specify a default action.  A value of <emphasis>yes</emphasis>
will cause the action to be carried out automatically as if you had answered
yes to the question.  Similarly, a value of <emphasis>no</emphasis> will cause the
action to be carried out as if you had answered <quote>no.</quote>  A value of
<emphasis>ask-yes</emphasis> will cause a prompt with a default answer of <quote>yes</quote> and
<emphasis>ask-no</emphasis> will provide a default answer of <quote>no.</quote>
</para>

<para>
Prefixing a variable with <quote>no</quote> will unset it.  Example: <literal>set noaskbcc</literal>.
</para>

<para>
For <emphasis>boolean</emphasis> variables, you may optionally prefix the variable name with
<literal>inv</literal> to toggle the value (on or off).  This is useful when writing
macros.  Example: <literal>set invsmart&lowbar;wrap</literal>.
</para>

<para>
The <literal>toggle</literal> command automatically prepends the <literal>inv</literal> prefix to all
specified variables.
</para>

<para>
The <literal>unset</literal> command automatically prepends the <literal>no</literal> prefix to all
specified variables.
</para>

<para>
Using the <literal>&lt;enter-command&gt;</literal> function in the <emphasis>index</emphasis> menu, you can query the
value of a variable by prefixing the name of the variable with a question
mark:
</para>

<screen>
set ?allow_8bit
</screen>

<para>
The question mark is actually only required for boolean and quadoption
variables.
</para>

<para>
The <literal>reset</literal> command resets all given variables to the compile time
defaults (hopefully mentioned in this manual). If you use the command
<literal>set</literal> and prefix the variable with <quote>&amp;</quote> this has the same
behavior as the reset command.
</para>

<para>
With the <literal>reset</literal> command there exists the special variable <quote>all</quote>,
which allows you to reset all variables to their system defaults.
</para>

</sect2>

<sect2 id="set-myvar">
<title>User-defined variables</title>

<sect3 id="set-myvar-intro">
<title>Introduction</title>

<para>
Along with the variables listed in the
<link linkend="variables">Configuration variables</link> section, mutt
supports user-defined variables with names starting
with <literal>my&lowbar;</literal> as in, for
example, <literal>my&lowbar;cfgdir</literal>.
</para>

<para>
The <literal>set</literal> command either creates a
custom <literal>my&lowbar;</literal> variable or changes its
value if it does exist already. The <literal>unset</literal> and <literal>reset</literal>
commands remove the variable entirely.
</para>

<para>
Since user-defined variables are expanded in the same way that
environment variables are (except for
the <link linkend="shell-escape">shell-escape</link> command and
backtick expansion), this feature can be used to make configuration
files more readable.
</para>

</sect3>

<sect3 id="set-myvar-examples">
<title>Examples</title>

<para>
The following example defines and uses the variable <literal>my&lowbar;cfgdir</literal>
to abbreviate the calls of the <link linkend="source">source</link> command:
</para>

<example id="ex-myvar1">
<title>Using user-defined variables for config file readability</title>
<screen>
set my_cfgdir = $HOME/mutt/config

source $my_cfgdir/hooks
source $my_cfgdir/macros
# more source commands...
</screen>
</example>

<para>
A custom variable can also be used in macros to backup the current value
of another variable. In the following example, the value of the
<link linkend="delete">&dollar;delete</link> is changed temporarily
while its original value is saved as <literal>my&lowbar;delete</literal>.
After the macro has executed all commands, the original value of <link
linkend="delete">&dollar;delete</link> is restored.
</para>

<example id="ex-myvar2">
<title>Using user-defined variables for backing up other config option values</title>
<screen>
macro pager ,x '&bsol;
&lt;enter-command&gt;set my_delete=$delete&lt;enter&gt;&bsol;
&lt;enter-command&gt;set delete=yes&lt;enter&gt;&bsol;
...&bsol;
&lt;enter-command&gt;set delete=$my_delete&lt;enter&gt;'
</screen>
</example>

<para>
Since mutt expands such values already when parsing the configuration
file(s), the value of <literal>&dollar;my&lowbar;delete</literal> in the
last example would be the value of <literal>&dollar;delete</literal> exactly
as it was at that point during parsing the configuration file. If
another statement would change the value for <literal>&dollar;delete</literal>
later in the same or another file, it would have no effect on
<literal>&dollar;my&lowbar;delete</literal>. However, the expansion can
be deferred to runtime, as shown in the next example, when escaping the
dollar sign.
</para>

<example id="ex-myvar3">
<title>Deferring user-defined variable expansion to runtime</title>
<screen>
macro pager &lt;PageDown&gt; "&bsol;
&lt;enter-command&gt; set my&lowbar;old&lowbar;pager&lowbar;stop=&bsol;&dollar;pager&lowbar;stop pager&lowbar;stop&lt;Enter&gt;&bsol;
&lt;next-page&gt;&bsol;
&lt;enter-command&gt; set pager&lowbar;stop=&bsol;&dollar;my&lowbar;old&lowbar;pager&lowbar;stop&lt;Enter&gt;&bsol;
&lt;enter-command&gt; unset my&lowbar;old&lowbar;pager&lowbar;stop&lt;Enter&gt;"
</screen>
</example>

<para>
Note that there is a space
between <literal>&lt;enter-command&gt;</literal> and
the <literal>set</literal> configuration command, preventing mutt from
recording the macro's commands into its history.
</para>

</sect3>

</sect2>

</sect1>

<sect1 id="source">
<title>Reading initialization commands from another file</title>

<para>Usage:</para>

<cmdsynopsis>
<command>source</command>
<arg choice="plain">
<replaceable class="parameter">filename</replaceable>
</arg>
</cmdsynopsis>

<para>
This command allows the inclusion of initialization commands
from other files.  For example, I place all of my aliases in
<literal>&tilde;/.mail&lowbar;aliases</literal> so that I can make my
<literal>&tilde;/.muttrc</literal> readable and keep my aliases private.
</para>

<para>
If the filename begins with a tilde (<quote>&tilde;</quote>), it will be expanded to the
path of your home directory.
</para>

<para>
If the filename ends with a vertical bar (&verbar;), then <emphasis>filename</emphasis> is
considered to be an executable program from which to read input (eg.
<literal>source &tilde;/bin/myscript&verbar;</literal>).
</para>

</sect1>

<sect1 id="ifdef">

<title>Configuring features conditionnaly</title>

<para>
Usage: <literal>ifdef</literal> <emphasis>item</emphasis> <emphasis>command</emphasis>
</para>

<para>
This command allows to test if a feature has been compiled in, before
actually executing the command. Item can be either the name of a
function, variable, or command. Example:
</para>

<para>
<screen>
ifdef imap_keepalive 'source ~/.mutt/imap_setup'
</screen>
</para>

</sect1>

<sect1 id="unhook">
<title>Removing hooks</title>

<para>Usage:</para>

<cmdsynopsis>
<command>unhook</command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">hook-type</replaceable>
</arg>
</group>
</cmdsynopsis>

<para>
This command permits you to flush hooks you have previously defined.
You can either remove all hooks by giving the <quote>*</quote> character as an
argument, or you can remove all hooks of a specific type by saying
something like <literal>unhook send-hook</literal>.
</para>

</sect1>

<sect1 id="formatstrings">
<title>Format Strings</title>

<sect2 id="formatstrings-basics">
<title>Basic usage</title>

<para>
Format strings are a general concept you'll find in several locations
through the mutt configuration, especially in the
<link linkend="index-format">&dollar;index&lowbar;format</link>,
<link linkend="pager-format">&dollar;pager&lowbar;format</link>,
<link linkend="status-format">&dollar;status&lowbar;format</link>,
and other <quote>*_format</quote> variables. These can be very straightforward,
and it's quite possible you already know how to use them.
</para>

<para>
The most basic format string element is a percent symbol followed
by another character. For example, <literal>%s</literal>
represents a message's Subject: header in the <link
linkend="index-format">&dollar;index&lowbar;format</link> variable. The
<quote>expandos</quote> available are documented with each format variable, but
there are general modifiers available with all formatting expandos,
too. Those are our concern here.
</para>

<para>
Some of the modifiers are borrowed right out of C (though you might
know them from Perl, Python, shell, or another language). These are
the [-]m.n modifiers, as in <literal>%-12.12s</literal>. As with
such programming languages, these modifiers allow you to specify the
minimum and maximum size of the resulting string, as well as its
justification. If the <quote>-</quote> sign follows the percent, the string will
be left-justified instead of right-justified. If there's a number
immediately following that, it's the minimum amount of space the
formatted string will occupy -- if it's naturally smaller than that, it
will be padded out with spaces.  If a decimal point and another number
follow, that's the maximum space allowable -- the string will not be
permitted to exceed that width, no matter its natural size. Each of
these three elements is optional, so that all these are legal format
strings:
<literal>%-12s</literal>
<literal>%4c</literal>
<literal>%.15F</literal>
<literal>%-12.15L</literal>
</para>

<para>
Mutt adds some other modifiers to format strings. If you use an equals
symbol (<literal>=</literal>) as a numeric prefix (like the minus
above), it will force the string to be centered within its minimum
space range. For example, <literal>%=14y</literal> will reserve 14
characters for the %y expansion -- that's the X-Label: header, in
<literal>&dollar;index&lowbar;format</literal>. If the expansion
results in a string less than 14 characters, it will be centered in a
14-character space.  If the X-Label for a message were "test", that
expansion would look like <quote>     test     </quote>.
</para>

<para>
There are two very little-known modifiers that affect the way that an
expando is replaced. If there is an underline (<quote>&lowbar;</quote>) character
between any format modifiers (as above) and the expando letter, it will
expands in all lower case. And if you use a colon (<quote>:</quote>), it will
replace all decimal points with underlines.
</para>

</sect2>

<sect2 id="formatstrings-filters">
<title>Filters</title>

<para>
Any format string ending in a vertical bar (<quote>&verbar;</quote>) will be
expanded and piped through the first word in the string, using spaces
as separator. The string returned will be used for display.
If the returned string ends in &percnt;, it will be passed through
the formatter a second time. This allows the filter to generate a
replacement format string including &percnt; expandos.
</para>

<para>
All &percnt; expandos in a format string are expanded before the script
is called so that:
</para>

<example id="ex-fmtpipe">
<title>Using external filters in format strings</title>
<screen>
set status_format="script.sh '%r %f (%L)'|"
</screen>
</example>

<para>
will make mutt expand <literal>&percnt;r</literal>,
<literal>&percnt;f</literal> and <literal>&percnt;L</literal>
before calling the script. The example also shows that arguments can be
quoted: the script will receive the expanded string between the single quotes
as the only argument.
</para>

<para>
A practical example is the <literal>mutt&lowbar;xtitle</literal>
script installed in the <literal>samples</literal>
subdirectory of the mutt documentation: it can be used as filter for
<literal>&dollar;status&lowbar;format</literal> to set the current
terminal's title, if supported.
</para>

</sect2>

</sect1>

</chapter>

<chapter id="advancedusage">
<title>Advanced Usage</title>

<sect1 id="regexp">
<title>Regular Expressions</title>

<para>
All string patterns in Mutt including those in more complex
<link linkend="patterns">patterns</link> must be specified
using regular expressions (regexp) in the <quote>POSIX extended</quote> syntax (which
is more or less the syntax used by egrep and GNU awk).  For your
convenience, we have included below a brief description of this syntax.
</para>

<para>
The search is case sensitive if the pattern contains at least one upper
case letter, and case insensitive otherwise.
</para>

<note>
<para>
Note that <quote>&bsol;</quote>
must be quoted if used for a regular expression in an initialization
command: <quote>&bsol;&bsol;</quote>.
</para>
</note>

<para>
A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic
expressions, by using various operators to combine smaller expressions.
</para>

<note>
<para>
Note that the regular expression can be enclosed/delimited by either &quot;
or ' which is useful if the regular expression includes a white-space
character.  See <xref linkend="muttrc-syntax"/>
for more information on &quot; and ' delimiter processing.  To match a
literal &quot; or ' you must preface it with \ (backslash).
</para>
</note>

<para>
The fundamental building blocks are the regular expressions that match
a single character.  Most characters, including all letters and digits,
are regular expressions that match themselves.  Any metacharacter with
special meaning may be quoted by preceding it with a backslash.
</para>

<para>
The period <quote>.</quote> matches any single character.  The caret <quote>&circ;</quote> and
the dollar sign <quote>&dollar;</quote> are metacharacters that respectively match
the empty string at the beginning and end of a line.
</para>

<para>
A list of characters enclosed by <quote>&lsqb;</quote> and <quote>&rsqb;</quote> matches any
single character in that list; if the first character of the list
is a caret <quote>&circ;</quote> then it matches any character <emphasis role="bold">not</emphasis> in the
list.  For example, the regular expression <emphasis role="bold">&lsqb;0123456789&rsqb;</emphasis>
matches any single digit.  A range of ASCII characters may be specified
by giving the first and last characters, separated by a hyphen
<quote>-</quote>.  Most metacharacters lose their special meaning inside
lists.  To include a literal <quote>&rsqb;</quote> place it first in the list.
Similarly, to include a literal <quote>&circ;</quote> place it anywhere but first.
Finally, to include a literal hyphen <quote>-</quote> place it last.
</para>

<para>
Certain named classes of characters are predefined.  Character classes
consist of <quote>&lsqb;:</quote>, a keyword denoting the class, and <quote>:&rsqb;</quote>.
The following classes are defined by the POSIX standard in
<xref linkend="posix-regex-char-classes"/>
</para>

<table id="posix-regex-char-classes">
<title>POSIX regular expression character classes</title>
<tgroup cols="2">
<thead>
<row><entry>Character class</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&lsqb;:alnum:&rsqb;</entry><entry>Alphanumeric characters</entry></row>
<row><entry>&lsqb;:alpha:&rsqb;</entry><entry>Alphabetic characters</entry></row>
<row><entry>&lsqb;:blank:&rsqb;</entry><entry>Space or tab characters</entry></row>
<row><entry>&lsqb;:cntrl:&rsqb;</entry><entry>Control characters</entry></row>
<row><entry>&lsqb;:digit:&rsqb;</entry><entry>Numeric characters</entry></row>
<row><entry>&lsqb;:graph:&rsqb;</entry><entry>Characters that are both printable and visible. (A space is printable, but not visible, while an <quote>a</quote> is both)</entry></row>
<row><entry>&lsqb;:lower:&rsqb;</entry><entry>Lower-case alphabetic characters</entry></row>
<row><entry>&lsqb;:print:&rsqb;</entry><entry>Printable characters (characters that are not control characters)</entry></row>
<row><entry>&lsqb;:punct:&rsqb;</entry><entry>Punctuation characters (characters that are not letter, digits, control characters, or space characters)</entry></row>
<row><entry>&lsqb;:space:&rsqb;</entry><entry>Space characters (such as space, tab and formfeed, to name a few)</entry></row>
<row><entry>&lsqb;:upper:&rsqb;</entry><entry>Upper-case alphabetic characters</entry></row>
<row><entry>&lsqb;:xdigit:&rsqb;</entry><entry>Characters that are hexadecimal digits</entry></row>
</tbody>
</tgroup>
</table>

<para>
A character class is only valid in a regular expression inside the
brackets of a character list.
</para>

<note>
<para>
Note that the brackets in these
class names are part of the symbolic names, and must be included
in addition to the brackets delimiting the bracket list. For
example, <emphasis role="bold">&lsqb;&lsqb;:digit:&rsqb;&rsqb;</emphasis> is equivalent to
<emphasis role="bold">&lsqb;0-9&rsqb;</emphasis>.
</para>
</note>

<para>
Two additional special sequences can appear in character lists.  These
apply to non-ASCII character sets, which can have single symbols (called
collating elements) that are represented with more than one character,
as well as several characters that are equivalent for collating or
sorting purposes:
</para>

<variablelist>

<varlistentry>
<term>Collating Symbols</term>
<listitem>
<para>
A collating symbol is a multi-character collating element enclosed in
<quote>&lsqb;.</quote> and <quote>.&rsqb;</quote>.  For example, if <quote>ch</quote> is a collating
element, then <emphasis role="bold">&lsqb;&lsqb;.ch.&rsqb;&rsqb;</emphasis> is a regexp that matches
this collating element, while <emphasis role="bold">&lsqb;ch&rsqb;</emphasis> is a regexp that
matches either <quote>c</quote> or <quote>h</quote>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Equivalence Classes</term>
<listitem>
<para>
An equivalence class is a locale-specific name for a list of
characters that are equivalent. The name is enclosed in <quote>&lsqb;=</quote>
and <quote>=&rsqb;</quote>.  For example, the name <quote>e</quote> might be used to
represent all of <quote>&egrave;</quote> <quote>&eacute;</quote> and <quote>e</quote>.  In this case,
<emphasis role="bold">&lsqb;&lsqb;=e=&rsqb;&rsqb;</emphasis> is a regexp that matches any of
<quote>&egrave;</quote>, <quote>&eacute;</quote> and <quote>e</quote>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
A regular expression matching a single character may be followed by one
of several repetition operators described in <xref linkend="regex-repeat"/>.
</para>

<table id="regex-repeat">
<title>Regular expression repetition operators</title>
<tgroup cols="2">
<thead>
<row><entry>Operator</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>?</entry><entry>The preceding item is optional and matched at most once</entry></row>
<row><entry>*</entry><entry>The preceding item will be matched zero or more times</entry></row>
<row><entry>+</entry><entry>The preceding item will be matched one or more times</entry></row>
<row><entry>&lcub;n&rcub;</entry><entry>The preceding item is matched exactly <emphasis>n</emphasis> times</entry></row>
<row><entry>&lcub;n,&rcub;</entry><entry>The preceding item is matched <emphasis>n</emphasis> or more times</entry></row>
<row><entry>&lcub;,m&rcub;</entry><entry>The preceding item is matched at most <emphasis>m</emphasis> times</entry></row>
<row><entry>&lcub;n,m&rcub;</entry><entry>The preceding item is matched at least <emphasis>n</emphasis> times, but no more than <emphasis>m</emphasis> times</entry></row>
</tbody>
</tgroup>
</table>

<para>
Two regular expressions may be concatenated; the resulting regular
expression matches any string formed by concatenating two substrings
that respectively match the concatenated subexpressions.
</para>

<para>
Two regular expressions may be joined by the infix operator <quote>&verbar;</quote>;
the resulting regular expression matches any string matching either
subexpression.
</para>

<para>
Repetition takes precedence over concatenation, which in turn takes
precedence over alternation.  A whole subexpression may be enclosed in
parentheses to override these precedence rules.
</para>

<note>
<para>
If you compile Mutt with the GNU <emphasis>rx</emphasis> package, the
following operators may also be used in regular expressions as described in <xref linkend="regex-gnu-ext"/>.
</para>
</note>

<table id="regex-gnu-ext">
<title>GNU regular expression extensions</title>
<tgroup cols="2">
<thead>
<row><entry>Expression</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>&bsol;&bsol;y</entry><entry>Matches the empty string at either the beginning or the end of a word</entry></row>
<row><entry>&bsol;&bsol;B</entry><entry>Matches the empty string within a word</entry></row>
<row><entry>&bsol;&bsol;&lt;</entry><entry>Matches the empty string at the beginning of a word</entry></row>
<row><entry>&bsol;&bsol;&gt;</entry><entry>Matches the empty string at the end of a word</entry></row>
<row><entry>&bsol;&bsol;w</entry><entry>Matches any word-constituent character (letter, digit, or underscore)</entry></row>
<row><entry>&bsol;&bsol;W</entry><entry>Matches any character that is not word-constituent</entry></row>
<row><entry>&bsol;&bsol;`</entry><entry>Matches the empty string at the beginning of a buffer (string)</entry></row>
<row><entry>&bsol;&bsol;'</entry><entry>Matches the empty string at the end of a buffer</entry></row>
</tbody>
</tgroup>
</table>

<para>
Please note however that these operators are not defined by POSIX, so
they may or may not be available in stock libraries on various systems.
</para>

</sect1>

<sect1 id="patterns">
<title>Patterns: Searching, Limiting and Tagging</title>

<para>
Many of Mutt's commands allow you to specify a pattern to match
(<literal>limit</literal>, <literal>tag-pattern</literal>,
<literal>delete-pattern</literal>, etc.). <xref linkend="tab-patterns"/>
shows several ways to select messages.
</para>

<table id="tab-patterns">
<title>Pattern modifiers</title>
<tgroup cols="2">
<thead>
<row><entry>Pattern modifier</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>~A</entry><entry>all messages</entry></row>
<row><entry>~b <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the message body</entry></row>
<row><entry>=b <emphasis>STRING</emphasis></entry><entry>messages which contain <emphasis>STRING</emphasis> in the message body. If IMAP is enabled, searches for <emphasis>STRING</emphasis> on the server, rather than downloading each message and searching it locally.</entry></row>
<row><entry>~B <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the whole message</entry></row>
<row><entry>~c <emphasis>EXPR</emphasis></entry><entry>messages carbon-copied to <emphasis>EXPR</emphasis></entry></row>
<row><entry>%c <emphasis>GROUP</emphasis></entry><entry>messages carbon-copied to any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~C <emphasis>EXPR</emphasis></entry><entry>messages either to: or cc: <emphasis>EXPR</emphasis></entry></row>
<row><entry>%C <emphasis>GROUP</emphasis></entry><entry>messages either to: or cc: to any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~d &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with <quote>date-sent</quote> in a Date range</entry></row>
<row><entry>~D</entry><entry>deleted messages</entry></row>
<row><entry>~e <emphasis>EXPR</emphasis></entry><entry>messages which contains <emphasis>EXPR</emphasis> in the <quote>Sender</quote> field</entry></row>
<row><entry>%e <emphasis>GROUP</emphasis></entry><entry>messages which contain a member of <emphasis>GROUP</emphasis> in the <quote>Sender</quote> field</entry></row>
<row><entry>~E</entry><entry>expired messages</entry></row>
<row><entry>~F</entry><entry>flagged messages</entry></row>
<row><entry>~f <emphasis>EXPR</emphasis></entry><entry>messages originating from <emphasis>EXPR</emphasis></entry></row>
<row><entry>%f <emphasis>GROUP</emphasis></entry><entry>messages originating from any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~g</entry><entry>cryptographically signed messages</entry></row>
<row><entry>~G</entry><entry>cryptographically encrypted messages</entry></row>
<row><entry>~h <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the message header</entry></row>
<row><entry>~H <emphasis>EXPR</emphasis></entry><entry>messages with a spam attribute matching <emphasis>EXPR</emphasis></entry></row>
<row><entry>~i <emphasis>EXPR</emphasis></entry><entry>messages which match <emphasis>EXPR</emphasis> in the <quote>Message-ID</quote> field</entry></row>
<row><entry>~k</entry><entry>messages which contain PGP key material</entry></row>
<row><entry>~L <emphasis>EXPR</emphasis></entry><entry>messages either originated or received by <emphasis>EXPR</emphasis></entry></row>
<row><entry>%L <emphasis>GROUP</emphasis></entry><entry>message either originated or received by any member of <emphasis>GROUP</emphasis></entry></row>
<row><entry>~l</entry><entry>messages addressed to a known mailing list</entry></row>
<row><entry>~m &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *)</entry></row>
<row><entry>~n &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with a score in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *)</entry></row>
<row><entry>~N</entry><entry>new messages</entry></row>
<row><entry>~O</entry><entry>old messages</entry></row>
<row><entry>~p</entry><entry>messages addressed to you (consults alternates)</entry></row>
<row><entry>~P</entry><entry>messages from you (consults alternates)</entry></row>
<row><entry>~Q</entry><entry>messages which have been replied to</entry></row>
<row><entry>~r &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with <quote>date-received</quote> in a Date range</entry></row>
<row><entry>~R</entry><entry>read messages</entry></row>
<row><entry>~s <emphasis>EXPR</emphasis></entry><entry>messages having <emphasis>EXPR</emphasis> in the <quote>Subject</quote> field.</entry></row>
<row><entry>~S</entry><entry>superseded messages</entry></row>
<row><entry>~t <emphasis>EXPR</emphasis></entry><entry>messages addressed to <emphasis>EXPR</emphasis></entry></row>
<row><entry>~T</entry><entry>tagged messages</entry></row>
<row><entry>~u</entry><entry>messages addressed to a subscribed mailing list</entry></row>
<row><entry>~U</entry><entry>unread messages</entry></row>
<row><entry>~v</entry><entry>messages part of a collapsed thread.</entry></row>
<row><entry>~V</entry><entry>cryptographically verified messages</entry></row>
<row><entry>~x <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the <quote>References</quote> field</entry></row>
<row><entry>~X &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> attachments *)</entry></row>
<row><entry>~y <emphasis>EXPR</emphasis></entry><entry>messages which contain <emphasis>EXPR</emphasis> in the <quote>X-Label</quote> field</entry></row>
<row><entry>~z &lsqb;<emphasis>MIN</emphasis>&rsqb;-&lsqb;<emphasis>MAX</emphasis>&rsqb;</entry><entry>messages with a size in the range <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> *)</entry></row>
<row><entry>~=</entry><entry>duplicated messages (see <link linkend="duplicate-threads">&dollar;duplicate&lowbar;threads</link>)</entry></row>
<row><entry>~$</entry><entry>unreferenced messages (requires threaded view)</entry></row>
<row><entry>~(<emphasis>PATTERN</emphasis>)</entry><entry>messages in threads
containing messages matching <emphasis>PATTERN</emphasis>, e.g. all
threads containing messages from you: ~(~P)</entry></row>
</tbody>
</tgroup>
</table>

<para>
Where <emphasis>EXPR</emphasis> is a
<link linkend="regexp">regular expression</link>.  Special attention has to be
made when using regular expressions inside of patterns.  Specifically,
Mutt's parser for these patterns will strip one level of backslash (<quote>\</quote>),
which is normally used for quoting.  If it is your intention to use a
backslash in the regular expression, you will need to use two backslashes
instead (<quote>\\</quote>). You can force mutt to treat <emphasis>EXPR</emphasis> as a simple string
instead of a regular expression by using = instead of &tilde; in the
pattern name. For example, <literal>=b *.*</literal> will find all messages that contain
the literal string <quote>*.*</quote>. Simple string matches are less powerful than
regular expressions but can be considerably faster. This is especially
true for IMAP folders, because string matches can be performed on the
server instead of by fetching every message. IMAP treats <literal>=h</literal> specially:
it must be of the form "header: substring" and will not partially
match header names. The substring part may be omitted if you simply
wish to find messages containing a particular header without regard to
its value.
</para>

<para>
*) The forms <quote>&lt;&lsqb;<emphasis>MAX</emphasis>&rsqb;</quote>, <quote>&gt;&lsqb;<emphasis>MIN</emphasis>&rsqb;</quote>,
<quote>&lsqb;<emphasis>MIN</emphasis>&rsqb;-</quote> and <quote>-&lsqb;<emphasis>MAX</emphasis>&rsqb;</quote>
are allowed, too.
</para>

<sect2 id="patterns-modifier">
<title>Pattern Modifier</title>

<note>
<para>
Note that patterns matching 'lists' of addresses (notably c, C, p, P and t)
match if there is at least one match in the whole list. If you want to
make sure that all elements of that list match, you need to prefix your
pattern with <quote>&circ;</quote>.
This example matches all mails which only has recipients from Germany.
</para>
</note>

<screen>
^~C \.de$
</screen>

</sect2>

<sect2 id="simple-patterns">
<title>Simple Patterns</title>

<para>
Mutt supports two versions of so called <quote>simple searches</quote> which are
issued if the query entered for searching, limiting and similar
operations does not seem to be a valid pattern (i.e. it does not contain
one of these characters: <quote>&tilde;</quote>, <quote>=</quote> or <quote>&percnt;</quote>). If the query is
supposed to contain one of these special characters, they must be escaped
by prepending a backslash (<quote>\</quote>).
</para>

<para>
The first type is by checking whether the query string equals
a keyword case-insensitively from <xref linkend="tab-simplesearch-keywords"/>:
If that is the case, Mutt will use the shown pattern modifier instead.
If a keyword would conflict with your search keyword, you need to turn
it into a regular expression to avoid matching the keyword table. For
example, if you want to find all messages matching <quote>flag</quote>
(using <link linkend="simple-search">&dollar;simple&lowbar;search</link>)
but don't want to match flagged messages, simply search for
<quote><literal>&lsqb;f&rsqb;lag</literal></quote>.
</para>

<table id="tab-simplesearch-keywords">
<title>Simple search keywords</title>
<tgroup cols="2">
<thead>
<row><entry>Keyword</entry><entry>Pattern modifier</entry></row>
</thead>
<tbody>
<row><entry>all</entry><entry>~A</entry></row>
<row><entry>.</entry><entry>~A</entry></row>
<row><entry>&circ;</entry><entry>~A</entry></row>
<row><entry>del</entry><entry>~D</entry></row>
<row><entry>flag</entry><entry>~F</entry></row>
<row><entry>new</entry><entry>~N</entry></row>
<row><entry>old</entry><entry>~O</entry></row>
<row><entry>repl</entry><entry>~Q</entry></row>
<row><entry>read</entry><entry>~R</entry></row>
<row><entry>tag</entry><entry>~T</entry></row>
<row><entry>unread</entry><entry>~U</entry></row>
</tbody>
</tgroup>
</table>

<para>
The second type of simple search is to build a complex search
pattern using <link linkend="simple-search">&dollar;simple&lowbar;search</link>
as a template. Mutt will insert your query properly quoted and search
for the composed complex query.
</para>

</sect2>

<sect2 id="complex-patterns">
<title>Complex Patterns</title>

<para>
Logical AND is performed by specifying more than one criterion.  For
example:
</para>

<screen>
~t mutt ~f elkins
</screen>

<para>
would select messages which contain the word <quote>mutt</quote> in the list of
recipients <emphasis role="bold">and</emphasis> that have the word <quote>elkins</quote> in the <quote>From</quote> header
field.
</para>

<para>
Mutt also recognizes the following operators to create more complex search
patterns:
</para>

<itemizedlist>
<listitem>

<para>
! -- logical NOT operator
</para>
</listitem>
<listitem>

<para>
&verbar; -- logical OR operator
</para>
</listitem>
<listitem>

<para>
() -- logical grouping operator
</para>
</listitem>

</itemizedlist>

<para>
Here is an example illustrating a complex search pattern.  This pattern will
select all messages which do not contain <quote>mutt</quote> in the <quote>To</quote> or <quote>Cc</quote>
field and which are from <quote>elkins</quote>.
</para>

<example id="ex-pattern-bool">
<title>Using boolean operators in patterns</title>
<screen>
!(~t mutt|~c mutt) ~f elkins
</screen>
</example>

<para>
Here is an example using white space in the regular expression (note
the ' and &quot; delimiters).  For this to match, the mail's subject must
match the <quote>&circ;Junk +From +Me$</quote> and it must be from either <quote>Jim +Somebody</quote>
or <quote>Ed +SomeoneElse</quote>:
</para>

<screen>
 '~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'
</screen>

<note>
<para>
If a regular expression contains parenthesis, or a vertical bar
("&verbar;"), you <emphasis role="bold">must</emphasis> enclose the expression in double or single quotes since
those characters are also used to separate different parts of Mutt's
pattern language.  For example: <literal>~f "me@(mutt\.org|cs\.hmc\.edu)"</literal>
</para>
</note>

<para>
Without the quotes, the parenthesis wouldn't end.
This would be separated to two OR'd patterns: <emphasis>&tilde;f me@(mutt\.org</emphasis>
and <emphasis>cs\.hmc\.edu)</emphasis>. They are never what you want.
</para>

</sect2>

<sect2 id="date-patterns">
<title>Searching by Date</title>

<para>
Mutt supports two types of dates, <emphasis>absolute</emphasis> and <emphasis>relative</emphasis>.
</para>

<para>
<emphasis role="bold">Absolute</emphasis>.  Dates <emphasis role="bold">must</emphasis> be in DD/MM/YY format (month and year are
optional, defaulting to the current month and year).  An example of a valid
range of dates is:
</para>

<screen>
Limit to messages matching: ~d 20/1/95-31/10
</screen>

<para>
If you omit the minimum (first) date, and just specify <quote>-DD/MM/YY</quote>, all
messages <emphasis>before</emphasis> the given date will be selected.  If you omit the maximum
(second) date, and specify <quote>DD/MM/YY-</quote>, all messages <emphasis>after</emphasis> the given
date will be selected.  If you specify a single date with no dash (<quote>-</quote>),
only messages sent on the given date will be selected.
</para>

<para>
<emphasis role="bold">Error Margins</emphasis>.  You can add error margins to absolute dates.
An error margin is a sign (+ or -), followed by a digit, followed by
one of the units in <xref linkend="tab-date-units"/>. As a special case, you can replace the
sign by a <quote>*</quote> character, which is equivalent to giving identical plus and minus error margins.
</para>

<table id="tab-date-units">
<title>Date units</title>
<tgroup cols="2">
<thead>
<row><entry>Unit</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>y</entry><entry>Years</entry></row>
<row><entry>m</entry><entry>Months</entry></row>
<row><entry>w</entry><entry>Weeks</entry></row>
<row><entry>d</entry><entry>Days</entry></row>
</tbody>
</tgroup>
</table>

<para>
Example: To select any messages two weeks around January 15, 2001,
you'd use the following pattern:
</para>

<screen>
Limit to messages matching: ~d 15/1/2001*2w
</screen>

<para>
<emphasis role="bold">Relative</emphasis>.  This type of date is relative to the current date, and may
be specified as:
</para>

<itemizedlist>
<listitem>

<para>
&gt;<emphasis>offset</emphasis> (messages older than <emphasis>offset</emphasis> units)
</para>
</listitem>
<listitem>

<para>
&lt;<emphasis>offset</emphasis> (messages newer than <emphasis>offset</emphasis> units)
</para>
</listitem>
<listitem>

<para>
=<emphasis>offset</emphasis> (messages exactly <emphasis>offset</emphasis> units old)
</para>
</listitem>

</itemizedlist>

<para>
<emphasis>offset</emphasis> is specified as a positive number with one of the units from <xref linkend="tab-date-units"/>.
</para>

<para>
Example: to select messages less than 1 month old, you would use
</para>

<screen>
Limit to messages matching: ~d &lt;1m
</screen>

<note>
<para>
All dates used when searching are relative to the
<emphasis role="bold">local</emphasis> time zone, so unless you change the setting of your <link linkend="index-format">&dollar;index&lowbar;format</link> to include a
<literal>&percnt;&lsqb;...&rsqb;</literal> format, these are <emphasis role="bold">not</emphasis> the dates shown
in the main index.
</para>
</note>

</sect2>

</sect1>

<sect1 id="tags">
<title>Using Tags</title>

<para>
Sometimes it is desirable to perform an operation on a group of
messages all at once rather than one at a time.  An example might be
to save messages to a mailing list to a separate folder, or to
delete all messages with a given subject.  To tag all messages
matching a pattern, use the <literal>&lt;tag-pattern&gt;</literal> function, which is bound to
<quote>shift-T</quote> by default.  Or you can select individual messages by
hand using the <literal>&lt;tag-message&gt;</literal> function, which is bound to <quote>t</quote> by
default.  See <link linkend="patterns">patterns</link> for Mutt's pattern
matching syntax.
</para>

<para>
Once you have tagged the desired messages, you can use the
<quote>tag-prefix</quote> operator, which is the <quote>;</quote> (semicolon) key by default.
When the <quote>tag-prefix</quote> operator is used, the <emphasis role="bold">next</emphasis> operation will
be applied to all tagged messages if that operation can be used in that
manner.  If the <link linkend="auto-tag">&dollar;auto&lowbar;tag</link>
variable is set, the next operation applies to the tagged messages
automatically, without requiring the <quote>tag-prefix</quote>.
</para>

<para>
In <link linkend="macro">macros</link> or <link linkend="push">push</link> commands,
you can use the <quote>tag-prefix-cond</quote> operator.  If there are no tagged
messages, mutt will "eat" the rest of the macro to abort it's execution.
Mutt will stop "eating" the macro when it encounters the <quote>end-cond</quote>
operator;  after this operator the rest of the macro will be executed as
normal.
</para>

</sect1>

<sect1 id="hooks">
<title>Using Hooks</title>

<para>
A <emphasis>hook</emphasis> is a concept found in many other programs which allows you to
execute arbitrary commands before performing some operation.  For example,
you may wish to tailor your configuration based upon which mailbox you are
reading, or to whom you are sending mail.  In the Mutt world, a <emphasis>hook</emphasis>
consists of a <link linkend="regexp">regular expression</link> or
<link linkend="patterns">pattern</link> along with a
configuration option/command.  See

<itemizedlist>
<listitem>

<para>
<link linkend="folder-hook">folder-hook</link>
</para>
</listitem>
<listitem>

<para>
<link linkend="send-hook">send-hook</link>
</para>
</listitem>
<listitem>

<para>
<link linkend="message-hook">message-hook</link>
</para>
</listitem>
<listitem>

<para>
<link linkend="save-hook">save-hook</link>
</para>
</listitem>
<listitem>

<para>
<link linkend="mbox-hook">mbox-hook</link>
</para>
</listitem>
<listitem>

<para>
<link linkend="fcc-hook">fcc-hook</link>
</para>
</listitem>
<listitem>

<para>
<link linkend="fcc-save-hook">fcc-save-hook</link>
</para>
</listitem>

</itemizedlist>

for specific details on each type of <emphasis>hook</emphasis> available.
</para>

<note>
<para>
If a hook changes configuration settings, these changes remain
effective until the end of the current mutt session. As this is generally
not desired, a default hook needs to be added before all other hooks to
restore configuration defaults. Here is an example with send-hook and the
my&lowbar;hdr directive:
</para>
</note>

<example id="ex-send-hook-my-hdr">
<title>Combining <literal>send-hook</literal> and <literal>my&lowbar;hdr</literal></title>
<screen>
send-hook . 'unmy_hdr From:'
send-hook ~C'^b@b\.b$' my_hdr from: c@c.c
</screen>
</example>

<sect2 id="pattern-hook" xreflabel="Message Matching in Hooks">
<title>Message Matching in Hooks</title>

<para>
Hooks that act upon messages (<literal>message-hook, reply-hook,
send-hook, send2-hook, save-hook, fcc-hook</literal>) are evaluated in a
slightly different manner. For the other
types of hooks, a <link linkend="regexp">regular expression</link> is
sufficient.  But in dealing with messages a finer grain of control is
needed for matching since for different purposes you want to match
different criteria.
</para>

<para>
Mutt allows the use of the <link linkend="patterns">search pattern</link>
language for matching messages in hook commands.  This works in
exactly the same way as it would when <emphasis>limiting</emphasis> or
<emphasis>searching</emphasis> the mailbox, except that you are restricted to those
operators which match information mutt extracts from the header of
the message (i.e., from, to, cc, date, subject, etc.).
</para>

<para>
For example, if you wanted to set your return address based upon sending
mail to a specific address, you could do something like:
</para>

<screen>
send-hook '~t ^me@cs\.hmc\.edu$' 'my_hdr From: Mutt User &lt;user@host&gt;'
</screen>

<para>
which would execute the given command when sending mail to
<emphasis>me@cs.hmc.edu</emphasis>.
</para>

<para>
However, it is not required that you write the pattern to match using the
full searching language.  You can still specify a simple <emphasis>regular
expression</emphasis> like the other hooks, in which case Mutt will translate your
pattern into the full language, using the translation specified by the
<link linkend="default-hook">&dollar;default&lowbar;hook</link> variable.  The
pattern is translated at the time the hook is declared, so the value of
<link linkend="default-hook">&dollar;default&lowbar;hook</link> that is in effect
at that time will be used.
</para>

</sect2>

</sect1>

<sect1 id="query">
<title>External Address Queries</title>

<para>
Mutt supports connecting to external directory databases such as LDAP,
ph/qi, bbdb, or NIS through a wrapper script which connects to mutt
using a simple interface.  Using the <link linkend="query-command">&dollar;query&lowbar;command</link> variable, you specify the wrapper
command to use.  For example:
</para>

<screen>
set query_command = "mutt_ldap_query.pl '%s'"
</screen>

<para>
The wrapper script should accept the query on the command-line.  It
should return a one line message, then each matching response on a
single line, each line containing a tab separated address then name then
some other optional information.  On error, or if there are no matching
addresses, return a non-zero exit code and a one line error message.
</para>

<para>
An example multiple response output:
</para>

<screen>
Searching database ... 20 entries ... 3 matching:
me@cs.hmc.edu           Michael Elkins  mutt dude
blong@fiction.net       Brandon Long    mutt and more
roessler@does-not-exist.org        Thomas Roessler mutt pgp
</screen>

<para>
There are two mechanisms for accessing the query function of mutt.  One
is to do a query from the index menu using the <literal>&lt;query&gt;</literal> function (default: Q).
This will prompt for a query, then bring up the query menu which will
list the matching responses.  From the query menu, you can select
addresses to create aliases, or to mail.  You can tag multiple addresses
to mail, start a new query, or have a new query appended to the current
responses.
</para>

<para>
The other mechanism for accessing the query function is for address
completion, similar to the alias completion.  In any prompt for address
entry, you can use the <literal>&lt;complete-query&gt;</literal> function (default: &circ;T) to run a
query based on the current address you have typed.  Like aliases, mutt
will look for what you have typed back to the last space or comma.  If
there is a single response for that query, mutt will expand the address
in place.  If there are multiple responses, mutt will activate the query
menu.  At the query menu, you can select one or more addresses to be
added to the prompt.
</para>

</sect1>

<sect1 id="mailbox-formats">
<title>Mailbox Formats</title>

<para>
Mutt supports reading and writing of four different mailbox formats:
mbox, MMDF, MH and Maildir.  The mailbox type is autodetected, so there
is no need to use a flag for different mailbox types.  When creating new
mailboxes, Mutt uses the default specified with the <link linkend="mbox-type">&dollar;mbox&lowbar;type</link> variable.
</para>

<para>
<emphasis role="bold">mbox</emphasis>.  This is the most widely used mailbox format for UNIX.  All
messages are stored in a single file.  Each message has a line of the form:
</para>

<screen>
From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST
</screen>

<para>
to denote the start of a new message (this is often referred to as the
<quote>From&lowbar;</quote> line).
</para>

<para>
<emphasis role="bold">MMDF</emphasis>.  This is a variant of the <emphasis>mbox</emphasis> format.  Each message is
surrounded by lines containing <quote>&circ;A&circ;A&circ;A&circ;A</quote> (four control-A's).
</para>

<para>
<emphasis role="bold">MH</emphasis>. A radical departure from <emphasis>mbox</emphasis> and <emphasis>MMDF</emphasis>, a mailbox
consists of a directory and each message is stored in a separate file.
The filename indicates the message number (however, this is may not
correspond to the message number Mutt displays). Deleted messages are
renamed with a comma (,) prepended to the filename. Mutt
detects this type of mailbox by looking for either <literal>.mh&lowbar;sequences</literal>
or <literal>.xmhcache</literal> (needed to distinguish normal directories from MH
mailboxes).
</para>

<para>
<emphasis role="bold">Maildir</emphasis>.  The newest of the mailbox formats, used by the Qmail MTA (a
replacement for sendmail).  Similar to <emphasis>MH</emphasis>, except that it adds three
subdirectories of the mailbox: <emphasis>tmp</emphasis>, <emphasis>new</emphasis> and <emphasis>cur</emphasis>.  Filenames
for the messages are chosen in such a way they are unique, even when two
programs are writing the mailbox over NFS, which means that no file locking
is needed.
</para>

</sect1>

<sect1 id="shortcuts">
<title>Mailbox Shortcuts</title>

<para>
There are a number of built in shortcuts which refer to specific mailboxes.
These shortcuts can be used anywhere you are prompted for a file or mailbox
path.
</para>

<itemizedlist>
<listitem>

<para>
! -- refers to your <link linkend="spoolfile">&dollar;spoolfile</link> (incoming) mailbox
</para>
</listitem>
<listitem>

<para>
&gt; -- refers to your <link linkend="mbox">&dollar;mbox</link> file
</para>
</listitem>
<listitem>

<para>
&lt; -- refers to your <link linkend="record">&dollar;record</link> file
</para>
</listitem>
<listitem>

<para>
&circ; -- refers to the current mailbox
</para>
</listitem>
<listitem>

<para>
- or !! -- refers to the file you've last visited
</para>
</listitem>
<listitem>

<para>
&tilde; -- refers to your home directory
</para>
</listitem>
<listitem>

<para>
= or + -- refers to your <link linkend="folder">&dollar;folder</link> directory
</para>
</listitem>
<listitem>

<para>
@<emphasis>alias</emphasis> -- refers to the <link linkend="save-hook">default save folder</link> as determined by the address of the alias
</para>
</listitem>

</itemizedlist>

</sect1>

<sect1 id="using-lists">
<title>Handling Mailing Lists</title>

<para>
Mutt has a few configuration options that make dealing with large
amounts of mail easier.  The first thing you must do is to let Mutt
know what addresses you consider to be mailing lists (technically
this does not have to be a mailing list, but that is what it is most
often used for), and what lists you are subscribed to.  This is
accomplished through the use of the <link linkend="lists">lists and subscribe</link> commands in your muttrc.
</para>

<para>
Now that Mutt knows what your mailing lists are, it can do several
things, the first of which is the ability to show the name of a list
through which you received a message (i.e., of a subscribed list) in
the <emphasis>index</emphasis> menu display.  This is useful to distinguish between
personal and list mail in the same mailbox.  In the <link linkend="index-format">&dollar;index&lowbar;format</link> variable, the escape <quote>&percnt;L</quote>
will return the string <quote>To &lt;list&gt;</quote> when <quote>list</quote> appears in the
<quote>To</quote> field, and <quote>Cc &lt;list&gt;</quote> when it appears in the <quote>Cc</quote>
field (otherwise it returns the name of the author).
</para>

<para>
Often times the <quote>To</quote> and <quote>Cc</quote> fields in mailing list messages
tend to get quite large. Most people do not bother to remove the
author of the message they reply to from the list, resulting in
two or more copies being sent to that person.  The <literal>&lt;list-reply&gt;</literal>
function, which by default is bound to <quote>L</quote> in the <emphasis>index</emphasis> menu
and <emphasis>pager</emphasis>, helps reduce the clutter by only replying to the
known mailing list addresses instead of all recipients (except as
specified by <literal>Mail-Followup-To</literal>, see below).
</para>

<para>
Mutt also supports the <literal>Mail-Followup-To</literal> header.  When you send
a message to a list of recipients which includes one or several
subscribed mailing lists, and if the <link linkend="followup-to">&dollar;followup&lowbar;to</link> option is set, mutt will generate
a Mail-Followup-To header which contains all the recipients to whom
you send this message, but not your address. This indicates that
group-replies or list-replies (also known as <quote>followups</quote>) to this
message should only be sent to the original recipients of the
message, and not separately to you - you'll receive your copy through
one of the mailing lists you are subscribed to.
</para>

<para>
Conversely, when group-replying or list-replying to a message which
has a <literal>Mail-Followup-To</literal> header, mutt will respect this header if
the <link linkend="honor-followup-to">&dollar;honor&lowbar;followup&lowbar;to</link> configuration
variable is set.  Using list-reply will in this case also make sure
that the reply goes to the mailing list, even if it's not specified
in the list of recipients in the <literal>Mail-Followup-To</literal>.
</para>

<note>
<para>
When header editing is enabled, you can create a
<literal>Mail-Followup-To</literal> header manually.  Mutt will only auto-generate
this header if it doesn't exist when you send the message.
</para>
</note>

<para>
The other method some mailing list admins use is to generate a
<quote>Reply-To</quote> field which points back to the mailing list address rather
than the author of the message.  This can create problems when trying
to reply directly to the author in private, since most mail clients
will automatically reply to the address given in the <quote>Reply-To</quote>
field.  Mutt uses the <link linkend="reply-to">&dollar;reply&lowbar;to</link>
variable to help decide which address to use.  If set to <emphasis>ask-yes</emphasis> or
<emphasis>ask-no</emphasis>, you will be
prompted as to whether or not you would like to use the address given in
the <quote>Reply-To</quote> field, or reply directly to the address given in the
<quote>From</quote> field.  When set to <emphasis>yes</emphasis>, the <quote>Reply-To</quote> field will be used when
present.
</para>

<para>
The <quote>X-Label:</quote> header field can be used to further identify mailing
lists or list subject matter (or just to annotate messages
individually).  The <link linkend="index-format">&dollar;index&lowbar;format</link> variable's <quote>&percnt;y</quote> and
<quote>&percnt;Y</quote> escapes can be used to expand <quote>X-Label:</quote> fields in the
index, and Mutt's pattern-matcher can match regular expressions to
<quote>X-Label:</quote> fields with the <quote>&tilde;y</quote> selector.  <quote>X-Label:</quote> is not a
standard message header field, but it can easily be inserted by procmail
and other mail filtering agents.
</para>

<para>
Lastly, Mutt has the ability to <link linkend="sort">sort</link> the mailbox into
<link linkend="threads">threads</link>.  A thread is a group of messages which all relate to the same
subject.  This is usually organized into a tree-like structure where a
message and all of its replies are represented graphically.  If you've ever
used a threaded news client, this is the same concept.  It makes dealing
with large volume mailing lists easier because you can easily delete
uninteresting threads and quickly find topics of value.
</para>

</sect1>

<sect1 id="handling-folders">
<title>Handling multiple folders</title>

<para>
Mutt supports setups with multiple folders, allowing all of them to
be monitored for new mail (see <xref linkend="mailboxes"/> for details).
</para>

<para>
When in the index menu and being idle (also see
<link linkend="timeout">&dollar;timeout</link>), Mutt periodically checks
for new mail in all folders which have been configured via the
<literal>mailboxes</literal> command. The interval depends on the folder
type: for local/IMAP folders it consults
<link linkend="mail-check">&dollar;mail&lowbar;check</link> and
<link linkend="pop-checkinterval">&dollar;pop&lowbar;checkinterval</link>
for POP folders.
</para>

<para>
Outside the index menu the directory browser supports checking
for new mail using the <literal>&lt;check-new&gt;</literal> function which is
unbound by default. Pressing TAB will bring up a
menu showing the files specified by the <literal>mailboxes</literal> command,
and indicate which contain new messages. Mutt will automatically enter this
mode when invoked from the command line with the <literal>-y</literal> option.
</para>

<para>
For the pager, index and directory browser menus, Mutt contains the
<literal>&lt;buffy-list&gt;</literal> function (bound to <quote>.</quote> by default)
which will print a list of folders with new mail in the command line at
the bottom of the screen.
</para>

<para>
For the index, by default Mutt displays the number of mailboxes with new
mail in the status bar, please refer to the
<link linkend="index-format">&dollar;index&lowbar;format</link>
variable for details.
</para>

<para>
When changing folders, Mutt fills the prompt with the first folder from
the mailboxes list containing new mail (if any), pressing
<emphasis>space</emphasis> will cycle through folders with new mail.
</para>

</sect1>

<sect1 id="editing-threads">
<title>Editing threads</title>

<para>
Mutt has the ability to dynamically restructure threads that are broken
either by misconfigured software or bad behavior from some
correspondents. This allows to clean your mailboxes formats) from these
annoyances which make it hard to follow a discussion.
</para>

<sect2 id="link-threads">
<title>Linking threads</title>

<para>
Some mailers tend to "forget" to correctly set the "In-Reply-To:" and
"References:" headers when replying to a message. This results in broken
discussions because Mutt has not enough information to guess the correct
threading.
You can fix this by tagging the reply, then moving to the parent message
and using the <literal>&lt;link-threads&gt;</literal> function (bound to &amp; by default). The
reply will then be connected to this "parent" message.
</para>

<para>
You can also connect multiple children at once, tagging them and using the
tag-prefix command (';') or the auto&lowbar;tag option.
</para>

</sect2>

<sect2 id="break-threads">
<title>Breaking threads</title>

<para>
On mailing lists, some people are in the bad habit of starting a new
discussion by hitting "reply" to any message from the list and changing
the subject to a totally unrelated one.
You can fix such threads by using the <literal>&lt;break-thread&gt;</literal> function (bound
by default to &num;), which will turn the subthread starting from the
current message into a whole different thread.
</para>

</sect2>

</sect1>

<sect1 id="dsn">
<title>Delivery Status Notification (DSN) Support</title>

<para>
RFC1894 defines a set of MIME content types for relaying information
about the status of electronic mail messages.  These can be thought of as
<quote>return receipts.</quote>
</para>

<para>
To support DSN, there are two variables. <link linkend="dsn-notify">&dollar;dsn&lowbar;notify</link> is used to request receipts for
different results (such as failed message, message delivered, etc.).
<link linkend="dsn-return">&dollar;dsn&lowbar;return</link> requests how much
of your message should be returned with the receipt (headers or full
message).
</para>

<para>
When using <link linkend="sendmail">&dollar;sendmail</link> for mail
delivery, you need to use either Berkeley sendmail 8.8.x (or greater) a MTA
supporting DSN command line options compatible to Sendmail: The -N and -R
options can be used by the mail client to make requests as to what type of
status messages should be returned. Please consider your MTA documentation
whether DSN is supported.
</para>

<para>
For SMTP delivery using <link
  linkend="smtp-url">&dollar;smtp&lowbar;url</link>, it depends on the
capabilities announced by the server whether mutt will attempt to
request DSN or not.
</para>

</sect1>

<sect1 id="urlview">
<title>Start a WWW Browser on URLs</title>

<para>
If a message contains URLs, it is efficient to get
a menu with all the URLs and start a WWW browser on one of them.  This
functionality is provided by the external urlview program which can be
retrieved at
<ulink url="ftp://ftp.mutt.org/mutt/contrib/">ftp://ftp.mutt.org/mutt/contrib/</ulink>
and the configuration commands:
</para>

<screen>
macro index \cb |urlview\n
macro pager \cb |urlview\n
</screen>

</sect1>

</chapter>

<sect1 id="compressedfolders">
<title>Compressed folders Support (OPTIONAL)</title>

<para>
If Mutt was compiled with compressed folders support (by running the
<emphasis>configure</emphasis> script with the
<emphasis>--enable-compressed</emphasis> flag), Mutt can open folders
stored in an arbitrary format, provided that the user has a script to
convert from/to this format to one of the accepted.

The most common use is to open compressed archived folders e.g. with
gzip.

In addition, the user can provide a script that gets a folder in an
accepted format and appends its context to the folder in the
user-defined format, which may be faster than converting the entire
folder to the accepted format, appending to it and converting back to
the user-defined format.

There are three hooks defined (<link
linkend="open-hook">open-hook</link>, <link
linkend="close-hook">close-hook</link> and <link
linkend="append-hook">append-hook</link>) which define commands to
uncompress and compress a folder and to append messages to an existing
compressed folder respectively.

For example:

<screen>
open-hook \\.gz$ "gzip -cd %f &gt; %t" 
close-hook \\.gz$ "gzip -c %t &gt; %f"
append-hook \\.gz$ "gzip -c %t &gt;&gt; %f" 
</screen>

You do not have to specify all of the commands. If you omit <link
linkend="append-hook">append-hook</link>, the folder will be open and
closed again each time you will add to it. If you omit <link
linkend="close-hook">close-hook</link> (or give empty command) , the
folder will be open in the mode. If you specify <link
linkend="append-hook">append-hook</link> though you'll be able to
append to the folder.

Note that Mutt will only try to use hooks if the file is not in one of
the accepted formats. In particular, if the file is empty, mutt
supposes it is not compressed. This is important because it allows the
use of programs that do not have well defined extensions. Just use
&quot;.&quot; as a regexp. But this may be surprising if your
compressing script produces empty files. In this situation, unset
<link linkend="save-empty">&dollar;save&lowbar;empty</link>, so that
the compressed file will be removed if you delete all of the messages.
</para>

<sect2 id="open-hook">
<title>Open a compressed mailbox for reading</title>

<para>
Usage: <literal>open-hook</literal> <emphasis>regexp</emphasis> &quot;<emphasis>command</emphasis>&quot;

The <emphasis>command</emphasis> is the command that can be used for
opening the folders whose names match <emphasis>regexp</emphasis>.

The <emphasis>command</emphasis> string is the printf-like format
string, and it should accept two parameters: &percnt;f, which is
replaced with the (compressed) folder name, and &percnt;t which is
replaced with the name of the temporary folder to which to write.

&percnt;f and &percnt;t can be repeated any number of times in the
command string, and all of the entries are replaced with the
appropriate folder name. In addition, &percnt;&percnt; is replaced by
&percnt;, as in printf, and any other &percnt;anything is left as is.

The <emphasis>command</emphasis> should <emphasis
role="bold">not</emphasis> remove the original compressed file.  The
<emphasis>command</emphasis> should return non-zero exit status if it
fails, so mutt knows something's wrong.

Example:

<screen>
open-hook \\.gz$ "gzip -cd %f &gt; %t" 
</screen>

If the <emphasis>command</emphasis> is empty, this operation is
disabled for this file type.
</para>
</sect2>

<sect2 id="close-hook">
<title>Write a compressed mailbox</title>

<para>
Usage: <literal>close-hook</literal> <emphasis>regexp</emphasis> &quot;<emphasis>command</emphasis>&quot;

This is used to close the folder that was open with the <link
linkend="open-hook">open-hook</link> command after some changes were
made to it.

The <emphasis>command</emphasis> string is the command that can be
used for closing the folders whose names match
<emphasis>regexp</emphasis>. It has the same format as in the <link
linkend="open-hook">open-hook</link> command. Temporary folder in this
case is the folder previously produced by the <link
linkend="open-hook">open-hook</link> command.

The <emphasis>command</emphasis> should <emphasis
role="bold">not</emphasis> remove the decompressed file. The
<emphasis>command</emphasis> should return non-zero exit status if it
fails, so mutt knows something's wrong.

Example:

<screen>
close-hook \\.gz$ "gzip -c %t &gt; %f"
</screen>

If the <emphasis>command</emphasis> is empty, this operation is
disabled for this file type, and the file can only be open in the
read-only mode.

<link linkend="close-hook">close-hook</link> is not called when you
exit from the folder if the folder was not changed.
</para>
</sect2>

<sect2 id="append-hook">
<title>Append a message to a compressed mailbox</title>

<para>
Usage: <literal>append-hook</literal> <emphasis>regexp</emphasis> &quot;<emphasis>command</emphasis>&quot;

This command is used for saving to an existing compressed folder.  The
<emphasis>command</emphasis> is the command that can be used for
appending to the folders whose names match
<emphasis>regexp</emphasis>. It has the same format as in the <link
linkend="open-hook">open-hook</link> command.  The temporary folder in
this case contains the messages that are being appended.

The <emphasis>command</emphasis> should <emphasis
role="bold">not</emphasis> remove the decompressed file. The
<emphasis>command</emphasis> should return non-zero exit status if it
fails, so mutt knows something's wrong.

Example:

<screen>
append-hook \\.gz$ "gzip -c %t &gt;&gt; %f" 
</screen>

When <link linkend="append-hook">append-hook</link> is used, the folder
is not opened, which saves time, but this means that we can not find
out what the folder type is. Thus the default (<link
linkend="mbox-type">&dollar;mbox&lowbar;type</link>) type is always
supposed (i.e.  this is the format used for the temporary folder).

If the file does not exist when you save to it, <link
linkend="close-hook">close-hook</link> is called, and not <link
linkend="append-hook">append-hook</link>. <link
linkend="append-hook">append-hook</link> is only for appending to
existing folders.

If the <emphasis>command</emphasis> is empty, this operation is
disabled for this file type. In this case, the folder will be open and
closed again (using <link linkend="open-hook">open-hook</link> and
<link linkend="close-hook">close-hook</link>respectively) each time you
will add to it.
</para>
</sect2>

<sect2>
<title>Encrypted folders</title>

<para>
The compressed folders support can also be used to handle encrypted
folders. If you want to encrypt a folder with PGP, you may want to use
the following hooks:

<screen>
open-hook  \\.pgp$ "pgp -f &lt; %f &gt; %t"
close-hook \\.pgp$ "pgp -fe YourPgpUserIdOrKeyId &lt; %t &gt; %f"
</screen>

Please note, that PGP does not support appending to an encrypted
folder, so there is no append-hook defined.

If you are using GnuPG instead of PGP, you may use the following hooks
instead:

<screen>
open-hook  \\.gpg$ "gpg --decrypt &lt; %f &gt; %t"
close-hook \\.gpg$ "gpg --encrypt --recipient YourGpgUserIdOrKeyId &lt; %t &gt; %f"
</screen>

<emphasis role="bold">Note:</emphasis> the folder is temporary stored
decrypted in the /tmp directory, where it can be read by your system
administrator. So think about the security aspects of this.
</para>
</sect2>
</sect1>

<chapter id="mimesupport">
<title>Mutt's MIME Support</title>

<para>
Quite a bit of effort has been made to make Mutt the premier text-mode
MIME MUA.  Every effort has been made to provide the functionality that
the discerning MIME user requires, and the conformance to the standards
wherever possible.  When configuring Mutt for MIME, there are two extra
types of configuration files which Mutt uses.  One is the
<literal>mime.types</literal> file, which contains the mapping of file extensions to
IANA MIME types.  The other is the <literal>mailcap</literal> file, which specifies
the external commands to use for handling specific MIME types.
</para>

<sect1 id="using-mime">
<title>Using MIME in Mutt</title>

<para>
There are three areas/menus in Mutt which deal with MIME, they are the
pager (while viewing a message), the attachment menu and the compose
menu.
</para>

<sect2 id="mime-pager">
<title>Viewing MIME messages in the pager</title>

<para>
When you select a message from the index and view it in the pager, Mutt
decodes the message to a text representation.  Mutt internally supports
a number of MIME types, including <literal>text/plain, text/enriched,
message/rfc822, and message/news</literal>.  In addition, the export
controlled version of Mutt recognizes a variety of PGP MIME types,
including PGP/MIME and application/pgp.
</para>

<para>
Mutt will denote attachments with a couple lines describing them.
These lines are of the form:
</para>

<screen>
[-- Attachment #1: Description --]
[-- Type: text/plain, Encoding: 7bit, Size: 10000 --]
</screen>

<para>
Where the <literal>Description</literal> is the description or filename given for the
attachment, and the <literal>Encoding</literal> is one of
<literal>7bit/8bit/quoted-printable/base64/binary</literal>.
</para>

<para>
If Mutt cannot deal with a MIME type, it will display a message like:
</para>

<screen>
[-- image/gif is unsupported (use 'v' to view this part) --]
</screen>

</sect2>

<sect2 id="attach-menu">
<title>The Attachment Menu</title>

<para>
The default binding for <literal>view-attachments</literal> is `v', which displays the
attachment menu for a message.  The attachment menu displays a list of
the attachments in a message.  From the attachment menu, you can save,
print, pipe, delete, and view attachments.  You can apply these
operations to a group of attachments at once, by tagging the attachments
and by using the <quote>tag-prefix</quote> operator.  You can also reply to the
current message from this menu, and only the current attachment (or the
attachments tagged) will be quoted in your reply.  You can view
attachments as text, or view them using the mailcap viewer definition.
</para>

<para>
Finally, you can apply the usual message-related functions (like
<link linkend="resend-message"><literal>&lt;resend-message&gt;</literal></link>, and the
<literal>&lt;reply&gt;</literal> and <literal>&lt;forward&gt;</literal>
functions) to attachments of type <literal>message/rfc822</literal>.
</para>

<para>
See the help on the attachment menu for more information.
</para>

</sect2>

<sect2 id="compose-menu">
<title>The Compose Menu</title>

<para>
The compose menu is the menu you see before you send a message.  It
allows you to edit the recipient list, the subject, and other aspects
of your message.  It also contains a list of the attachments of your
message, including the main body.  From this menu, you can print, copy,
filter, pipe, edit, compose, review, and rename an attachment or a
list of tagged attachments.  You can also modifying the attachment
information, notably the type, encoding and description.
</para>

<para>
Attachments appear as follows:
</para>

<screen>
- 1 [text/plain, 7bit, 1K]           /tmp/mutt-euler-8082-0 &lt;no description&gt;
  2 [applica/x-gunzip, base64, 422K] ~/src/mutt-0.85.tar.gz &lt;no description&gt;
</screen>

<para>
The '-' denotes that Mutt will delete the file after sending (or
postponing, or canceling) the message.  It can be toggled with the
<literal>toggle-unlink</literal> command (default: u).  The next field is the MIME
content-type, and can be changed with the <literal>edit-type</literal> command
(default: &circ;T).  The next field is the encoding for the attachment,
which allows a binary message to be encoded for transmission on 7bit
links.  It can be changed with the <literal>edit-encoding</literal> command
(default: &circ;E).  The next field is the size of the attachment,
rounded to kilobytes or megabytes.  The next field is the filename,
which can be changed with the <literal>rename-file</literal> command (default: R).
The final field is the description of the attachment, and can be
changed with the <literal>edit-description</literal> command (default: d).
</para>

</sect2>

</sect1>

<sect1 id="mime-types">
<title>MIME Type configuration with <literal>mime.types</literal></title>

<para>
When you add an attachment to your mail message, Mutt searches your
personal mime.types file at <literal>&dollar;&lcub;HOME&rcub;/.mime.types</literal>, and then
the system mime.types file at <literal>/usr/local/share/mutt/mime.types</literal> or
<literal>/etc/mime.types</literal>
</para>

<para>
The mime.types file consist of lines containing a MIME type and a space
separated list of extensions.  For example:
</para>

<screen>
application/postscript          ps eps
application/pgp                 pgp
audio/x-aiff                    aif aifc aiff
</screen>

<para>
A sample <literal>mime.types</literal> file comes with the Mutt distribution, and
should contain most of the MIME types you are likely to use.
</para>

<para>
If Mutt can not determine the mime type by the extension of the file you
attach, it will look at the file.  If the file is free of binary
information, Mutt will assume that the file is plain text, and mark it
as <literal>text/plain</literal>.  If the file contains binary information, then Mutt will
mark it as <literal>application/octet-stream</literal>.  You can change the MIME
type that Mutt assigns to an attachment by using the <literal>edit-type</literal>
command from the compose menu (default: &circ;T). The MIME type is actually a
major mime type followed by the sub-type, separated by a '/'. 6 major
types: application, text, image, video, audio, and model have been approved
after various internet discussions. Mutt recognizes all of these if the
appropriate entry is found in the mime.types file. It also recognizes other
major mime types, such as the chemical type that is widely used in the
molecular modeling community to pass molecular data in various forms to
various molecular viewers. Non-recognized mime types should only be used
if the recipient of the message is likely to be expecting such attachments.
</para>

</sect1>

<sect1 id="mailcap">
<title>MIME Viewer configuration with <literal>mailcap</literal></title>

<para>
Mutt supports RFC 1524 MIME Configuration, in particular the Unix
specific format specified in Appendix A of RFC 1524.  This file format
is commonly referred to as the mailcap format.  Many MIME compliant
programs utilize the mailcap format, allowing you to specify handling
for all MIME types in one place for all programs.  Programs known to
use this format include Netscape, XMosaic, lynx and metamail.
</para>

<para>
In order to handle various MIME types that Mutt can not handle
internally, Mutt parses a series of external configuration files to
find an external handler. The default search string for these files
is a colon delimited list containing the following files:
</para>

<orderedlist>
<listitem><para><literal>&dollar;HOME/.mailcap</literal></para></listitem>
<listitem><para><literal>&dollar;PKGDATADIR/mailcap</literal></para></listitem>
<listitem><para><literal>&dollar;SYSCONFDIR/mailcap</literal></para></listitem>
<listitem><para><literal>/etc/mailcap</literal></para></listitem>
<listitem><para><literal>/usr/etc/mailcap</literal></para></listitem>
<listitem><para><literal>/usr/local/etc/mailcap</literal></para></listitem>
</orderedlist>

<para>
where <literal>&dollar;HOME</literal> is your home directory. The
<literal>&dollar;PKGDATADIR</literal> and the
<literal>&dollar;SYSCONFDIR</literal> directories depend on where mutt
is installed: the former is the default for shared data, the
latter for system configuration files.
</para>

<para>
The default search path can be obtained by running the following
command:
</para>

<screen>
mutt -nF /dev/null -Q mailcap_path
</screen>

<para>
In particular, the metamail distribution will install a mailcap file,
usually as <literal>/usr/local/etc/mailcap</literal>, which contains some baseline
entries.
</para>

<sect2 id="mailcap-basics">
<title>The Basics of the mailcap file</title>

<para>
A mailcap file consists of a series of lines which are comments, blank,
or definitions.
</para>

<para>
A comment line consists of a &num; character followed by anything you want.
</para>

<para>
A blank line is blank.
</para>

<para>
A definition line consists of a content type, a view command, and any
number of optional fields.  Each field of a definition line is divided
by a semicolon ';' character.
</para>

<para>
The content type is specified in the MIME standard type/subtype method.
For example,
<literal>text/plain, text/html, image/gif, </literal>
etc.  In addition, the mailcap format includes two formats for
wildcards, one using the special '*' subtype, the other is the implicit
wild, where you only include the major type.  For example, <literal>image/*</literal>, or
<literal>video,</literal> will match all image types and video types,
respectively.
</para>

<para>
The view command is a Unix command for viewing the type specified. There
are two different types of commands supported. The default is to send
the body of the MIME message to the command on stdin. You can change
this behavior by using &percnt;s as a parameter to your view command.
This will cause Mutt to save the body of the MIME message to a temporary
file, and then call the view command with the &percnt;s replaced by
the name of the temporary file. In both cases, Mutt will turn over the
terminal to the view program until the program quits, at which time Mutt
will remove the temporary file if it exists.
</para>

<para>
So, in the simplest form, you can send a text/plain message to the
external pager more on stdin:
</para>

<screen>
text/plain; more
</screen>

<para>
Or, you could send the message as a file:
</para>

<screen>
text/plain; more %s
</screen>

<para>
Perhaps you would like to use lynx to interactively view a text/html
message:
</para>

<screen>
text/html; lynx %s
</screen>

<para>
In this case, lynx does not support viewing a file from stdin, so you
must use the &percnt;s syntax.
</para>

<note>
<para>
<emphasis>Some older versions of lynx contain a bug where they
will check the mailcap file for a viewer for text/html.  They will find
the line which calls lynx, and run it.  This causes lynx to continuously
spawn itself to view the object.</emphasis>
</para>
</note>

<para>
On the other hand, maybe you don't want to use lynx interactively, you
just want to have it convert the text/html to text/plain, then you can
use:
</para>

<screen>
text/html; lynx -dump %s | more
</screen>

<para>
Perhaps you wish to use lynx to view text/html files, and a pager on
all other text formats, then you would use the following:
</para>

<screen>
text/html; lynx %s
text/*; more
</screen>

<para>
This is the simplest form of a mailcap file.
</para>

</sect2>

<sect2 id="secure-mailcap">
<title>Secure use of mailcap</title>

<para>
The interpretation of shell meta-characters embedded in MIME parameters
can lead to security problems in general.  Mutt tries to quote parameters
in expansion of &percnt;s syntaxes properly, and avoids risky characters by
substituting them, see the <link linkend="mailcap-sanitize">&dollar;mailcap&lowbar;sanitize</link> variable.
</para>

<para>
Although mutt's procedures to invoke programs with mailcap seem to be
safe, there are other applications parsing mailcap, maybe taking less care
of it.  Therefore you should pay attention to the following rules:
</para>

<para>
<emphasis>Keep the &percnt;-expandos away from shell quoting.</emphasis>
Don't quote them with single or double quotes.  Mutt does this for
you, the right way, as should any other program which interprets
mailcap.  Don't put them into backtick expansions.  Be highly careful
with eval statements, and avoid them if possible at all.  Trying to fix
broken behavior with quotes introduces new leaks - there is no
alternative to correct quoting in the first place.
</para>

<para>
If you have to use the &percnt;-expandos' values in context where you need
quoting or backtick expansions, put that value into a shell variable
and reference the shell variable where necessary, as in the following
example (using <literal>&dollar;charset</literal> inside the backtick expansion is safe,
since it is not itself subject to any further expansion):
</para>

<screen>
text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%{charset} &bsol;
        &amp;&amp; test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1
</screen>

</sect2>

<sect2 id="advanced-mailcap">
<title>Advanced mailcap Usage</title>

<sect3 id="optional-mailcap-fields">
<title>Optional Fields</title>

<para>
In addition to the required content-type and view command fields, you
can add semi-colon ';' separated fields to set flags and other options.
Mutt recognizes the following optional fields:
</para>

<variablelist>

<varlistentry>
<term>copiousoutput</term>
<listitem>
<para>
This flag tells Mutt that the command passes possibly large amounts of
text on stdout.  This causes Mutt to invoke a pager (either the internal
pager or the external pager defined by the pager variable) on the output
of the view command.  Without this flag, Mutt assumes that the command
is interactive.  One could use this to replace the pipe to <literal>more</literal>
in the <literal>lynx -dump</literal> example in the Basic section:
</para>

<screen>
text/html; lynx -dump %s ; copiousoutput
</screen>

<para>
This will cause lynx to format the text/html output as text/plain
and Mutt will use your standard pager to display the results.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>needsterminal</term>
<listitem>
<para>
Mutt uses this flag when viewing attachments with <link linkend="auto-view">auto&lowbar;view</link>, in order to decide whether it should honor the setting
of the <link linkend="wait-key">&dollar;wait&lowbar;key</link> variable or
not.  When an attachment is viewed using an interactive program, and the
corresponding mailcap entry has a <emphasis>needsterminal</emphasis> flag, Mutt will use
<link linkend="wait-key">&dollar;wait&lowbar;key</link> and the exit status
of the program to decide if it will ask you to press a key after the
external program has exited.  In all other situations it will not prompt
you for a key.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>compose=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  Mutt supports this from the compose menu.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>composetyped=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to create a new attachment of a
specific MIME type.  This command differs from the compose command in
that mutt will expect standard MIME headers on the data.  This can be
used to specify parameters, filename, description, etc. for a new
attachment.   Mutt supports this from the compose menu.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>print=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to print a specific MIME type.
Mutt supports this from the attachment and compose menus.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>edit=&lt;command&gt;</term>
<listitem>
<para>
This flag specifies the command to use to edit a specific MIME type.
Mutt supports this from the compose menu, and also uses it to compose
new attachments.  Mutt will default to the defined editor for text
attachments.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>nametemplate=&lt;template&gt;</term>
<listitem>
<para>
This field specifies the format for the file denoted by &percnt;s in the
command fields.  Certain programs will require a certain file extension,
for instance, to correctly view a file.  For instance, lynx will only
interpret a file as <literal>text/html</literal> if the file ends in <literal>.html</literal>.
So, you would specify lynx as a <literal>text/html</literal> viewer with a line in
the mailcap file like:
</para>

<screen>
text/html; lynx %s; nametemplate=%s.html
</screen>

</listitem>
</varlistentry>
<varlistentry>
<term>test=&lt;command&gt;</term>
<listitem>
<para>
This field specifies a command to run to test whether this mailcap
entry should be used.  The command is defined with the command expansion
rules defined in the next section.  If the command returns 0, then the
test passed, and Mutt uses this entry.  If the command returns non-zero,
then the test failed, and Mutt continues searching for the right entry.
Note that the content-type must match before Mutt performs the test.
For example:
</para>

<screen>
text/html; netscape -remote 'openURL(%s)' ; test=RunningX
text/html; lynx %s
</screen>

<para>
In this example, Mutt will run the program RunningX which will return 0
if the X Window manager is running, and non-zero if it isn't.  If
RunningX returns 0, then Mutt will call netscape to display the
text/html object.  If RunningX doesn't return 0, then Mutt will go on
to the next entry and use lynx to display the text/html object.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect3>

<sect3 id="mailcap-search-order">
<title>Search Order</title>

<para>
When searching for an entry in the mailcap file, Mutt will search for
the most useful entry for its purpose.  For instance, if you are
attempting to print an <literal>image/gif</literal>, and you have the following
entries in your mailcap file, Mutt will search for an entry with the
print command:
</para>

<screen>
image/*;        xv %s
image/gif;      ; print= anytopnm %s | pnmtops | lpr; &bsol;
                nametemplate=%s.gif
</screen>

<para>
Mutt will skip the <literal>image/*</literal> entry and use the <literal>image/gif</literal>
entry with the print command.
</para>

<para>
In addition, you can use this with <link linkend="auto-view">auto&lowbar;view</link>
to denote two commands for viewing an attachment, one to be viewed
automatically, the other to be viewed interactively from the attachment
menu.  In addition, you can then use the test feature to determine which
viewer to use interactively depending on your environment.
</para>

<screen>
text/html;      netscape -remote 'openURL(%s)' ; test=RunningX
text/html;      lynx %s; nametemplate=%s.html
text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput
</screen>

<para>
For <link linkend="auto-view">auto&lowbar;view</link>, Mutt will choose the third
entry because of the copiousoutput tag.  For interactive viewing, Mutt
will run the program RunningX to determine if it should use the first
entry.  If the program returns non-zero, Mutt will use the second entry
for interactive viewing.
</para>

</sect3>

<sect3 id="mailcap-command-expansion">
<title>Command Expansion</title>

<para>
The various commands defined in the mailcap files are passed to the
<literal>/bin/sh</literal> shell using the system() function.  Before the
command is passed to <literal>/bin/sh -c</literal>, it is parsed to expand
various special parameters with information from Mutt.  The keywords
Mutt expands are:
</para>

<variablelist>

<varlistentry>
<term>&percnt;s</term>
<listitem>
<para>
As seen in the basic mailcap section, this variable is expanded
to a filename specified by the calling program.  This file contains
the body of the message to view/print/edit or where the composing
program should place the results of composition.  In addition, the
use of this keyword causes Mutt to not pass the body of the message
to the view/print/edit program on stdin.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&percnt;t</term>
<listitem>
<para>
Mutt will expand &percnt;t to the text representation of the content
type of the message in the same form as the first parameter of the
mailcap definition line, ie <literal>text/html</literal> or
<literal>image/gif</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&percnt;&lcub;&lt;parameter&gt;&rcub;</term>
<listitem>
<para>
Mutt will expand this to the value of the specified parameter
from the Content-Type: line of the mail message.  For instance, if
Your mail message contains:
</para>

<screen>
Content-Type: text/plain; charset=iso-8859-1
</screen>

<para>
then Mutt will expand &percnt;&lcub;charset&rcub; to iso-8859-1.  The default metamail
mailcap file uses this feature to test the charset to spawn an xterm
using the right charset to view the message.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&bsol;&percnt;</term>
<listitem>
<para>
This will be replaced by a &percnt;
</para>
</listitem>
</varlistentry>
</variablelist>

<para>
Mutt does not currently support the &percnt;F and &percnt;n keywords
specified in RFC 1524.  The main purpose of these parameters is for
multipart messages, which is handled internally by Mutt.
</para>

</sect3>

</sect2>

<sect2 id="mailcap-example">
<title>Example mailcap files</title>

<para>
This mailcap file is fairly simple and standard:
</para>

<screen>
# I'm always running X :)
video/*;        xanim %s &gt; /dev/null
image/*;        xv %s &gt; /dev/null

# I'm always running netscape (if my computer had more memory, maybe)
text/html;      netscape -remote 'openURL(%s)'
</screen>

<para>
This mailcap file shows quite a number of examples:
</para>

<screen>
# Use xanim to view all videos   Xanim produces a header on startup,
# send that to /dev/null so I don't see it
video/*;        xanim %s &gt; /dev/null

# Send html to a running netscape by remote
text/html;      netscape -remote 'openURL(%s)'; test=RunningNetscape

# If I'm not running netscape but I am running X, start netscape on the
# object
text/html;      netscape %s; test=RunningX

# Else use lynx to view it as text
text/html;      lynx %s

# This version would convert the text/html to text/plain
text/html;      lynx -dump %s; copiousoutput

# I use enscript to print text in two columns to a page
text/*;         more %s; print=enscript -2Gr %s

# Netscape adds a flag to tell itself to view jpegs internally
image/jpeg;xv %s; x-mozilla-flags=internal

# Use xv to view images if I'm running X
# In addition, this uses the \ to extend the line and set my editor
# for images
image/*;xv %s; test=RunningX; &bsol;
        edit=xpaint %s

# Convert images to text using the netpbm tools
image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
pbmtoascii -1x2 ) 2&gt;&amp;1 ; copiousoutput

# Send excel spreadsheets to my NT box
application/ms-excel; open.pl %s
</screen>

</sect2>

</sect1>

<sect1 id="auto-view">
<title>MIME Autoview</title>

<para>
In addition to explicitly telling Mutt to view an attachment with the
MIME viewer defined in the mailcap file, Mutt has support for
automatically viewing MIME attachments while in the pager.
</para>

<para>
To work, you must define a viewer in the mailcap file which uses the
<literal>copiousoutput</literal> option to denote that it is non-interactive.
Usually, you also use the entry to convert the attachment to a text
representation which you can view in the pager.
</para>

<para>
You then use the <literal>auto&lowbar;view</literal> muttrc command to list the
content-types that you wish to view automatically.
</para>

<para>
For instance, if you set auto&lowbar;view to:
</para>

<screen>
auto_view text/html application/x-gunzip &bsol;
  application/postscript image/gif application/x-tar-gz
</screen>

<para>
Mutt could use the following mailcap entries to automatically view
attachments of these types.
</para>

<screen>
text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | &bsol;
                pgmtopbm | pbmtoascii ; copiousoutput
application/x-gunzip;   gzcat; copiousoutput
application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
application/postscript; ps2ascii %s; copiousoutput
</screen>

<para>
<quote>unauto&lowbar;view</quote> can be used to remove previous entries from the autoview list.
This can be used with message-hook to autoview messages based on size, etc.
<quote>unauto&lowbar;view *</quote> will remove all previous entries.
</para>

</sect1>

<sect1 id="alternative-order">
<title>MIME Multipart/Alternative</title>

<para>
Mutt has some heuristics for determining which attachment of a
multipart/alternative type to display.  First, mutt will check the
alternative&lowbar;order list to determine if one of the available types
is preferred.  The alternative&lowbar;order list consists of a number of
mimetypes in order, including support for implicit and explicit
wildcards, for example:
</para>

<screen>
alternative_order text/enriched text/plain text application/postscript image/*
</screen>

<para>
Next, mutt will check if any of the types have a defined
<link linkend="auto-view">auto&lowbar;view</link>, and use that.  Failing
that, Mutt will look for any text type.  As a last attempt, mutt will
look for any type it knows how to handle.
</para>

<para>
To remove a MIME type from the <literal>alternative&lowbar;order</literal> list, use the
<literal>unalternative&lowbar;order</literal> command.
</para>

</sect1>

<sect1 id="attachments">
<title>Attachment Searching and Counting</title>

<para>
If you ever lose track of attachments in your mailboxes, Mutt's
attachment-counting and -searching support might be for you.  You can
make your message index display the number of qualifying attachments in
each message, or search for messages by attachment count.  You also can
configure what kinds of attachments qualify for this feature with the
attachments and unattachments commands.
</para>

<para>
In order to provide this information, mutt needs to fully MIME-parse
all messages affected first. This can slow down operation especially for
remote mail folders such as IMAP because all messages have to be
downloaded first regardless whether the user really wants to view them
or not.
</para>

<para>
The syntax is:
</para>

<screen>
attachments   {+|-}disposition mime-type
unattachments {+|-}disposition mime-type
attachments   ?
</screen>

<para>
Disposition is the attachment's Content-disposition type -- either
<literal>inline</literal> or <literal>attachment</literal>.
You can abbreviate this to <literal>I</literal> or <literal>A</literal>.
</para>

<para>
Disposition is prefixed by either a + symbol or a - symbol.  If it's
a +, you're saying that you want to allow this disposition and MIME
type to qualify.  If it's a -, you're saying that this disposition
and MIME type is an exception to previous + rules.  There are examples
below of how this is useful.
</para>

<para>
Mime-type is, unsurprisingly, the MIME type of the attachment you want
to affect.  A MIME type is always of the format <literal>major/minor</literal>, where
<literal>major</literal> describes the broad category of document you're looking at, and
<literal>minor</literal> describes the specific type within that category.  The major
part of mime-type must be literal text (or the special token <quote><literal>*</literal></quote>), but
the minor part may be a regular expression.  (Therefore, <quote><literal>*/.*</literal></quote> matches
any MIME type.)
</para>

<para>
The MIME types you give to the attachments directive are a kind of
pattern.  When you use the attachments directive, the patterns you
specify are added to a list.  When you use unattachments, the pattern
is removed from the list.  The patterns are not expanded and matched
to specific MIME types at this time -- they're just text in a list.
They're only matched when actually evaluating a message.
</para>

<para>
Some examples might help to illustrate.  The examples that are not
commented out define the default configuration of the lists.
</para>

<example id="ex-attach-count">
<title>Attachment counting</title>
<screen>
## Removing a pattern from a list removes that pattern literally. It
## does not remove any type matching the pattern.
##
##  attachments   +A */.*
##  attachments   +A image/jpeg
##  unattachments +A */.*
##
## This leaves "attached" image/jpeg files on the allowed attachments
## list. It does not remove all items, as you might expect, because the
## second */.* is not a matching expression at this time.
##
## Remember: "unattachments" only undoes what "attachments" has done!
## It does not trigger any matching on actual messages.


## Qualify any MIME part with an "attachment" disposition, EXCEPT for
## text/x-vcard and application/pgp parts. (PGP parts are already known
## to mutt, and can be searched for with ~g, ~G, and ~k.)
##
## I've added x-pkcs7 to this, since it functions (for S/MIME)
## analogously to PGP signature attachments. S/MIME isn't supported
## in a stock mutt build, but we can still treat it specially here.
##
attachments   +A */.*
attachments   -A text/x-vcard application/pgp.*
attachments   -A application/x-pkcs7-.*

## Discount all MIME parts with an "inline" disposition, unless they're
## text/plain. (Why inline a text/plain part unless it's external to the
## message flow?)
##
attachments   +I text/plain

## These two lines make Mutt qualify MIME containers.  (So, for example,
## a message/rfc822 forward will count as an attachment.)  The first
## line is unnecessary if you already have "attach-allow */.*", of
## course.  These are off by default!  The MIME elements contained
## within a message/* or multipart/* are still examined, even if the
## containers themseves don't qualify.
##
#attachments  +A message/.* multipart/.*
#attachments  +I message/.* multipart/.*

## You probably don't really care to know about deleted attachments.
attachments   -A message/external-body
attachments   -I message/external-body
</screen>
</example>

<para>
Entering the command <quote><literal>attachments ?</literal></quote>
as a command will list your current settings in Muttrc format, so that
it can be pasted elsewhere.
</para>

</sect1>

<sect1 id="mime-lookup">
<title>MIME Lookup</title>

<para>
Mutt's mime&lowbar;lookup list specifies a list of mime-types that should not
be treated according to their mailcap entry.  This option is designed to
deal with binary types such as application/octet-stream.  When an attachment's
mime-type is listed in mime&lowbar;lookup, then the extension of the filename will
be compared to the list of extensions in the mime.types file.  The mime-type
associated with this extension will then be used to process the attachment
according to the rules in the mailcap file and according to any other configuration
options (such as auto&lowbar;view) specified.  Common usage would be:
</para>

<screen>
mime_lookup application/octet-stream application/X-Lotus-Manuscript
</screen>

<para>
In addition, the unmime&lowbar;lookup command may be used to disable this feature
for any particular mime-type if it had been set, for example, in a global
muttrc.
</para>

</sect1>

</chapter>

<chapter id="optionalfeatures">
<title>Optional features</title>

<sect1 id="optionalfeatures-notes">
<title>General notes</title>

<sect2 id="compile-time-features">
<title>Enabling/disabling features</title>

<para>
Mutt supports several of optional features which can be enabled or
disabled at compile-time by giving the <emphasis>configure</emphasis> script
certain arguments. These are listed in the <quote>Optional features</quote> section of
the <emphasis>configure --help</emphasis> output.
</para>

<para>
Which features are enabled or disabled can later be determined from the
output of <literal>mutt -v</literal>. If a compile option starts with
<quote>+</quote> it is enabled and disabled if prefixed with <quote>-</quote>. For example, if
mutt was compiled using GnuTLS for encrypted communication instead of
OpenSSL, <literal>mutt -v</literal> would contain:
</para>

<screen>
-USE_SSL_OPENSSL +USE_SSL_GNUTLS</screen>

</sect2>

<sect2 id="url-syntax">
<title>URL syntax</title>

<para>
Mutt optionally supports the IMAP, POP3 and SMTP protocols which require
to access servers using URLs. The canonical syntax for specifying URLs
in mutt is (an item enclosed in <literal>[]</literal> means it is optional and
may be omitted):
</para>

<screen>
proto[s]://[username[:password]@]server[:port]/[path]
</screen>

<para>
<literal>proto</literal> is the communication protocol:
<literal>imap</literal> for IMAP, <literal>pop</literal> for POP3 and
<literal>smtp</literal> for SMTP. If <quote>s</quote> for <quote>secure communication</quote>
is appended, mutt will attempt to establish an encrypted communication
using SSL or TLS. If no explicit port is given, mutt will use the
system's default for the given protocol.
</para>

<para>
Since all protocols by mutt support authentication, the username may be
given directly in the URL instead of using the <literal>pop_user</literal> or
<literal>imap_user</literal> variables. It may contain the <quote>@</quote> symbol
being used by many mail systems as part of the login name. A password can be
given, too but is not recommended if the URL is specified in a configuration
file on disk.
</para>

<para>
The optional path is only relevant for IMAP.
</para>

<para>
For IMAP for example, you can select an alternative port by specifying it with the
server: <literal>imap://imapserver:port/INBOX</literal>. You can also specify different
username for each folder: <literal>imap://username@imapserver[:port]/INBOX</literal>
or <literal>imap://username2@imapserver[:port]/path/to/folder</literal>.
Replacing <literal>imap://</literal> by <literal>imaps://</literal>
would make mutt attempt to connect using SSL or TLS on a different port
to encrypt the communication.
</para>

</sect2>

</sect1>

<sect1 id="ssl">
<title>SSL/TLS Support</title>

<para>
If mutt is compiled with IMAP, POP3 and/or SMTP support, it can also be
compiled with support for SSL or TLS using either OpenSSL or GnuTLS (
by running the <emphasis>configure</emphasis> script with the
<emphasis>--enable-ssl=...</emphasis> option for OpenSSL or
<emphasis>--enable-gnutls=...</emphasis> for GnuTLS). Mutt can then
attempt to encrypt communication with remote servers if these protocols
are suffixed with <quote>s</quote> for <quote>secure communication</quote>.
</para>

</sect1>

<sect1 id="pop">
<title>POP3 Support</title>

<para>
If Mutt was compiled with POP3 support (by running the <emphasis>configure</emphasis>
script with the <emphasis>--enable-pop</emphasis> flag), it has the ability to work
with mailboxes located on a remote POP3 server and fetch mail for local
browsing.
</para>

<para>
Remote POP3 servers can be accessed using URLs with the <literal>pop</literal> protocol
for unencrypted and <literal>pops</literal> for encrypted
communication, see <xref linkend="url-syntax"/> for details.
</para>

<para>
Polling for new mail is more expensive over POP3 than locally. For this
reason the frequency at which Mutt will check for mail remotely can be
controlled by the
<link linkend="pop-checkinterval">&dollar;pop&lowbar;checkinterval</link>
variable, which defaults to every 60 seconds.
</para>

<anchor id="fetch-mail"/>
<para>
Another way to access your POP3 mail is the <literal>&lt;fetch-mail&dollar;</literal> function
(default: G).  It allows to connect to <link linkend="pop-host">&dollar;pop&lowbar;host</link>, fetch all your new mail and place it in the
local <link linkend="spoolfile">&dollar;spoolfile</link>.  After this
point, Mutt runs exactly as if the mail had always been local.
</para>

<note>
<para>
If you only need to fetch all messages to a
local mailbox you should consider using a specialized program, such as
<literal>fetchmail</literal>, <literal>getmail</literal> or similar.
</para>
</note>

</sect1>

<sect1 id="imap">
<title>IMAP Support</title>

<para>
If Mutt was compiled with IMAP support (by running the <emphasis>configure</emphasis>
script with the <emphasis>--enable-imap</emphasis> flag), it has the ability to work
with folders located on a remote IMAP server.
</para>

<para>
You can access the remote inbox by selecting the folder by its URL
(see <xref linkend="url-syntax"/> for details) using the
<literal>imap</literal> or <literal>imaps</literal> protocol.
Alternatively, a pine-compatible notation is also supported, ie
<literal>&lcub;[username@]imapserver[:port][/ssl]&rcub;path/to/folder</literal>
</para>

<para>
Note that not all servers use <quote>/</quote> as the hierarchy separator.  Mutt should
correctly notice which separator is being used by the server and convert
paths accordingly.
</para>

<para>
When browsing folders on an IMAP server, you can toggle whether to look
at only the folders you are subscribed to, or all folders with the
<emphasis>toggle-subscribed</emphasis> command.  See also the
<link linkend="imap-list-subscribed">&dollar;imap&lowbar;list&lowbar;subscribed</link> variable.
</para>

<para>
Polling for new mail on an IMAP server can cause noticeable delays. So, you'll
want to carefully tune the
<link linkend="mail-check">&dollar;mail&lowbar;check</link>
and
<link linkend="timeout">&dollar;timeout</link>
variables. Personally I use
</para>

<screen>
set mail_check=90
set timeout=15
</screen>

<para>
with relatively good results over my slow modem line.
</para>

<note>
<para>
Note that if you are using mbox as the mail store on UW servers prior to
v12.250, the server has been reported to disconnect a client if another client
selects the same folder.
</para>
</note>

<sect2 id="imap-browser">
<title>The Folder Browser</title>

<para>
As of version 1.2, mutt supports browsing mailboxes on an IMAP
server. This is mostly the same as the local file browser, with the
following differences:
</para>

<itemizedlist>
<listitem>

<para>
In lieu of file permissions, mutt displays the string "IMAP",
possibly followed by the symbol "+", indicating
that the entry contains both messages and subfolders. On
Cyrus-like servers folders will often contain both messages and
subfolders.
</para>
</listitem>
<listitem>

<para>
For the case where an entry can contain both messages and
subfolders, the selection key (bound to <literal>enter</literal> by default)
will choose to descend into the subfolder view. If you wish to view
the messages in that folder, you must use <literal>view-file</literal> instead
(bound to <literal>space</literal> by default).
</para>
</listitem>
<listitem>

<para>
You can create, delete and rename mailboxes with the
<literal>create-mailbox</literal>, <literal>delete-mailbox</literal>, and
<literal>rename-mailbox</literal> commands (default bindings: <literal>C</literal>,
<literal>d</literal> and <literal>r</literal>, respectively). You may also
<literal>subscribe</literal> and <literal>unsubscribe</literal> to mailboxes (normally
these are bound to <literal>s</literal> and <literal>u</literal>, respectively).
</para>
</listitem>

</itemizedlist>

</sect2>

<sect2 id="imap-authentication">
<title>Authentication</title>

<para>
Mutt supports four authentication methods with IMAP servers: SASL,
GSSAPI, CRAM-MD5, and LOGIN (there is a patch by Grant Edwards to add
NTLM authentication for you poor exchange users out there, but it has
yet to be integrated into the main tree). There is also support for
the pseudo-protocol ANONYMOUS, which allows you to log in to a public
IMAP server without having an account. To use ANONYMOUS, simply make
your username blank or "anonymous".
</para>

<para>
SASL is a special super-authenticator, which selects among several protocols
(including GSSAPI, CRAM-MD5, ANONYMOUS, and DIGEST-MD5) the most secure
method available on your host and the server. Using some of these methods
(including DIGEST-MD5 and possibly GSSAPI), your entire session will be
encrypted and invisible to those teeming network snoops. It is the best
option if you have it. To use it, you must have the Cyrus SASL library
installed on your system and compile mutt with the <emphasis>--with-sasl</emphasis> flag.
</para>

<para>
Mutt will try whichever methods are compiled in and available on the server,
in the following order: SASL, ANONYMOUS, GSSAPI, CRAM-MD5, LOGIN.
</para>

<para>
There are a few variables which control authentication:
</para>

<itemizedlist>
<listitem>

<para>
<link linkend="imap-user">&dollar;imap&lowbar;user</link> - controls
the username under which you request authentication on the IMAP server,
for all authenticators. This is overridden by an explicit username in
the mailbox path (ie by using a mailbox name of the form
<literal>&lcub;user@host&rcub;</literal>).
</para>
</listitem>
<listitem>

<para>
<link linkend="imap-pass">&dollar;imap&lowbar;pass</link> - a
password which you may preset, used by all authentication methods where
a password is needed.
</para>
</listitem>
<listitem>

<para>
<link linkend="imap-authenticators">&dollar;imap&lowbar;authenticators</link> - a colon-delimited list of IMAP
authentication methods to try, in the order you wish to try them. If
specified, this overrides mutt's default (attempt everything, in the order
listed above).
</para>
</listitem>

</itemizedlist>

</sect2>

</sect1>

<sect1 id="smtp">
<title>SMTP Support</title>

<para>
Besides supporting traditional mail delivery through a
sendmail-compatible program, mutt supports delivery through SMTP if it
was configured and built with <literal>--enable-smtp</literal>.
</para>

<para>
If the configuration variable
<link linkend="smtp-url">&dollar;smtp&lowbar;url</link> is set, mutt
will contact the given SMTP server to deliver messages; if it is unset,
mutt will use the program specified by <link linkend="sendmail">&dollar;sendmail</link>.
</para>

<para>
For details on the URL syntax, please see <xref linkend="url-syntax"/>.
</para>

<para>
The built-in SMTP support supports encryption (the <literal>smtps</literal> protocol
using SSL or TLS) as well as SMTP authentication using SASL. The authentication mechanisms
for SASL are specified in <link linkend="smtp-authenticators">&dollar;smtp&lowbar;authenticators</link>
defaulting to an empty list which makes mutt try all available methods
from most-secure to least-secure.
</para>

</sect1>

<sect1 id="account-hook">
<title>Managing multiple accounts</title>

<para>
If you happen to have accounts on multiple IMAP, POP and/or SMTP servers,
you may find managing all the authentication settings inconvenient and
error-prone. The account-hook command may help. This hook works like
folder-hook but is invoked whenever you access a remote mailbox
(including inside the folder browser), not just when you open the
mailbox which includes (for example) polling for new mail, storing Fcc
messages and saving messages to a folder. As a consequence,
account-hook should only be used to set connection-related settings such
as passwords or tunnel commands but not settings such as sender
address or name (because in general it should be considered unpredictable
which account-hook was last used).
</para>

<para>
Some examples:
</para>

<screen>
account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
account-hook smtp://user@host3/ 'set tunnel="ssh host3 /usr/libexec/smtpd"'
</screen>

</sect1>

<sect1 id="caching">
<title>Local caching</title>

<para>
Mutt contains two types of local caching: <emphasis>(1)</emphasis>
the so-called <quote>header caching</quote> and <emphasis>(2)</emphasis> the
so-called <quote>body caching</quote> which are both described in this section.
</para>

<para>
Header caching is optional as it depends on external libraries, body
caching is always enabled if mutt is compiled with POP and/or IMAP
support as these use it (body caching requires no external library).
</para>

<sect2 id="header-caching">
<title>Header caching</title>

<para>
Mutt provides optional support for caching message headers for the
following types of folders: IMAP, POP, Maildir and MH. Header caching
greatly improves speed because for remote folders, headers
usually only need to be downloaded once. For Maildir and MH, reading the
headers from a single file is much faster than looking at possibly
thousands of single files (since Maildir and MH use one file per message.)
</para>

<para>
Header caching can be enabled via the configure script and the
<emphasis>--enable-hcache</emphasis> option. It's not turned on
by default because external database libraries are required: one
of tokyocabinet, qdbm, gdbm or bdb must be present.
</para>

<para>
If enabled, <link
linkend="header-cache">&dollar;header&lowbar;cache</link> can be
used to either point to a file or a directory. If set to point to
a file, one database file for all folders will be used (which may
result in lower performance), but one file per folder if it points
to a directory.
</para>

<para>
For the one-file-per-folder case, database files for remote folders
will be named according to their URL while database files for local
folders will be named by the MD5 checksums of their path. These database
files may be safely removed if a system is short on space. You
can compute the name of the header cache file for a particular local folder
through a command like the following:
</para>

<screen>
$ printf '%s' '/path/to/folder' | md5sum
</screen>

<para>
The <literal>md5sum</literal> command may also be
named <literal>md5</literal>, depending on your operating system.
</para>

</sect2>

<sect2 id="body-caching">
<title>Body caching</title>

<para>
Both cache methods can be combined using the same directory for storage
(and for IMAP/POP even provide meaningful file names) which simplifies
manual maintenance tasks.
</para>


<para>
In addition to caching message headers only, mutt can also cache
whole message bodies. This results in faster display of messages
for POP and IMAP folders because messages usually have to be
downloaded only once.
</para>

<para>
For configuration, the variable <link linkend="message-cachedir"
>&dollar;message&lowbar;cachedir</link> must point to a
directory. There, mutt will create a hierarchy of subdirectories
named like: <literal>proto:user@hostname</literal> where
<literal>proto</literal> is either <quote>pop</quote> or <quote>imap.</quote> Within
there for each folder, mutt stores messages in single files (just
like Maildir) so that with manual symlink creation these cache
directories can be examined with mutt as read-only Maildir folders.
</para>

<para>
All files can be removed as needed if the consumed disk space
becomes an issue as mutt will silently fetch missing items again.
</para>

</sect2>

<sect2 id="maint-cache">
<title>Maintenance</title>

<para>
Mutt does not (yet) support maintenance features for header cache
database files so that files have to be removed in case they grow too
big. It depends on the database library used for header caching whether
disk space freed by removing messages is re-used.
</para>

<para>
For body caches, mutt can keep the local cache in sync with the
remote mailbox if the
<link linkend="message-cache-clean">&dollar;message&lowbar;cache&lowbar;clean</link>
variable is set. Cleaning means to remove messages from the cache which
are no longer present in the mailbox which only happens when other mail
clients or instances of mutt using a different body cache location
delete messages (Mutt itself removes deleted messages from the cache
when syncing a mailbox). As cleaning can take a noticeable amount of time,
it should not be set in general but only occasionally.
</para>

</sect2>

</sect1>

<sect1 id="exact-address">
<title>Exact address generation</title>

<para>
Mutt supports the <quote>Name &lt;user@host&gt;</quote> address syntax for reading and
writing messages, the older <quote>user@host (Name)</quote> syntax is only supported when
reading messages. The <emphasis>--enable-exact-address</emphasis>
switch can be given to configure to build it with write-support
for the latter syntax. <literal>EXACT_ADDRESS</literal> in the output of
<literal>mutt -v</literal> indicates whether it's supported.
</para>

</sect1>

</chapter>

<chapter id="tuning">
<title>Performance tuning</title>

<sect1 id="tuning-mailboxes">
<title>Reading and writing mailboxes</title>

<para>
Mutt's performance when reading mailboxes can be improved in two ways:
</para>

<orderedlist>

<listitem>
<para>
For remote folders (IMAP and POP) as well as folders using
one-file-per message storage (Maildir and MH), mutt's
performance can be greatly improved using
<link linkend="header-caching">header caching</link>.
Using a single database per folder may further increase
performance.
</para>
</listitem>

<listitem>
<para>
Mutt provides the <link linkend="read-inc">&dollar;read&lowbar;inc</link>
and <link linkend="write-inc">&dollar;write&lowbar;inc</link>
variables to specify at which rate to update progress
counters. If these values are too low, mutt may spend more
time on updating the progress counter than it spends on
actually reading/writing folders.
</para>
<para>
For example, when opening a maildir folder with a few
thousand messages, the default value for
<link linkend="read-inc">&dollar;read&lowbar;inc</link>
may be too low. It can be tuned on on a folder-basis using
<link linkend="folder-hook">folder-hooks</link>:
</para>

<screen>
# use very high $read_inc to speed up reading hcache'd maildirs
folder-hook . 'set read_inc=1000'
# use lower value for reading slower remote IMAP folders
folder-hook ^imap 'set read_inc=100'
# use even lower value for reading even slower remote POP folders
folder-hook ^pop 'set read_inc=1'</screen>

</listitem>
</orderedlist>

<para>These settings work on a per-message basis. However, as messages may
greatly differ in size and certain operations are much faster than others,
even per-folder settings of the increment variables may not be
desirable as they produce either too few or too much progress updates.
Thus, Mutt allows to limit the number of progress updates per second it'll
actually send to the terminal using the
<link linkend="time-inc">&dollar;time&lowbar;inc</link> variable.</para>

</sect1>

<sect1 id="tuning-messages">
<title>Reading messages from remote folders</title>

<para>
Reading messages from remote folders such as IMAP an POP can be
slow especially for large mailboxes since mutt only caches a very
limited number of recently viewed messages (usually 10) per
session (so that it will be gone for the next session.)
</para>

<para>
To improve performance and permanently cache whole messages,
please refer to mutt's so-called
<link linkend="body-caching">body caching</link> for details.
</para>

</sect1>

<sect1 id="tuning-search">
<title>Searching and limiting</title>

<para>
When searching mailboxes either via a search or a limit action, for
some patterns mutt distinguishes between regular expression and string
searches. For regular expressions, patterns are prefixed with
<quote>&tilde;</quote> and with <quote>=</quote> for string searches.
</para>

<para>
Even though a regular expression search is fast, it's several times
slower than a pure string search which is noticeable especially on large
folders. As a consequence, a string search should be used instead of a
regular expression search if the user already knows enough about the
search pattern.
</para>

<para>
For example, when limiting a large folder to all messages sent to or by
an author, it's much faster to search for the initial part of an e-mail
address via <literal>=Luser@</literal> instead of
<literal>&tilde;Luser@</literal>. This is especially true for searching
message bodies since a larger amount of input has to be searched.
</para>

<para>
Please note that string search is an exact case-sensitive search
while a regular expression search with only lower-case letters performs
a case-insensitive search.
</para>

</sect1>

</chapter>

<chapter id="reference">
<title>Reference</title>

<sect1 id="commandline">
<title>Command line options</title>

<para>
Running <literal>mutt</literal> with no arguments will make Mutt attempt to read your spool
mailbox.  However, it is possible to read other mailboxes and
to send messages from the command line as well.
</para>

<table id="tab-commandline-options">
<title>Command line options</title>
<tgroup cols="2">
<thead>
<row><entry>Option</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry>-A</entry><entry>expand an alias</entry></row>
<row><entry>-a</entry><entry>attach a file to a message</entry></row>
<row><entry>-b</entry><entry>specify a blind carbon-copy (BCC) address</entry></row>
<row><entry>-c</entry><entry>specify a carbon-copy (Cc) address</entry></row>
<row><entry>-D</entry><entry>print the value of all mutt variables to stdout</entry></row>
<row><entry>-e</entry><entry>specify a config command to be run after initialization files are read</entry></row>
<row><entry>-f</entry><entry>specify a mailbox to load</entry></row>
<row><entry>-F</entry><entry>specify an alternate file to read initialization commands</entry></row>
<row><entry>-h</entry><entry>print help on command line options</entry></row>
<row><entry>-H</entry><entry>specify a draft file from which to read a header and body</entry></row>
<row><entry>-i</entry><entry>specify a file to include in a message composition</entry></row>
<row><entry>-m</entry><entry>specify a default mailbox type</entry></row>
<row><entry>-n</entry><entry>do not read the system Muttrc</entry></row>
<row><entry>-p</entry><entry>recall a postponed message</entry></row>
<row><entry>-Q</entry><entry>query a configuration variable</entry></row>
<row><entry>-R</entry><entry>open mailbox in read-only mode</entry></row>
<row><entry>-s</entry><entry>specify a subject (enclose in quotes if it contains spaces)</entry></row>
<row><entry>-v</entry><entry>show version number and compile-time definitions</entry></row>
<row><entry>-x</entry><entry>simulate the mailx(1) compose mode</entry></row>
<row><entry>-y</entry><entry>show a menu containing the files specified by the mailboxes command</entry></row>
<row><entry>-z</entry><entry>exit immediately if there are no messages in the mailbox</entry></row>
<row><entry>-Z</entry><entry>open the first folder with new message,exit immediately if none</entry></row>
</tbody>
</tgroup>
</table>

<para>
To read messages in a mailbox
</para>

<cmdsynopsis>
<command>mutt</command>
<arg choice="opt"><option>-nz</option></arg>
<arg choice="opt"><option>-F</option>
<replaceable>muttrc</replaceable>
</arg>
<arg choice="opt"><option>-m</option>
<replaceable>type</replaceable>
</arg>
<arg choice="opt"><option>-f</option>
<replaceable>mailbox</replaceable>
</arg>
</cmdsynopsis>

<para>
To compose a new message
</para>

<cmdsynopsis>
<command>mutt</command>
<arg choice="opt"><option>-n</option></arg>
<arg choice="opt"><option>-F</option>
<replaceable>muttrc</replaceable>
</arg>
<arg choice="opt"><option>-c</option>
<replaceable>address</replaceable>
</arg>
<arg choice="opt"><option>-i</option>
<replaceable>filename</replaceable>
</arg>
<arg choice="opt"><option>-s</option>
<replaceable>subject</replaceable>
</arg>
<arg choice="opt">
<option>-a</option>
<replaceable>file</replaceable>
<arg choice="opt" rep="repeat"/>
--
</arg>
<arg choice="plain" rep="repeat">
<replaceable>address</replaceable>
</arg>
</cmdsynopsis>

<para>
Mutt also supports a <quote>batch</quote> mode to send prepared messages.  Simply redirect
input from the file you wish to send.  For example,
</para>

<para>
<literal>mutt -s &quot;data set for run &num;2&quot; professor@bigschool.edu
&lt; &tilde;/run2.dat</literal>
</para>

<para>
This command will send a message to <quote>professor@bigschool.edu</quote> with a subject
of <quote>data set for run &num;2</quote>.  In the body of the message will be the contents
of the file <quote>&tilde;/run2.dat</quote>.
</para>

<para>
All files passed with -a <emphasis>file</emphasis> will be attached as a MIME
part to the message. To attach several files, use <quote>--</quote> to separate files and
recipient addresses: <literal>mutt -a *.png -- some@one.org</literal>
</para>

</sect1>

<sect1 id="commands">
<title>Configuration Commands</title>

<para>
The following are the commands understood by mutt.
</para>

<itemizedlist>

<listitem>
<cmdsynopsis>
<command><link linkend="account-hook">account-hook</link></command>
<arg choice="plain">
<replaceable>pattern</replaceable>
<replaceable>command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alias">alias</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">address</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">address</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alias">unalias</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">key</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternates">alternates</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<arg choice="plain">
<replaceable>regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternates">unalternates</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternative-order">alternative-order</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="alternative-order">unalternative-order</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="auto-view">auto-view</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</cmdsynopsis>
</listitem>
<listitem>

<cmdsynopsis>
<command><link linkend="auto-view">unauto-view</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="bind">bind</link></command>
<arg choice="plain">
<replaceable class="parameter">map</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="charset-hook">charset-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">alias</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="charset-hook">iconv-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">charset</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">local-charset</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="color">color</link></command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
</cmdsynopsis>
<cmdsynopsis>
<command><link linkend="color">color</link></command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>
<cmdsynopsis>
<command><link linkend="color">color</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">foreground</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">background</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="color">uncolor</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="exec">exec</link></command>
<arg choice="plain">
<replaceable class="parameter">function</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">function</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="fcc-hook">fcc-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="fcc-save-hook">fcc-save-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="folder-hook">folder-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;regexp</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="addrgroup">group</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="addrgroup">ungroup</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-rx</option>
<replaceable class="parameter">expr</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<option>-addr</option>
<replaceable class="parameter">expr</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="hdr-order">hdr&lowbar;order</link></command>
<arg choice="plain">
<replaceable class="parameter">header</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">header</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="hdr-order">unhdr&lowbar;order</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>header</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="ignore">ignore</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="ignore">unignore</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="lists">lists</link></command>
<arg>
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="lists">unlists</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="macro">macro</link></command>
<arg choice="plain">
<replaceable class="parameter">menu</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">key</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">sequence</replaceable>
</arg>
<arg choice="opt">
<replaceable class="parameter">description</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mailboxes">mailboxes</link></command>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mailboxes">unmailboxes</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mbox-hook">mbox-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="message-hook">message-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mime-lookup">mime-lookup</link></command>
<arg choice="plain">
<replaceable>mimetype</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mime-lookup">unmime-lookup</link></command>
<group choice="req">
<arg choice="plain">
<replaceable>*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable>mimetype</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<replaceable class="parameter">object</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
</cmdsynopsis>
<cmdsynopsis>
<command><link linkend="mono">mono</link></command>
<group choice="req">
<arg choice="plain">
<option>header</option>
</arg>
<arg choice="plain">
<option>body</option>
</arg>
</group>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>
<cmdsynopsis>
<command><link linkend="mono">mono</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<arg choice="plain">
<replaceable class="parameter">attribute</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="mono">unmono</link></command>
<arg choice="plain">
<option>index</option>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="my-hdr">my&lowbar;hdr</link></command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="my-hdr">unmy&lowbar;hdr</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">field</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="crypt-hook">crypt-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">keyid</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="push">push</link></command>
<arg choice="plain">
<replaceable class="parameter">string</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="set">reset</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="save-hook">save-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">mailbox</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="score">score</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">value</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="score">unscore</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="reply-hook">reply-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="send-hook">send-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="send2-hook">send2-hook</link></command>
<arg choice="plain">
<replaceable class="parameter">&lsqb;!&rsqb;pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">command</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="set">set</link></command>
<group choice="req">
<arg choice="plain">
<group choice="opt">
<arg choice="plain"><option>no</option></arg>
<arg choice="plain"><option>inv</option></arg>
</group>
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">variable=value</replaceable>
</arg>
</group>
<arg choice="opt" rep="repeat"/>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="set">unset</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="source">source</link></command>
<arg choice="plain">
<replaceable class="parameter">filename</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="spam">spam</link></command>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">format</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="spam">nospam</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">pattern</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="subscribe">subscribe</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable class="parameter">name</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">regexp</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="subscribe">unsubscribe</link></command>
<arg choice="opt" rep="repeat">
<option>-group</option>
<replaceable>name</replaceable>
</arg>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain" rep="repeat">
<replaceable class="parameter">regexp</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="set">toggle</link></command>
<arg choice="plain">
<replaceable class="parameter">variable</replaceable>
</arg>
<arg choice="opt" rep="repeat">
<replaceable class="parameter">variable</replaceable>
</arg>
</cmdsynopsis>
</listitem>

<listitem>
<cmdsynopsis>
<command><link linkend="unhook">unhook</link></command>
<group choice="req">
<arg choice="plain">
<replaceable class="parameter">*</replaceable>
</arg>
<arg choice="plain">
<replaceable class="parameter">hook-type</replaceable>
</arg>
</group>
</cmdsynopsis>
</listitem>

</itemizedlist>

</sect1>

<sect1 id="variables">
<title>Configuration variables</title>

<sect2 id="abort-nosubject">
<title>abort&lowbar;nosubject</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
If set to <emphasis>yes</emphasis>, when composing messages and no subject is given
at the subject prompt, composition will be aborted.  If set to
<emphasis>no</emphasis>, composing messages with no subject given at the subject
prompt will never be aborted.
</para>
</sect2>

<sect2 id="abort-unmodified">
<title>abort&lowbar;unmodified</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
If set to <emphasis>yes</emphasis>, composition will automatically abort after
editing the message body if no changes are made to the file (this
check only happens after the <emphasis>first</emphasis> edit of the file).  When set
to <emphasis>no</emphasis>, composition will never be aborted.
</para>
</sect2>

<sect2 id="alias-file">
<title>alias&lowbar;file</title>
<literallayout>Type: path
Default: <quote><literal>&tilde;/.muttrc</literal></quote></literallayout>

<para>
The default file in which to save aliases created by the
<literal><link linkend="create-alias">&lt;create-alias&gt;</link></literal> function. Entries added to this file are
encoded in the character set specified by <link linkend="config-charset">&dollar;config&lowbar;charset</link> if it
is <emphasis>set</emphasis> or the current character set otherwise.
</para>
<para>
<emphasis role="bold">Note:</emphasis> Mutt will not automatically source this file; you must
explicitly use the <quote><link linkend="source">source</link></quote> command for it to be executed in case
this option points to a dedicated alias file.
</para>
<para>
The default for this option is the currently used muttrc file, or
<quote>&tilde;/.muttrc</quote> if no user muttrc was found.
</para>
</sect2>

<sect2 id="alias-format">
<title>alias&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&percnt;4n &percnt;2f &percnt;t &percnt;-10a   &percnt;r</literal></quote></literallayout>

<para>
Specifies the format of the data displayed for the <quote><link linkend="alias">alias</link></quote> menu.  The
following <literal>printf(3)</literal>-style sequences are available:

</para>

<variablelist>
<varlistentry><term>&percnt;a </term>
<listitem><para>alias name
</para></listitem></varlistentry>
<varlistentry><term>&percnt;f </term>
<listitem><para>flags - currently, a <quote>d</quote> for an alias marked for deletion
</para></listitem></varlistentry>
<varlistentry><term>&percnt;n </term>
<listitem><para>index number
</para></listitem></varlistentry>
<varlistentry><term>&percnt;r </term>
<listitem><para>address which alias expands to
</para></listitem></varlistentry>
<varlistentry><term>&percnt;t </term>
<listitem><para>character which indicates if the alias is tagged for inclusion
</para></listitem></varlistentry></variablelist>
</sect2>

<sect2 id="allow-8bit">
<title>allow&lowbar;8bit</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether 8-bit data is converted to 7-bit using either Quoted-
Printable or Base64 encoding when sending mail.
</para>
</sect2>

<sect2 id="allow-ansi">
<title>allow&lowbar;ansi</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls whether ANSI color codes in messages (and color tags in
rich text messages) are to be interpreted.
Messages containing these codes are rare, but if this option is <emphasis>set</emphasis>,
their text will be colored accordingly. Note that this may override
your color choices, and even present a security problem, since a
message could include a line like

</para>

<screen>
[-- PGP output follows ...

</screen><para>
and give it the same color as your attachment color (see also
<link linkend="crypt-timestamp">&dollar;crypt&lowbar;timestamp</link>).
</para>
</sect2>

<sect2 id="arrow-cursor">
<title>arrow&lowbar;cursor</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, an arrow (<quote>-&gt;</quote>) will be used to indicate the current entry
in menus instead of highlighting the whole line.  On slow network or modem
links this will make response faster because there is less that has to
be redrawn on the screen when moving to the next or previous entries
in the menu.
</para>
</sect2>

<sect2 id="ascii-chars">
<title>ascii&lowbar;chars</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will use plain ASCII characters when displaying thread
and attachment trees, instead of the default <emphasis>ACS</emphasis> characters.
</para>
</sect2>

<sect2 id="askbcc">
<title>askbcc</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will prompt you for blind-carbon-copy (Bcc) recipients
before editing an outgoing message.
</para>
</sect2>

<sect2 id="askcc">
<title>askcc</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will prompt you for carbon-copy (Cc) recipients before
editing the body of an outgoing message.
</para>
</sect2>

<sect2 id="assumed-charset">
<title>assumed&lowbar;charset</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable is a colon-separated list of character encoding
schemes for messages without character encoding indication.
Header field values and message body content without character encoding
indication would be assumed that they are written in one of this list.
By default, all the header fields and message body without any charset
indication are assumed to be in <quote>us-ascii</quote>.
</para>
<para>
For example, Japanese users might prefer this:

</para>

<screen>
set assumed_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"

</screen><para>
However, only the first content is valid for the message body.
</para>
</sect2>

<sect2 id="attach-charset">
<title>attach&lowbar;charset</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable is a colon-separated list of character encoding
schemes for text file attachments. Mutt uses this setting to guess
which encoding files being attached are encoded in to convert them to
a proper character set given in <link linkend="send-charset">&dollar;send&lowbar;charset</link>.
</para>
<para>
If <emphasis>unset</emphasis>, the value of <link linkend="charset">&dollar;charset</link> will be used instead.
For example, the following configuration would work for Japanese
text handling:

</para>

<screen>
set attach_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"

</screen><para>
Note: for Japanese users, <quote>iso-2022-*</quote> must be put at the head
of the value as shown above if included.
</para>
</sect2>

<sect2 id="attach-format">
<title>attach&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&percnt;u&percnt;D&percnt;I &percnt;t&percnt;4n &percnt;T&percnt;.40d&percnt;&gt; &lsqb;&percnt;.7m/&percnt;.10M, &percnt;.6e&percnt;?C?, &percnt;C?, &percnt;s&rsqb; </literal></quote></literallayout>

<para>
This variable describes the format of the <quote>attachment</quote> menu.  The
following <literal>printf(3)</literal>-style sequences are understood:

</para>

<variablelist>
<varlistentry><term>&percnt;C  </term>
<listitem><para>charset
</para></listitem></varlistentry>
<varlistentry><term>&percnt;c  </term>
<listitem><para>requires charset conversion (<quote>n</quote> or <quote>c</quote>)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;D  </term>
<listitem><para>deleted flag
</para></listitem></varlistentry>
<varlistentry><term>&percnt;d  </term>
<listitem><para>description
</para></listitem></varlistentry>
<varlistentry><term>&percnt;e  </term>
<listitem><para>MIME content-transfer-encoding
</para></listitem></varlistentry>
<varlistentry><term>&percnt;f  </term>
<listitem><para>filename
</para></listitem></varlistentry>
<varlistentry><term>&percnt;I  </term>
<listitem><para>disposition (<quote>I</quote> for inline, <quote>A</quote> for attachment)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;m  </term>
<listitem><para>major MIME type
</para></listitem></varlistentry>
<varlistentry><term>&percnt;M  </term>
<listitem><para>MIME subtype
</para></listitem></varlistentry>
<varlistentry><term>&percnt;n  </term>
<listitem><para>attachment number
</para></listitem></varlistentry>
<varlistentry><term>&percnt;Q  </term>
<listitem><para><quote>Q</quote>, if MIME part qualifies for attachment counting
</para></listitem></varlistentry>
<varlistentry><term>&percnt;s  </term>
<listitem><para>size
</para></listitem></varlistentry>
<varlistentry><term>&percnt;t  </term>
<listitem><para>tagged flag
</para></listitem></varlistentry>
<varlistentry><term>&percnt;T  </term>
<listitem><para>graphic tree characters
</para></listitem></varlistentry>
<varlistentry><term>&percnt;u  </term>
<listitem><para>unlink (=to delete) flag
</para></listitem></varlistentry>
<varlistentry><term>&percnt;X  </term>
<listitem><para>number of qualifying MIME parts in this part and its children
(please see the <quote><link linkend="attachments">attachments</link></quote> section for possible speed effects)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&gt;X </term>
<listitem><para>right justify the rest of the string and pad with character <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&verbar;X </term>
<listitem><para>pad to the end of the line with character <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;*X </term>
<listitem><para>soft-fill with character <quote>X</quote> as pad
</para></listitem></varlistentry></variablelist>

<para>
For an explanation of <quote>soft-fill</quote>, see the <link linkend="index-format">&dollar;index&lowbar;format</link> documentation.
</para>
</sect2>

<sect2 id="attach-sep">
<title>attach&lowbar;sep</title>
<literallayout>Type: string
Default: <quote><literal>&bsol;n</literal></quote></literallayout>

<para>
The separator to add between attachments when operating (saving,
printing, piping, etc) on a list of tagged attachments.
</para>
</sect2>

<sect2 id="attach-split">
<title>attach&lowbar;split</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If this variable is <emphasis>unset</emphasis>, when operating (saving, printing, piping,
etc) on a list of tagged attachments, Mutt will concatenate the
attachments and will operate on them as a single attachment. The
<link linkend="attach-sep">&dollar;attach&lowbar;sep</link> separator is added after each attachment. When <emphasis>set</emphasis>,
Mutt will operate on the attachments one by one.
</para>
</sect2>

<sect2 id="attribution">
<title>attribution</title>
<literallayout>Type: string
Default: <quote><literal>On &percnt;d, &percnt;n wrote:</literal></quote></literallayout>

<para>
This is the string that will precede a message which has been included
in a reply.  For a full listing of defined <literal>printf(3)</literal>-like sequences see
the section on <link linkend="index-format">&dollar;index&lowbar;format</link>.
</para>
</sect2>

<sect2 id="autoedit">
<title>autoedit</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis> along with <link linkend="edit-headers">&dollar;edit&lowbar;headers</link>, Mutt will skip the initial
send-menu (prompting for subject and recipients) and allow you to
immediately begin editing the body of your
message.  The send-menu may still be accessed once you have finished
editing the body of your message.
</para>
<para>
Also see <link linkend="fast-reply">&dollar;fast&lowbar;reply</link>.
</para>
</sect2>

<sect2 id="auto-tag">
<title>auto&lowbar;tag</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, functions in the <emphasis>index</emphasis> menu which affect a message
will be applied to all tagged messages (if there are any).  When
unset, you must first use the <literal>&lt;tag-prefix&gt;</literal> function (bound to <quote>;</quote>
by default) to make the next function apply to all tagged messages.
</para>
</sect2>

<sect2 id="beep">
<title>beep</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will beep when an error occurs.
</para>
</sect2>

<sect2 id="beep-new">
<title>beep&lowbar;new</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will beep whenever it prints a message
notifying you of new mail.  This is independent of the setting of the
<link linkend="beep">&dollar;beep</link> variable.
</para>
</sect2>

<sect2 id="bounce">
<title>bounce</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether you will be asked to confirm bouncing messages.
If set to <emphasis>yes</emphasis> you don't get asked if you want to bounce a
message. Setting this variable to <emphasis>no</emphasis> is not generally useful,
and thus not recommended, because you are unable to bounce messages.
</para>
</sect2>

<sect2 id="bounce-delivered">
<title>bounce&lowbar;delivered</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will include Delivered-To headers when
bouncing messages.  Postfix users may wish to <emphasis>unset</emphasis> this variable.
</para>
<para>
<emphasis role="bold">Note:</emphasis> On Debian systems, this option is unset by default in
/etc/Muttrc.
</para>
</sect2>

<sect2 id="braille-friendly">
<title>braille&lowbar;friendly</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will place the cursor at the beginning
of the current line in menus, even when the <link linkend="arrow-cursor">&dollar;arrow&lowbar;cursor</link> variable
is <emphasis>unset</emphasis>, making it easier for blind persons using Braille displays to
follow these menus.  The option is <emphasis>unset</emphasis> by default because many
visual terminals don't permit making the cursor invisible.
</para>
</sect2>

<sect2 id="check-mbox-size">
<title>check&lowbar;mbox&lowbar;size</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will use file size attribute instead of
access time when checking for new mail in mbox and mmdf folders.
</para>
<para>
This variable is <emphasis>unset</emphasis> by default and should only be enabled when
new mail detection for these folder types is unreliable or doesn't work.
</para>
<para>
Note that enabling this variable should happen before any <quote><link linkend="mailboxes">mailboxes</link></quote>
directives occur in configuration files regarding mbox or mmdf folders
because mutt needs to determine the initial new mail status of such a
mailbox by performing a fast mailbox scan when it is defined.
Afterwards the new mail status is tracked by file size changes.
</para>
</sect2>

<sect2 id="charset">
<title>charset</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Character set your terminal uses to display and enter textual data.
It is also the fallback for <link linkend="send-charset">&dollar;send&lowbar;charset</link>.
</para>
<para>
Upon startup Mutt tries to derive this value from environment variables
such as <literal>&dollar;LC&lowbar;CTYPE</literal> or <literal>&dollar;LANG</literal>.
</para>
<para>
<emphasis role="bold">Note:</emphasis> It should only be set in case Mutt isn't abled to determine the
character set used correctly.
</para>
</sect2>

<sect2 id="check-new">
<title>check&lowbar;new</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
<emphasis role="bold">Note:</emphasis> this option only affects <emphasis>maildir</emphasis> and <emphasis>MH</emphasis> style
mailboxes.
</para>
<para>
When <emphasis>set</emphasis>, Mutt will check for new mail delivered while the
mailbox is open.  Especially with MH mailboxes, this operation can
take quite some time since it involves scanning the directory and
checking each file to see if it has already been looked at.  If
this variable is <emphasis>unset</emphasis>, no check for new mail is performed
while the mailbox is open.
</para>
</sect2>

<sect2 id="collapse-unread">
<title>collapse&lowbar;unread</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, Mutt will not collapse a thread if it contains any
unread messages.
</para>
</sect2>

<sect2 id="uncollapse-jump">
<title>uncollapse&lowbar;jump</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will jump to the next unread message, if any,
when the current thread is <emphasis>un</emphasis>collapsed.
</para>
</sect2>

<sect2 id="compose-format">
<title>compose&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>-- Mutt: Compose  &lsqb;Approx. msg size: &percnt;l   Atts: &percnt;a&rsqb;&percnt;&gt;-</literal></quote></literallayout>

<para>
Controls the format of the status line displayed in the <quote>compose</quote>
menu.  This string is similar to <link linkend="status-format">&dollar;status&lowbar;format</link>, but has its own
set of <literal>printf(3)</literal>-like sequences:

</para>

<variablelist>
<varlistentry><term>&percnt;a </term>
<listitem><para>total number of attachments
</para></listitem></varlistentry>
<varlistentry><term>&percnt;h </term>
<listitem><para>local hostname
</para></listitem></varlistentry>
<varlistentry><term>&percnt;l </term>
<listitem><para>approximate size (in bytes) of the current message
</para></listitem></varlistentry>
<varlistentry><term>&percnt;v </term>
<listitem><para>Mutt version string
</para></listitem></varlistentry></variablelist>

<para>
See the text describing the <link linkend="status-format">&dollar;status&lowbar;format</link> option for more
information on how to set <link linkend="compose-format">&dollar;compose&lowbar;format</link>.
</para>
</sect2>

<sect2 id="config-charset">
<title>config&lowbar;charset</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
When defined, Mutt will recode commands in rc files from this
encoding to the current character set as specified by <link linkend="charset">&dollar;charset</link>
and aliases written to <link linkend="alias-file">&dollar;alias&lowbar;file</link> from the current character set.
</para>
<para>
Please note that if setting <link linkend="charset">&dollar;charset</link> it must be done before
setting <link linkend="config-charset">&dollar;config&lowbar;charset</link>.
</para>
<para>
Recoding should be avoided as it may render unconvertable
characters as question marks which can lead to undesired
side effects (for example in regular expressions).
</para>
</sect2>

<sect2 id="confirmappend">
<title>confirmappend</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will prompt for confirmation when appending messages to
an existing mailbox.
</para>
</sect2>

<sect2 id="confirmcreate">
<title>confirmcreate</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will prompt for confirmation when saving messages to a
mailbox which does not yet exist before creating it.
</para>
</sect2>

<sect2 id="connect-timeout">
<title>connect&lowbar;timeout</title>
<literallayout>Type: number
Default: 30</literallayout>

<para>
Causes Mutt to timeout a network connection (for IMAP, POP or SMTP) after this
many seconds if the connection is not able to be established.  A negative
value causes Mutt to wait indefinitely for the connection attempt to succeed.
</para>
</sect2>

<sect2 id="content-type">
<title>content&lowbar;type</title>
<literallayout>Type: string
Default: <quote><literal>text/plain</literal></quote></literallayout>

<para>
Sets the default Content-Type for the body of newly composed messages.
</para>
</sect2>

<sect2 id="copy">
<title>copy</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This variable controls whether or not copies of your outgoing messages
will be saved for later references.  Also see <link linkend="record">&dollar;record</link>,
<link linkend="save-name">&dollar;save&lowbar;name</link>, <link linkend="force-name">&dollar;force&lowbar;name</link> and <quote><link linkend="fcc-hook">fcc-hook</link></quote>.
</para>
</sect2>

<sect2 id="crypt-use-gpgme">
<title>crypt&lowbar;use&lowbar;gpgme</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable controls the use of the GPGME-enabled crypto backends.
If it is <emphasis>set</emphasis> and Mutt was built with gpgme support, the gpgme code for
S/MIME and PGP will be used instead of the classic code.  Note that
you need to set this option in .muttrc; it won't have any effect when
used interactively.
</para>
</sect2>

<sect2 id="crypt-use-pka">
<title>crypt&lowbar;use&lowbar;pka</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls whether mutt uses PKA
(see http://www.g10code.de/docs/pka-intro.de.pdf) during signature
verification (only supported by the GPGME backend).
</para>
</sect2>

<sect2 id="crypt-autopgp">
<title>crypt&lowbar;autopgp</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether or not mutt may automatically enable
PGP encryption/signing for messages.  See also <link linkend="crypt-autoencrypt">&dollar;crypt&lowbar;autoencrypt</link>,
<link linkend="crypt-replyencrypt">&dollar;crypt&lowbar;replyencrypt</link>,
<link linkend="crypt-autosign">&dollar;crypt&lowbar;autosign</link>, <link linkend="crypt-replysign">&dollar;crypt&lowbar;replysign</link> and <link linkend="smime-is-default">&dollar;smime&lowbar;is&lowbar;default</link>.
</para>
</sect2>

<sect2 id="crypt-autosmime">
<title>crypt&lowbar;autosmime</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether or not mutt may automatically enable
S/MIME encryption/signing for messages. See also <link linkend="crypt-autoencrypt">&dollar;crypt&lowbar;autoencrypt</link>,
<link linkend="crypt-replyencrypt">&dollar;crypt&lowbar;replyencrypt</link>,
<link linkend="crypt-autosign">&dollar;crypt&lowbar;autosign</link>, <link linkend="crypt-replysign">&dollar;crypt&lowbar;replysign</link> and <link linkend="smime-is-default">&dollar;smime&lowbar;is&lowbar;default</link>.
</para>
</sect2>

<sect2 id="date-format">
<title>date&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>!&percnt;a, &percnt;b &percnt;d, &percnt;Y at &percnt;I:&percnt;M:&percnt;S&percnt;p &percnt;Z</literal></quote></literallayout>

<para>
This variable controls the format of the date printed by the <quote>&percnt;d</quote>
sequence in <link linkend="index-format">&dollar;index&lowbar;format</link>.  This is passed to the <literal>strftime(3)</literal>
function to process the date, see the man page for the proper syntax.
</para>
<para>
Unless the first character in the string is a bang (<quote>!</quote>), the month
and week day names are expanded according to the locale specified in
the variable <link linkend="locale">&dollar;locale</link>. If the first character in the string is a
bang, the bang is discarded, and the month and week day names in the
rest of the string are expanded in the <emphasis>C</emphasis> locale (that is in US
English).
</para>
</sect2>

<sect2 id="default-hook">
<title>default&lowbar;hook</title>
<literallayout>Type: string
Default: <quote><literal>&tilde;f &percnt;s !&tilde;P &verbar; (&tilde;P &tilde;C &percnt;s)</literal></quote></literallayout>

<para>
This variable controls how <quote><link linkend="message-hook">message-hook</link></quote>, <quote><link linkend="reply-hook">reply-hook</link></quote>, <quote><link linkend="send-hook">send-hook</link></quote>,
<quote><link linkend="send2-hook">send2-hook</link></quote>, <quote><link linkend="save-hook">save-hook</link></quote>, and <quote><link linkend="fcc-hook">fcc-hook</link></quote> will
be interpreted if they are specified with only a simple regexp,
instead of a matching pattern.  The hooks are expanded when they are
declared, so a hook will be interpreted according to the value of this
variable at the time the hook is declared.
</para>
<para>
The default value matches
if the message is either from a user matching the regular expression
given, or if it is from you (if the from address matches
<quote><link linkend="alternates">alternates</link></quote>) and is to or cc'ed to a user matching the given
regular expression.
</para>
</sect2>

<sect2 id="delete">
<title>delete</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not messages are really deleted when closing or
synchronizing a mailbox.  If set to <emphasis>yes</emphasis>, messages marked for
deleting will automatically be purged without prompting.  If set to
<emphasis>no</emphasis>, messages marked for deletion will be kept in the mailbox.
</para>
</sect2>

<sect2 id="delete-untag">
<title>delete&lowbar;untag</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If this option is <emphasis>set</emphasis>, mutt will untag messages when marking them
for deletion.  This applies when you either explicitly delete a message,
or when you save it to another folder.
</para>
</sect2>

<sect2 id="digest-collapse">
<title>digest&lowbar;collapse</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If this option is <emphasis>set</emphasis>, mutt's received-attachments menu will not show the subparts of
individual messages in a multipart/digest.  To see these subparts, press <quote>v</quote> on that menu.
</para>
</sect2>

<sect2 id="display-filter">
<title>display&lowbar;filter</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
When set, specifies a command used to filter messages.  When a message
is viewed it is passed as standard input to <link linkend="display-filter">&dollar;display&lowbar;filter</link>, and the
filtered message is read from the standard output.
</para>
</sect2>

<sect2 id="dotlock-program">
<title>dotlock&lowbar;program</title>
<literallayout>Type: path
Default: <quote><literal>/usr/bin/mutt&lowbar;dotlock</literal></quote></literallayout>

<para>
Contains the path of the <literal>mutt&lowbar;dotlock(8)</literal> binary to be used by
mutt.
</para>
</sect2>

<sect2 id="dsn-notify">
<title>dsn&lowbar;notify</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable sets the request for when notification is returned.  The
string consists of a comma separated list (no spaces!) of one or more
of the following: <emphasis>never</emphasis>, to never request notification,
<emphasis>failure</emphasis>, to request notification on transmission failure,
<emphasis>delay</emphasis>, to be notified of message delays, <emphasis>success</emphasis>, to be
notified of successful transmission.
</para>
<para>
Example:

</para>

<screen>
set dsn_notify="failure,delay"

</screen><para>
<emphasis role="bold">Note:</emphasis> when using <link linkend="sendmail">&dollar;sendmail</link> for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater or a MTA
providing a <literal>sendmail(1)</literal>-compatible interface supporting the <literal>-N</literal> option
for DSN. For SMTP delivery, DSN support is autodetected so that it
depends on the server whether DSN will be used or not.
</para>
</sect2>

<sect2 id="dsn-return">
<title>dsn&lowbar;return</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable controls how much of your message is returned in DSN
messages.  It may be set to either <emphasis>hdrs</emphasis> to return just the
message header, or <emphasis>full</emphasis> to return the full message.
</para>
<para>
Example:

</para>

<screen>
set dsn_return=hdrs

</screen><para>
<emphasis role="bold">Note:</emphasis> when using <link linkend="sendmail">&dollar;sendmail</link> for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater or a MTA
providing a <literal>sendmail(1)</literal>-compatible interface supporting the <literal>-R</literal> option
for DSN. For SMTP delivery, DSN support is autodetected so that it
depends on the server whether DSN will be used or not.
</para>
</sect2>

<sect2 id="duplicate-threads">
<title>duplicate&lowbar;threads</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether mutt, when <link linkend="sort">&dollar;sort</link> is set to <emphasis>threads</emphasis>, threads
messages with the same Message-Id together.  If it is <emphasis>set</emphasis>, it will indicate
that it thinks they are duplicates of each other with an equals sign
in the thread tree.
</para>
</sect2>

<sect2 id="edit-headers">
<title>edit&lowbar;headers</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This option allows you to edit the header of your outgoing messages
along with the body of your message.
</para>
<para>
<emphasis role="bold">Note</emphasis> that changes made to the References: and Date: headers are
ignored for interoperability reasons.
</para>
</sect2>

<sect2 id="editor">
<title>editor</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable specifies which editor is used by mutt.
It defaults to the value of the <literal>&dollar;VISUAL</literal>, or <literal>&dollar;EDITOR</literal>, environment
variable, or to the string <quote>/usr/bin/editor</quote> if neither of those are set.
</para>
</sect2>

<sect2 id="encode-from">
<title>encode&lowbar;from</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will quoted-printable encode messages when
they contain the string <quote>From </quote> (note the trailing space) in the beginning of a line.
This is useful to avoid the tampering certain mail delivery and transport
agents tend to do with messages (in order to prevent tools from
misinterpreting the line as a mbox message separator).
</para>
</sect2>

<sect2 id="envelope-from-address">
<title>envelope&lowbar;from&lowbar;address</title>
<literallayout>Type: e-mail address
Default: (empty)</literallayout>

<para>
Manually sets the <emphasis>envelope</emphasis> sender for outgoing messages.
This value is ignored if <link linkend="use-envelope-from">&dollar;use&lowbar;envelope&lowbar;from</link> is <emphasis>unset</emphasis>.
</para>
</sect2>

<sect2 id="escape">
<title>escape</title>
<literallayout>Type: string
Default: <quote><literal>&tilde;</literal></quote></literallayout>

<para>
Escape character to use for functions in the builtin editor.
</para>
</sect2>

<sect2 id="fast-reply">
<title>fast&lowbar;reply</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, the initial prompt for recipients and subject are skipped
when replying to messages, and the initial prompt for subject is
skipped when forwarding messages.
</para>
<para>
<emphasis role="bold">Note:</emphasis> this variable has no effect when the <link linkend="autoedit">&dollar;autoedit</link>
variable is <emphasis>set</emphasis>.
</para>
</sect2>

<sect2 id="fcc-attach">
<title>fcc&lowbar;attach</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether or not attachments on outgoing messages
are saved along with the main body of your message.
</para>
</sect2>

<sect2 id="fcc-clear">
<title>fcc&lowbar;clear</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, FCCs will be stored unencrypted and
unsigned, even when the actual message is encrypted and/or
signed.
(PGP only)
</para>
</sect2>

<sect2 id="folder">
<title>folder</title>
<literallayout>Type: path
Default: <quote><literal>&tilde;/Mail</literal></quote></literallayout>

<para>
Specifies the default location of your mailboxes.  A <quote>+</quote> or <quote>=</quote> at the
beginning of a pathname will be expanded to the value of this
variable.  Note that if you change this variable (from the default)
value you need to make sure that the assignment occurs <emphasis>before</emphasis>
you use <quote>+</quote> or <quote>=</quote> for any other variables since expansion takes place
when handling the <quote><link linkend="mailboxes">mailboxes</link></quote> command.
</para>
</sect2>

<sect2 id="folder-format">
<title>folder&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&percnt;2C &percnt;t &percnt;N &percnt;F &percnt;2l &percnt;-8.8u &percnt;-8.8g &percnt;8s &percnt;d &percnt;f</literal></quote></literallayout>

<para>
This variable allows you to customize the file browser display to your
personal taste.  This string is similar to <link linkend="index-format">&dollar;index&lowbar;format</link>, but has
its own set of <literal>printf(3)</literal>-like sequences:

</para>

<variablelist>
<varlistentry><term>&percnt;C  </term>
<listitem><para>current file number
</para></listitem></varlistentry>
<varlistentry><term>&percnt;d  </term>
<listitem><para>date/time folder was last modified
</para></listitem></varlistentry>
<varlistentry><term>&percnt;f  </term>
<listitem><para>filename
</para></listitem></varlistentry>
<varlistentry><term>&percnt;F  </term>
<listitem><para>file permissions
</para></listitem></varlistentry>
<varlistentry><term>&percnt;g  </term>
<listitem><para>group name (or numeric gid, if missing)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;l  </term>
<listitem><para>number of hard links
</para></listitem></varlistentry>
<varlistentry><term>&percnt;N  </term>
<listitem><para>N if folder has new mail, blank otherwise
</para></listitem></varlistentry>
<varlistentry><term>&percnt;s  </term>
<listitem><para>size in bytes
</para></listitem></varlistentry>
<varlistentry><term>&percnt;t  </term>
<listitem><para><quote>*</quote> if the file is tagged, blank otherwise
</para></listitem></varlistentry>
<varlistentry><term>&percnt;u  </term>
<listitem><para>owner name (or numeric uid, if missing)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&gt;X </term>
<listitem><para>right justify the rest of the string and pad with character <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&verbar;X </term>
<listitem><para>pad to the end of the line with character <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;*X </term>
<listitem><para>soft-fill with character <quote>X</quote> as pad
</para></listitem></varlistentry></variablelist>

<para>
For an explanation of <quote>soft-fill</quote>, see the <link linkend="index-format">&dollar;index&lowbar;format</link> documentation.
</para>
</sect2>

<sect2 id="followup-to">
<title>followup&lowbar;to</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether or not the <quote>Mail-Followup-To:</quote> header field is
generated when sending mail.  When <emphasis>set</emphasis>, Mutt will generate this
field when you are replying to a known mailing list, specified with
the <quote><link linkend="subscribe">subscribe</link></quote> or <quote><link linkend="lists">lists</link></quote> commands.
</para>
<para>
This field has two purposes.  First, preventing you from
receiving duplicate copies of replies to messages which you send
to mailing lists, and second, ensuring that you do get a reply
separately for any messages sent to known lists to which you are
not subscribed.
</para>
<para>
The header will contain only the list's address
for subscribed lists, and both the list address and your own
email address for unsubscribed lists.  Without this header, a
group reply to your message sent to a subscribed list will be
sent to both the list and your address, resulting in two copies
of the same email for you.
</para>
</sect2>

<sect2 id="force-name">
<title>force&lowbar;name</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable is similar to <link linkend="save-name">&dollar;save&lowbar;name</link>, except that Mutt will
store a copy of your outgoing message by the username of the address
you are sending to even if that mailbox does not exist.
</para>
<para>
Also see the <link linkend="record">&dollar;record</link> variable.
</para>
</sect2>

<sect2 id="forward-decode">
<title>forward&lowbar;decode</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls the decoding of complex MIME messages into <literal>text/plain</literal> when
forwarding a message.  The message header is also RFC2047 decoded.
This variable is only used, if <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> is <emphasis>unset</emphasis>,
otherwise <link linkend="mime-forward-decode">&dollar;mime&lowbar;forward&lowbar;decode</link> is used instead.
</para>
</sect2>

<sect2 id="forward-edit">
<title>forward&lowbar;edit</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This quadoption controls whether or not the user is automatically
placed in the editor when forwarding messages.  For those who always want
to forward with no modification, use a setting of <quote>no</quote>.
</para>
</sect2>

<sect2 id="forward-format">
<title>forward&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&lsqb;&percnt;a: &percnt;s&rsqb;</literal></quote></literallayout>

<para>
This variable controls the default subject when forwarding a message.
It uses the same format sequences as the <link linkend="index-format">&dollar;index&lowbar;format</link> variable.
</para>
</sect2>

<sect2 id="forward-quote">
<title>forward&lowbar;quote</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, forwarded messages included in the main body of the
message (when <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> is <emphasis>unset</emphasis>) will be quoted using
<link linkend="indent-string">&dollar;indent&lowbar;string</link>.
</para>
</sect2>

<sect2 id="from">
<title>from</title>
<literallayout>Type: e-mail address
Default: (empty)</literallayout>

<para>
When <emphasis>set</emphasis>, this variable contains a default from address.  It
can be overridden using <quote><link linkend="my-hdr">my&lowbar;hdr</link></quote> (including from a <quote><link linkend="send-hook">send-hook</link></quote>) and
<link linkend="reverse-name">&dollar;reverse&lowbar;name</link>.  This variable is ignored if <link linkend="use-from">&dollar;use&lowbar;from</link> is <emphasis>unset</emphasis>.
</para>
<para>
This setting defaults to the contents of the environment variable <literal>&dollar;EMAIL</literal>.
</para>
</sect2>

<sect2 id="gecos-mask">
<title>gecos&lowbar;mask</title>
<literallayout>Type: regular expression
Default: <quote><literal>&circ;&lsqb;&circ;,&rsqb;*</literal></quote></literallayout>

<para>
A regular expression used by mutt to parse the GECOS field of a password
entry when expanding the alias.  The default value
will return the string up to the first <quote>,</quote> encountered.
If the GECOS field contains a string like <quote>lastname, firstname</quote> then you
should set it to <quote><literal>.*</literal></quote>.
</para>
<para>
This can be useful if you see the following behavior: you address an e-mail
to user ID <quote>stevef</quote> whose full name is <quote>Steve Franklin</quote>.  If mutt expands
<quote>stevef</quote> to <quote>&quot;Franklin&quot; stevef@foo.bar</quote> then you should set the <link linkend="gecos-mask">&dollar;gecos&lowbar;mask</link> to
a regular expression that will match the whole name so mutt will expand
<quote>Franklin</quote> to <quote>Franklin, Steve</quote>.
</para>
</sect2>

<sect2 id="hdrs">
<title>hdrs</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, the header fields normally added by the <quote><link linkend="my-hdr">my&lowbar;hdr</link></quote>
command are not created.  This variable <emphasis>must</emphasis> be unset before
composing a new message or replying in order to take effect.  If <emphasis>set</emphasis>,
the user defined header fields are added to every new message.
</para>
</sect2>

<sect2 id="header">
<title>header</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, this variable causes Mutt to include the header
of the message you are replying to into the edit buffer.
The <link linkend="weed">&dollar;weed</link> setting applies.
</para>
</sect2>

<sect2 id="help">
<title>help</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, help lines describing the bindings for the major functions
provided by each menu are displayed on the first line of the screen.
</para>
<para>
<emphasis role="bold">Note:</emphasis> The binding will not be displayed correctly if the
function is bound to a sequence rather than a single keystroke.  Also,
the help line may not be updated if a binding is changed while Mutt is
running.  Since this variable is primarily aimed at new users, neither
of these should present a major problem.
</para>
</sect2>

<sect2 id="hidden-host">
<title>hidden&lowbar;host</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will skip the host name part of <link linkend="hostname">&dollar;hostname</link> variable
when adding the domain part to addresses.  This variable does not
affect the generation of Message-IDs, and it will not lead to the
cut-off of first-level domains.
</para>
</sect2>

<sect2 id="hide-limited">
<title>hide&lowbar;limited</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the presence of messages that are hidden
by limiting, in the thread tree.
</para>
</sect2>

<sect2 id="hide-missing">
<title>hide&lowbar;missing</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the presence of missing messages in the
thread tree.
</para>
</sect2>

<sect2 id="hide-thread-subject">
<title>hide&lowbar;thread&lowbar;subject</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the subject of messages in the thread
tree that have the same subject as their parent or closest previously
displayed sibling.
</para>
</sect2>

<sect2 id="hide-top-limited">
<title>hide&lowbar;top&lowbar;limited</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the presence of messages that are hidden
by limiting, at the top of threads in the thread tree.  Note that when
<link linkend="hide-limited">&dollar;hide&lowbar;limited</link> is <emphasis>set</emphasis>, this option will have no effect.
</para>
</sect2>

<sect2 id="hide-top-missing">
<title>hide&lowbar;top&lowbar;missing</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the presence of missing messages at the
top of threads in the thread tree.  Note that when <link linkend="hide-missing">&dollar;hide&lowbar;missing</link> is
<emphasis>set</emphasis>, this option will have no effect.
</para>
</sect2>

<sect2 id="history">
<title>history</title>
<literallayout>Type: number
Default: 10</literallayout>

<para>
This variable controls the size (in number of strings remembered) of
the string history buffer per category. The buffer is cleared each time the
variable is set.
</para>
</sect2>

<sect2 id="history-file">
<title>history&lowbar;file</title>
<literallayout>Type: path
Default: <quote><literal>&tilde;/.mutthistory</literal></quote></literallayout>

<para>
The file in which Mutt will save its history.
</para>
</sect2>

<sect2 id="honor-followup-to">
<title>honor&lowbar;followup&lowbar;to</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This variable controls whether or not a Mail-Followup-To header is
honored when group-replying to a message.
</para>
</sect2>

<sect2 id="hostname">
<title>hostname</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Specifies the fully-qualified hostname of the system mutt is running on
containing the host's name and the DNS domain it belongs to. It is used
as the domain part (after <quote>@</quote>) for local email addresses as well as
Message-Id headers.
</para>
<para>
Its value is determined at startup as follows: If the node's name
as returned by the <literal>uname(3)</literal> function contains the hostname and the
domain, these are used to construct <link linkend="hostname">&dollar;hostname</link>. If there is no
domain part returned, Mutt will look for a <quote>domain</quote> or <quote>search</quote>
line in <literal>/etc/resolv.conf</literal> to determine the domain. Optionally, Mutt
can be compiled with a fixed domain name in which case a detected
one is not used.
</para>
<para>
Also see <link linkend="use-domain">&dollar;use&lowbar;domain</link> and <link linkend="hidden-host">&dollar;hidden&lowbar;host</link>.
</para>
<para>
<emphasis role="bold">Note:</emphasis> On Debian systems, the default for this variable is obtained
from /etc/mailname when Mutt starts.
</para>
</sect2>

<sect2 id="ignore-linear-white-space">
<title>ignore&lowbar;linear&lowbar;white&lowbar;space</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This option replaces linear-white-space between encoded-word
and text to a single space to prevent the display of MIME-encoded
<quote>Subject:</quote> field from being divided into multiple lines.
</para>
</sect2>

<sect2 id="ignore-list-reply-to">
<title>ignore&lowbar;list&lowbar;reply&lowbar;to</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Affects the behaviour of the <literal>&lt;reply&gt;</literal> function when replying to
messages from mailing lists (as defined by the <quote><link linkend="subscribe">subscribe</link></quote> or
<quote><link linkend="lists">lists</link></quote> commands).  When <emphasis>set</emphasis>, if the <quote>Reply-To:</quote> field is
set to the same value as the <quote>To:</quote> field, Mutt assumes that the
<quote>Reply-To:</quote> field was set by the mailing list to automate responses
to the list, and will ignore this field.  To direct a response to the
mailing list when this option is <emphasis>set</emphasis>, use the <literal><link linkend="list-reply">&lt;list-reply&gt;</link></literal>
function; <literal>&lt;group-reply&gt;</literal> will reply to both the sender and the
list.
</para>
</sect2>

<sect2 id="imap-authenticators">
<title>imap&lowbar;authenticators</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an IMAP server, in the order mutt should
try them.  Authentication methods are either <quote>login</quote> or the right
side of an IMAP <quote>AUTH=xxx</quote> capability string, eg <quote>digest-md5</quote>, <quote>gssapi</quote>
or <quote>cram-md5</quote>. This option is case-insensitive. If it's
<emphasis>unset</emphasis> (the default) mutt will try all available methods,
in order from most-secure to least-secure.
</para>
<para>
Example:

</para>

<screen>
set imap_authenticators="gssapi:cram-md5:login"

</screen><para>
<emphasis role="bold">Note:</emphasis> Mutt will only fall back to other authentication methods if
the previous methods are unavailable. If a method is available but
authentication fails, mutt will not connect to the IMAP server.
</para>
</sect2>

<sect2 id="imap-check-subscribed">
<title>imap&lowbar;check&lowbar;subscribed</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will fetch the set of subscribed folders from
your server on connection, and add them to the set of mailboxes
it polls for new mail just as if you had issued individual <quote><link linkend="mailboxes">mailboxes</link></quote>
commands.
</para>
</sect2>

<sect2 id="imap-delim-chars">
<title>imap&lowbar;delim&lowbar;chars</title>
<literallayout>Type: string
Default: <quote><literal>/.</literal></quote></literallayout>

<para>
This contains the list of characters which you would like to treat
as folder separators for displaying IMAP paths. In particular it
helps in using the <quote>=</quote> shortcut for your <emphasis>folder</emphasis> variable.
</para>
</sect2>

<sect2 id="imap-headers">
<title>imap&lowbar;headers</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Mutt requests these header fields in addition to the default headers
(<quote>Date:</quote>, <quote>From:</quote>, <quote>Subject:</quote>, <quote>To:</quote>, <quote>Cc:</quote>, <quote>Message-Id:</quote>,
<quote>References:</quote>, <quote>Content-Type:</quote>, <quote>Content-Description:</quote>, <quote>In-Reply-To:</quote>,
<quote>Reply-To:</quote>, <quote>Lines:</quote>, <quote>List-Post:</quote>, <quote>X-Label:</quote>) from IMAP
servers before displaying the index menu. You may want to add more
headers for spam detection.
</para>
<para>
<emphasis role="bold">Note:</emphasis> This is a space separated list, items should be uppercase
and not contain the colon, e.g. <quote>X-BOGOSITY X-SPAM-STATUS</quote> for the
<quote>X-Bogosity:</quote> and <quote>X-Spam-Status:</quote> header fields.
</para>
</sect2>

<sect2 id="imap-idle">
<title>imap&lowbar;idle</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will attempt to use the IMAP IDLE extension
to check for new mail in the current mailbox. Some servers
(dovecot was the inspiration for this option) react badly
to mutt's implementation. If your connection seems to freeze
up periodically, try unsetting this.
</para>
</sect2>

<sect2 id="imap-keepalive">
<title>imap&lowbar;keepalive</title>
<literallayout>Type: number
Default: 900</literallayout>

<para>
This variable specifies the maximum amount of time in seconds that mutt
will wait before polling open IMAP connections, to prevent the server
from closing them before mutt has finished with them. The default is
well within the RFC-specified minimum amount of time (30 minutes) before
a server is allowed to do this, but in practice the RFC does get
violated every now and then. Reduce this number if you find yourself
getting disconnected from your IMAP server due to inactivity.
</para>
</sect2>

<sect2 id="imap-list-subscribed">
<title>imap&lowbar;list&lowbar;subscribed</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable configures whether IMAP folder browsing will look for
only subscribed folders or all folders.  This can be toggled in the
IMAP browser with the <literal>&lt;toggle-subscribed&gt;</literal> function.
</para>
</sect2>

<sect2 id="imap-login">
<title>imap&lowbar;login</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Your login name on the IMAP server.
</para>
<para>
This variable defaults to the value of <link linkend="imap-user">&dollar;imap&lowbar;user</link>.
</para>
</sect2>

<sect2 id="imap-pass">
<title>imap&lowbar;pass</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Specifies the password for your IMAP account.  If <emphasis>unset</emphasis>, Mutt will
prompt you for your password when you invoke the <literal><link linkend="fetch-mail">&lt;fetch-mail&gt;</link></literal> function
or try to open an IMAP folder.
</para>
<para>
<emphasis role="bold">Warning</emphasis>: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc even
if you are the only one who can read the file.
</para>
</sect2>

<sect2 id="imap-passive">
<title>imap&lowbar;passive</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not open new IMAP connections to check for new
mail.  Mutt will only check for new mail over existing IMAP
connections.  This is useful if you don't want to be prompted to
user/password pairs on mutt invocation, or if opening the connection
is slow.
</para>
</sect2>

<sect2 id="imap-peek">
<title>imap&lowbar;peek</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will avoid implicitly marking your mail as read whenever
you fetch a message from the server. This is generally a good thing,
but can make closing an IMAP folder somewhat slower. This option
exists to appease speed freaks.
</para>
</sect2>

<sect2 id="imap-pipeline-depth">
<title>imap&lowbar;pipeline&lowbar;depth</title>
<literallayout>Type: number
Default: 15</literallayout>

<para>
Controls the number of IMAP commands that may be queued up before they
are sent to the server. A deeper pipeline reduces the amount of time
mutt must wait for the server, and can make IMAP servers feel much
more responsive. But not all servers correctly handle pipelined commands,
so if you have problems you might want to try setting this variable to 0.
</para>
<para>
<emphasis role="bold">Note:</emphasis> Changes to this variable have no effect on open connections.
</para>
</sect2>

<sect2 id="imap-servernoise">
<title>imap&lowbar;servernoise</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will display warning messages from the IMAP
server as error messages. Since these messages are often
harmless, or generated due to configuration problems on the
server which are out of the users' hands, you may wish to suppress
them at some point.
</para>
</sect2>

<sect2 id="imap-user">
<title>imap&lowbar;user</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
The name of the user whose mail you intend to access on the IMAP
server.
</para>
<para>
This variable defaults to your user name on the local machine.
</para>
</sect2>

<sect2 id="implicit-autoview">
<title>implicit&lowbar;autoview</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If set to <quote>yes</quote>, mutt will look for a mailcap entry with the
<quote><literal>copiousoutput</literal></quote> flag set for <emphasis>every</emphasis> MIME attachment it doesn't have
an internal viewer defined for.  If such an entry is found, mutt will
use the viewer defined in that entry to convert the body part to text
form.
</para>
</sect2>

<sect2 id="include">
<title>include</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not a copy of the message(s) you are replying to
is included in your reply.
</para>
</sect2>

<sect2 id="include-onlyfirst">
<title>include&lowbar;onlyfirst</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls whether or not Mutt includes only the first attachment
of the message you are replying.
</para>
</sect2>

<sect2 id="indent-string">
<title>indent&lowbar;string</title>
<literallayout>Type: string
Default: <quote><literal>&gt; </literal></quote></literallayout>

<para>
Specifies the string to prepend to each line of text quoted in a
message to which you are replying.  You are strongly encouraged not to
change this value, as it tends to agitate the more fanatical netizens.
</para>
<para>
This option is a format string, please see the description of
<link linkend="index-format">&dollar;index&lowbar;format</link> for supported <literal>printf(3)</literal>-style sequences.
</para>
<para>
Because for <literal>format=lowed</literal> style messages the quoting mechanism
is strictly defined, this setting is ignored if <link linkend="text-flowed">&dollar;text&lowbar;flowed</link> is
<emphasis>set</emphasis>.
</para>
</sect2>

<sect2 id="index-format">
<title>index&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&percnt;4C &percnt;Z &percnt;{&percnt;b &percnt;d} &percnt;-15.15L (&percnt;?l?&percnt;4l&amp;&percnt;4c?) &percnt;s</literal></quote></literallayout>

<para>
This variable allows you to customize the message index display to
your personal taste.
</para>
<para>
<quote>Format strings</quote> are similar to the strings used in the C
function <literal>printf(3)</literal> to format output (see the man page for more details).
The following sequences are defined in Mutt:

</para>

<variablelist>
<varlistentry><term>&percnt;a </term>
<listitem><para>address of the author
</para></listitem></varlistentry>
<varlistentry><term>&percnt;A </term>
<listitem><para>reply-to address (if present; otherwise: address of author)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;b </term>
<listitem><para>filename of the original message folder (think mailbox)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;B </term>
<listitem><para>the list to which the letter was sent, or else the folder name (&percnt;b).
</para></listitem></varlistentry>
<varlistentry><term>&percnt;c </term>
<listitem><para>number of characters (bytes) in the message
</para></listitem></varlistentry>
<varlistentry><term>&percnt;C </term>
<listitem><para>current message number
</para></listitem></varlistentry>
<varlistentry><term>&percnt;d </term>
<listitem><para>date and time of the message in the format specified by
<link linkend="date-format">&dollar;date&lowbar;format</link> converted to sender's time zone
</para></listitem></varlistentry>
<varlistentry><term>&percnt;D </term>
<listitem><para>date and time of the message in the format specified by
<link linkend="date-format">&dollar;date&lowbar;format</link> converted to the local time zone
</para></listitem></varlistentry>
<varlistentry><term>&percnt;e </term>
<listitem><para>current message number in thread
</para></listitem></varlistentry>
<varlistentry><term>&percnt;E </term>
<listitem><para>number of messages in current thread
</para></listitem></varlistentry>
<varlistentry><term>&percnt;f </term>
<listitem><para>sender (address + real name), either From: or Return-Path:
</para></listitem></varlistentry>
<varlistentry><term>&percnt;F </term>
<listitem><para>author name, or recipient name if the message is from you
</para></listitem></varlistentry>
<varlistentry><term>&percnt;H </term>
<listitem><para>spam attribute(s) of this message
</para></listitem></varlistentry>
<varlistentry><term>&percnt;i </term>
<listitem><para>message-id of the current message
</para></listitem></varlistentry>
<varlistentry><term>&percnt;l </term>
<listitem><para>number of lines in the message (does not work with maildir,
mh, and possibly IMAP folders)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;L </term>
<listitem><para>If an address in the <quote>To:</quote> or <quote>Cc:</quote> header field matches an address
defined by the users <quote><link linkend="subscribe">subscribe</link></quote> command, this displays
&quot;To &lt;list-name&gt;&quot;, otherwise the same as &percnt;F.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;m </term>
<listitem><para>total number of message in the mailbox
</para></listitem></varlistentry>
<varlistentry><term>&percnt;M </term>
<listitem><para>number of hidden messages if the thread is collapsed.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;N </term>
<listitem><para>message score
</para></listitem></varlistentry>
<varlistentry><term>&percnt;n </term>
<listitem><para>author's real name (or address if missing)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;O </term>
<listitem><para>original save folder where mutt would formerly have
stashed the message: list name or recipient name
if not sent to a list
</para></listitem></varlistentry>
<varlistentry><term>&percnt;P </term>
<listitem><para>progress indicator for the builtin pager (how much of the file has been displayed)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;s </term>
<listitem><para>subject of the message
</para></listitem></varlistentry>
<varlistentry><term>&percnt;S </term>
<listitem><para>status of the message (<quote>N</quote>/<quote>D</quote>/<quote>d</quote>/<quote>!</quote>/<quote>r</quote>/*)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;t </term>
<listitem><para><quote>To:</quote> field (recipients)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;T </term>
<listitem><para>the appropriate character from the <link linkend="to-chars">&dollar;to&lowbar;chars</link> string
</para></listitem></varlistentry>
<varlistentry><term>&percnt;u </term>
<listitem><para>user (login) name of the author
</para></listitem></varlistentry>
<varlistentry><term>&percnt;v </term>
<listitem><para>first name of the author, or the recipient if the message is from you
</para></listitem></varlistentry>
<varlistentry><term>&percnt;X </term>
<listitem><para>number of attachments
(please see the <quote><link linkend="attachments">attachments</link></quote> section for possible speed effects)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;y </term>
<listitem><para><quote>X-Label:</quote> field, if present
</para></listitem></varlistentry>
<varlistentry><term>&percnt;Y </term>
<listitem><para><quote>X-Label:</quote> field, if present, and <emphasis>(1)</emphasis> not at part of a thread tree,
<emphasis>(2)</emphasis> at the top of a thread, or <emphasis>(3)</emphasis> <quote>X-Label:</quote> is different from
preceding message's <quote>X-Label:</quote>.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;Z </term>
<listitem><para>message status flags
</para></listitem></varlistentry>
<varlistentry><term>&percnt;{fmt} </term>
<listitem><para>the date and time of the message is converted to sender's
time zone, and <quote>fmt</quote> is expanded by the library function
<literal>strftime(3)</literal>; a leading bang disables locales
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&lsqb;fmt&rsqb; </term>
<listitem><para>the date and time of the message is converted to the local
time zone, and <quote>fmt</quote> is expanded by the library function
<literal>strftime(3)</literal>; a leading bang disables locales
</para></listitem></varlistentry>
<varlistentry><term>&percnt;(fmt) </term>
<listitem><para>the local date and time when the message was received.
<quote>fmt</quote> is expanded by the library function <literal>strftime(3)</literal>;
a leading bang disables locales
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&lt;fmt&gt; </term>
<listitem><para>the current local time. <quote>fmt</quote> is expanded by the library
function <literal>strftime(3)</literal>; a leading bang disables locales.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&gt;X    </term>
<listitem><para>right justify the rest of the string and pad with character <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&verbar;X    </term>
<listitem><para>pad to the end of the line with character <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;*X    </term>
<listitem><para>soft-fill with character <quote>X</quote> as pad
</para></listitem></varlistentry></variablelist>

<para>
<quote>Soft-fill</quote> deserves some explanation: Normal right-justification
will print everything to the left of the <quote>&percnt;&gt;</quote>, displaying padding and
whatever lies to the right only if there's room. By contrast,
soft-fill gives priority to the right-hand side, guaranteeing space
to display it and showing padding only if there's still room. If
necessary, soft-fill will eat text leftwards to make room for
rightward text.
</para>
<para>
Note that these expandos are supported in
<quote><link linkend="save-hook">save-hook</link></quote>, <quote><link linkend="fcc-hook">fcc-hook</link></quote> and <quote><link linkend="fcc-save-hook">fcc-save-hook</link></quote>, too.
</para>
</sect2>

<sect2 id="ispell">
<title>ispell</title>
<literallayout>Type: path
Default: <quote><literal>ispell</literal></quote></literallayout>

<para>
How to invoke ispell (GNU's spell-checking software).
</para>
</sect2>

<sect2 id="keep-flagged">
<title>keep&lowbar;flagged</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, read messages marked as flagged will not be moved
from your spool mailbox to your <link linkend="mbox">&dollar;mbox</link> mailbox, or as a result of
a <quote><link linkend="mbox-hook">mbox-hook</link></quote> command.
</para>
</sect2>

<sect2 id="locale">
<title>locale</title>
<literallayout>Type: string
Default: <quote><literal>C</literal></quote></literallayout>

<para>
The locale used by <literal>strftime(3)</literal> to format dates. Legal values are
the strings your system accepts for the locale environment variable <literal>&dollar;LC&lowbar;TIME</literal>.
</para>
</sect2>

<sect2 id="mail-check">
<title>mail&lowbar;check</title>
<literallayout>Type: number
Default: 5</literallayout>

<para>
This variable configures how often (in seconds) mutt should look for
new mail. Also see the <link linkend="timeout">&dollar;timeout</link> variable.
</para>
</sect2>

<sect2 id="mailcap-path">
<title>mailcap&lowbar;path</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable specifies which files to consult when attempting to
display MIME bodies not directly supported by Mutt.
</para>
</sect2>

<sect2 id="mailcap-sanitize">
<title>mailcap&lowbar;sanitize</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will restrict possible characters in mailcap &percnt; expandos
to a well-defined set of safe characters.  This is the safe setting,
but we are not sure it doesn't break some more advanced MIME stuff.
</para>
<para>
<emphasis role="bold">DON'T CHANGE THIS SETTING UNLESS YOU ARE REALLY SURE WHAT YOU ARE
DOING!</emphasis>
</para>
</sect2>

<sect2 id="maildir-mtime">
<title>maildir&lowbar;mtime</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If set, the sort-by-date option in the browser will sort maildirs
smartly, not using the mtime of the maildir itself but that of the
newest message in the new subdirectory, making the sorting by
reverse date much more useful. People with maildirs over NFS may
wish to leave this option unset.
</para>
</sect2>

<sect2 id="header-cache">
<title>header&lowbar;cache</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable points to the header cache database.
If pointing to a directory Mutt will contain a header cache
database file per folder, if pointing to a file that file will
be a single global header cache. By default it is <emphasis>unset</emphasis> so no header
caching will be used.
</para>
<para>
Header caching can greatly improve speed when opening POP, IMAP
MH or Maildir folders, see <quote><link linkend="caching">caching</link></quote> for details.
</para>
</sect2>

<sect2 id="maildir-header-cache-verify">
<title>maildir&lowbar;header&lowbar;cache&lowbar;verify</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Check for Maildir unaware programs other than mutt having modified maildir
files when the header cache is in use.  This incurs one <literal>stat(2)</literal> per
message every time the folder is opened (which can be very slow for NFS
folders).
</para>
</sect2>

<sect2 id="header-cache-pagesize">
<title>header&lowbar;cache&lowbar;pagesize</title>
<literallayout>Type: string
Default: <quote><literal>16384</literal></quote></literallayout>

<para>
When mutt is compiled with either gdbm or bdb4 as the header cache backend,
this option changes the database page size.  Too large or too small
values can waste space, memory, or CPU time. The default should be more
or less optimal for most use cases.
</para>
</sect2>

<sect2 id="maildir-trash">
<title>maildir&lowbar;trash</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, messages marked as deleted will be saved with the maildir
trashed flag instead of unlinked.  <emphasis role="bold">Note:</emphasis> this only applies
to maildir-style mailboxes.  Setting it will have no effect on other
mailbox types.
</para>
</sect2>

<sect2 id="mark-old">
<title>mark&lowbar;old</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether or not mutt marks <emphasis>new</emphasis> <emphasis role="bold">unread</emphasis>
messages as <emphasis>old</emphasis> if you exit a mailbox without reading them.
With this option <emphasis>set</emphasis>, the next time you start mutt, the messages
will show up with an <quote>O</quote> next to them in the index menu,
indicating that they are old.
</para>
</sect2>

<sect2 id="markers">
<title>markers</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls the display of wrapped lines in the internal pager. If set, a
<quote>+</quote> marker is displayed at the beginning of wrapped lines.
</para>
<para>
Also see the <link linkend="smart-wrap">&dollar;smart&lowbar;wrap</link> variable.
</para>
</sect2>

<sect2 id="mask">
<title>mask</title>
<literallayout>Type: regular expression
Default: <quote><literal>!&circ;&bsol;.&lsqb;&circ;.&rsqb;</literal></quote></literallayout>

<para>
A regular expression used in the file browser, optionally preceded by
the <emphasis>not</emphasis> operator <quote>!</quote>.  Only files whose names match this mask
will be shown. The match is always case-sensitive.
</para>
</sect2>

<sect2 id="mbox">
<title>mbox</title>
<literallayout>Type: path
Default: <quote><literal>&tilde;/mbox</literal></quote></literallayout>

<para>
This specifies the folder into which read mail in your <link linkend="spoolfile">&dollar;spoolfile</link>
folder will be appended.
</para>
<para>
Also see the <link linkend="move">&dollar;move</link> variable.
</para>
</sect2>

<sect2 id="mbox-type">
<title>mbox&lowbar;type</title>
<literallayout>Type: folder magic
Default: mbox</literallayout>

<para>
The default mailbox type used when creating new folders. May be any of
<quote>mbox</quote>, <quote>MMDF</quote>, <quote>MH</quote> and <quote>Maildir</quote>.
</para>
</sect2>

<sect2 id="metoo">
<title>metoo</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>unset</emphasis>, Mutt will remove your address (see the <quote><link linkend="alternates">alternates</link></quote>
command) from the list of recipients when replying to a message.
</para>
</sect2>

<sect2 id="menu-context">
<title>menu&lowbar;context</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
This variable controls the number of lines of context that are given
when scrolling through menus. (Similar to <link linkend="pager-context">&dollar;pager&lowbar;context</link>.)
</para>
</sect2>

<sect2 id="menu-move-off">
<title>menu&lowbar;move&lowbar;off</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, the bottom entry of menus will never scroll up past
the bottom of the screen, unless there are less entries than lines.
When <emphasis>set</emphasis>, the bottom entry may move off the bottom.
</para>
</sect2>

<sect2 id="menu-scroll">
<title>menu&lowbar;scroll</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, menus will be scrolled up or down one line when you
attempt to move across a screen boundary.  If <emphasis>unset</emphasis>, the screen
is cleared and the next or previous page of the menu is displayed
(useful for slow links to avoid many redraws).
</para>
</sect2>

<sect2 id="meta-key">
<title>meta&lowbar;key</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, forces Mutt to interpret keystrokes with the high bit (bit 8)
set as if the user had pressed the Esc key and whatever key remains
after having the high bit removed.  For example, if the key pressed
has an ASCII value of <literal>0xf8</literal>, then this is treated as if the user had
pressed Esc then <quote>x</quote>.  This is because the result of removing the
high bit from <literal>0xf8</literal> is <literal>0x78</literal>, which is the ASCII character
<quote>x</quote>.
</para>
</sect2>

<sect2 id="mh-purge">
<title>mh&lowbar;purge</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>unset</emphasis>, mutt will mimic mh's behaviour and rename deleted messages
to <emphasis>,&lt;old file name&gt;</emphasis> in mh folders instead of really deleting
them. This leaves the message on disk but makes programs reading the folder
ignore it. If the variable is <emphasis>set</emphasis>, the message files will simply be
deleted.
</para>
<para>
This option is similar to <link linkend="maildir-trash">&dollar;maildir&lowbar;trash</link> for Maildir folders.
</para>
</sect2>

<sect2 id="mh-seq-flagged">
<title>mh&lowbar;seq&lowbar;flagged</title>
<literallayout>Type: string
Default: <quote><literal>flagged</literal></quote></literallayout>

<para>
The name of the MH sequence used for flagged messages.
</para>
</sect2>

<sect2 id="mh-seq-replied">
<title>mh&lowbar;seq&lowbar;replied</title>
<literallayout>Type: string
Default: <quote><literal>replied</literal></quote></literallayout>

<para>
The name of the MH sequence used to tag replied messages.
</para>
</sect2>

<sect2 id="mh-seq-unseen">
<title>mh&lowbar;seq&lowbar;unseen</title>
<literallayout>Type: string
Default: <quote><literal>unseen</literal></quote></literallayout>

<para>
The name of the MH sequence used for unseen messages.
</para>
</sect2>

<sect2 id="mime-forward">
<title>mime&lowbar;forward</title>
<literallayout>Type: quadoption
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, the message you are forwarding will be attached as a
separate <literal>message/rfc822</literal> MIME part instead of included in the main body of the
message.  This is useful for forwarding MIME messages so the receiver
can properly view the message as it was delivered to you. If you like
to switch between MIME and not MIME from mail to mail, set this
variable to <quote>ask-no</quote> or <quote>ask-yes</quote>.
</para>
<para>
Also see <link linkend="forward-decode">&dollar;forward&lowbar;decode</link> and <link linkend="mime-forward-decode">&dollar;mime&lowbar;forward&lowbar;decode</link>.
</para>
</sect2>

<sect2 id="mime-forward-decode">
<title>mime&lowbar;forward&lowbar;decode</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls the decoding of complex MIME messages into <literal>text/plain</literal> when
forwarding a message while <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> is <emphasis>set</emphasis>. Otherwise
<link linkend="forward-decode">&dollar;forward&lowbar;decode</link> is used instead.
</para>
</sect2>

<sect2 id="mime-forward-rest">
<title>mime&lowbar;forward&lowbar;rest</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
When forwarding multiple attachments of a MIME message from the attachment
menu, attachments which cannot be decoded in a reasonable manner will
be attached to the newly composed message if this option is <emphasis>set</emphasis>.
</para>
</sect2>

<sect2 id="mix-entry-format">
<title>mix&lowbar;entry&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&percnt;4n &percnt;c &percnt;-16s &percnt;a</literal></quote></literallayout>

<para>
This variable describes the format of a remailer line on the mixmaster
chain selection screen.  The following <literal>printf(3)</literal>-like sequences are
supported:

</para>

<variablelist>
<varlistentry><term>&percnt;n </term>
<listitem><para>The running number on the menu.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;c </term>
<listitem><para>Remailer capabilities.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;s </term>
<listitem><para>The remailer's short name.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;a </term>
<listitem><para>The remailer's e-mail address.
</para></listitem></varlistentry></variablelist>
</sect2>

<sect2 id="mixmaster">
<title>mixmaster</title>
<literallayout>Type: path
Default: <quote><literal>mixmaster</literal></quote></literallayout>

<para>
This variable contains the path to the Mixmaster binary on your
system.  It is used with various sets of parameters to gather the
list of known remailers, and to finally send a message through the
mixmaster chain.
</para>
<para>
<emphasis role="bold">Note:</emphasis> On Debian systems, this option is set by default to
<quote>mixmaster-filter</quote> in /etc/Muttrc.
</para>
</sect2>

<sect2 id="move">
<title>move</title>
<literallayout>Type: quadoption
Default: no</literallayout>

<para>
Controls whether or not Mutt will move read messages
from your spool mailbox to your <link linkend="mbox">&dollar;mbox</link> mailbox, or as a result of
a <quote><link linkend="mbox-hook">mbox-hook</link></quote> command.
</para>
</sect2>

<sect2 id="message-cachedir">
<title>message&lowbar;cachedir</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Set this to a directory and mutt will cache copies of messages from
your IMAP and POP servers here. You are free to remove entries at any
time.
</para>
<para>
When setting this variable to a directory, mutt needs to fetch every
remote message only once and can perform regular expression searches
as fast as for local folders.
</para>
<para>
Also see the <link linkend="message-cache-clean">&dollar;message&lowbar;cache&lowbar;clean</link> variable.
</para>
</sect2>

<sect2 id="message-cache-clean">
<title>message&lowbar;cache&lowbar;clean</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will clean out obsolete entries from the message cache when
the mailbox is synchronized. You probably only want to set it
every once in a while, since it can be a little slow
(especially for large folders).
</para>
</sect2>

<sect2 id="message-format">
<title>message&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&percnt;s</literal></quote></literallayout>

<para>
This is the string displayed in the <quote>attachment</quote> menu for
attachments of type <literal>message/rfc822</literal>.  For a full listing of defined
<literal>printf(3)</literal>-like sequences see the section on <link linkend="index-format">&dollar;index&lowbar;format</link>.
</para>
</sect2>

<sect2 id="narrow-tree">
<title>narrow&lowbar;tree</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable, when <emphasis>set</emphasis>, makes the thread tree narrower, allowing
deeper threads to fit on the screen.
</para>
</sect2>

<sect2 id="net-inc">
<title>net&lowbar;inc</title>
<literallayout>Type: number
Default: 10</literallayout>

<para>
Operations that expect to transfer a large amount of data over the
network will update their progress every <link linkend="net-inc">&dollar;net&lowbar;inc</link> kilobytes.
If set to 0, no progress messages will be displayed.
</para>
<para>
See also <link linkend="read-inc">&dollar;read&lowbar;inc</link>, <link linkend="write-inc">&dollar;write&lowbar;inc</link> and <link linkend="net-inc">&dollar;net&lowbar;inc</link>.
</para>
</sect2>

<sect2 id="pager">
<title>pager</title>
<literallayout>Type: path
Default: <quote><literal>builtin</literal></quote></literallayout>

<para>
This variable specifies which pager you would like to use to view
messages. The value <quote>builtin</quote> means to use the builtin pager, otherwise this
variable should specify the pathname of the external pager you would
like to use.
</para>
<para>
Using an external pager may have some disadvantages: Additional
keystrokes are necessary because you can't call mutt functions
directly from the pager, and screen resizes cause lines longer than
the screen width to be badly formatted in the help menu.
</para>
</sect2>

<sect2 id="pager-context">
<title>pager&lowbar;context</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
This variable controls the number of lines of context that are given
when displaying the next or previous page in the internal pager.  By
default, Mutt will display the line after the last one on the screen
at the top of the next page (0 lines of context).
</para>
</sect2>

<sect2 id="pager-format">
<title>pager&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>-&percnt;Z- &percnt;C/&percnt;m: &percnt;-20.20n   &percnt;s&percnt;*  -- (&percnt;P)</literal></quote></literallayout>

<para>
This variable controls the format of the one-line message <quote>status</quote>
displayed before each message in either the internal or an external
pager.  The valid sequences are listed in the <link linkend="index-format">&dollar;index&lowbar;format</link>
section.
</para>
</sect2>

<sect2 id="pager-index-lines">
<title>pager&lowbar;index&lowbar;lines</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
Determines the number of lines of a mini-index which is shown when in
the pager.  The current message, unless near the top or bottom of the
folder, will be roughly one third of the way down this mini-index,
giving the reader the context of a few messages before and after the
message.  This is useful, for example, to determine how many messages
remain to be read in the current thread.  One of the lines is reserved
for the status bar from the index, so a setting of 6
will only show 5 lines of the actual index.  A value of 0 results in
no index being shown.  If the number of messages in the current folder
is less than <link linkend="pager-index-lines">&dollar;pager&lowbar;index&lowbar;lines</link>, then the index will only use as
many lines as it needs.
</para>
</sect2>

<sect2 id="pager-stop">
<title>pager&lowbar;stop</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, the internal-pager will <emphasis role="bold">not</emphasis> move to the next message
when you are at the end of a message and invoke the <literal>&lt;next-page&gt;</literal>
function.
</para>
</sect2>

<sect2 id="crypt-autosign">
<title>crypt&lowbar;autosign</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable will cause Mutt to always attempt to
cryptographically sign outgoing messages.  This can be overridden
by use of the pgp menu, when signing is not required or
encryption is requested as well. If <link linkend="smime-is-default">&dollar;smime&lowbar;is&lowbar;default</link> is <emphasis>set</emphasis>,
then OpenSSL is used instead to create S/MIME messages and settings can
be overridden by use of the smime menu instead of the pgp menu.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-autoencrypt">
<title>crypt&lowbar;autoencrypt</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable will cause Mutt to always attempt to PGP
encrypt outgoing messages.  This is probably only useful in
connection to the <quote><link linkend="send-hook">send-hook</link></quote> command.  It can be overridden
by use of the pgp menu, when encryption is not required or
signing is requested as well.  If <link linkend="smime-is-default">&dollar;smime&lowbar;is&lowbar;default</link> is <emphasis>set</emphasis>,
then OpenSSL is used instead to create S/MIME messages and
settings can be overridden by use of the smime menu instead.
(Crypto only)
</para>
</sect2>

<sect2 id="pgp-ignore-subkeys">
<title>pgp&lowbar;ignore&lowbar;subkeys</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Setting this variable will cause Mutt to ignore OpenPGP subkeys. Instead,
the principal key will inherit the subkeys' capabilities.  <emphasis>Unset</emphasis> this
if you want to play interesting key selection games.
(PGP only)
</para>
</sect2>

<sect2 id="crypt-replyencrypt">
<title>crypt&lowbar;replyencrypt</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, automatically PGP or OpenSSL encrypt replies to messages which are
encrypted.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-replysign">
<title>crypt&lowbar;replysign</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, automatically PGP or OpenSSL sign replies to messages which are
signed.
</para>
<para>
<emphasis role="bold">Note:</emphasis> this does not work on messages that are encrypted
<emphasis>and</emphasis> signed!
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-replysignencrypted">
<title>crypt&lowbar;replysignencrypted</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, automatically PGP or OpenSSL sign replies to messages
which are encrypted. This makes sense in combination with
<link linkend="crypt-replyencrypt">&dollar;crypt&lowbar;replyencrypt</link>, because it allows you to sign all
messages which are automatically encrypted.  This works around
the problem noted in <link linkend="crypt-replysign">&dollar;crypt&lowbar;replysign</link>, that mutt is not able
to find out whether an encrypted message is also signed.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-timestamp">
<title>crypt&lowbar;timestamp</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will include a time stamp in the lines surrounding
PGP or S/MIME output, so spoofing such lines is more difficult.
If you are using colors to mark these lines, and rely on these,
you may <emphasis>unset</emphasis> this setting.
(Crypto only)
</para>
</sect2>

<sect2 id="pgp-use-gpg-agent">
<title>pgp&lowbar;use&lowbar;gpg&lowbar;agent</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will use a possibly-running <literal>gpg-agent(1)</literal> process.
(PGP only)
</para>
</sect2>

<sect2 id="crypt-verify-sig">
<title>crypt&lowbar;verify&lowbar;sig</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
If <emphasis><quote>yes</quote></emphasis>, always attempt to verify PGP or S/MIME signatures.
If <emphasis><quote>ask-*</quote></emphasis>, ask whether or not to verify the signature.
If &bsol;Fi<quote>no</quote>, never attempt to verify cryptographic signatures.
(Crypto only)
</para>
</sect2>

<sect2 id="smime-is-default">
<title>smime&lowbar;is&lowbar;default</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
The default behaviour of mutt is to use PGP on all auto-sign/encryption
operations. To override and to use OpenSSL instead this must be <emphasis>set</emphasis>.
However, this has no effect while replying, since mutt will automatically
select the same application that was used to sign/encrypt the original
message.  (Note that this variable can be overridden by unsetting <link linkend="crypt-autosmime">&dollar;crypt&lowbar;autosmime</link>.)
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-ask-cert-label">
<title>smime&lowbar;ask&lowbar;cert&lowbar;label</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This flag controls whether you want to be asked to enter a label
for a certificate about to be added to the database or not. It is
<emphasis>set</emphasis> by default.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-decrypt-use-default-key">
<title>smime&lowbar;decrypt&lowbar;use&lowbar;default&lowbar;key</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis> (default) this tells mutt to use the default key for decryption. Otherwise,
if managing multiple certificate-key-pairs, mutt will try to use the mailbox-address
to determine the key to use. It will ask you to supply a key, if it can't find one.
(S/MIME only)
</para>
</sect2>

<sect2 id="pgp-entry-format">
<title>pgp&lowbar;entry&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&percnt;4n &percnt;t&percnt;f &percnt;4l/0x&percnt;k &percnt;-4a &percnt;2c &percnt;u</literal></quote></literallayout>

<para>
This variable allows you to customize the PGP key selection menu to
your personal taste. This string is similar to <link linkend="index-format">&dollar;index&lowbar;format</link>, but
has its own set of <literal>printf(3)</literal>-like sequences:

</para>

<variablelist>
<varlistentry><term>&percnt;n     </term>
<listitem><para>number
</para></listitem></varlistentry>
<varlistentry><term>&percnt;k     </term>
<listitem><para>key id
</para></listitem></varlistentry>
<varlistentry><term>&percnt;u     </term>
<listitem><para>user id
</para></listitem></varlistentry>
<varlistentry><term>&percnt;a     </term>
<listitem><para>algorithm
</para></listitem></varlistentry>
<varlistentry><term>&percnt;l     </term>
<listitem><para>key length
</para></listitem></varlistentry>
<varlistentry><term>&percnt;f     </term>
<listitem><para>flags
</para></listitem></varlistentry>
<varlistentry><term>&percnt;c     </term>
<listitem><para>capabilities
</para></listitem></varlistentry>
<varlistentry><term>&percnt;t     </term>
<listitem><para>trust/validity of the key-uid association
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&lsqb;&lt;s&gt;&rsqb; </term>
<listitem><para>date of the key where &lt;s&gt; is an <literal>strftime(3)</literal> expression
</para></listitem></varlistentry></variablelist>

<para>
(PGP only)
</para>
</sect2>

<sect2 id="pgp-good-sign">
<title>pgp&lowbar;good&lowbar;sign</title>
<literallayout>Type: regular expression
Default: (empty)</literallayout>

<para>
If you assign a text to this variable, then a PGP signature is only
considered verified if the output from <link linkend="pgp-verify-command">&dollar;pgp&lowbar;verify&lowbar;command</link> contains
the text. Use this variable if the exit code from the command is 0
even for bad signatures.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-check-exit">
<title>pgp&lowbar;check&lowbar;exit</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will check the exit code of the PGP subprocess when
signing or encrypting.  A non-zero exit code means that the
subprocess failed.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-long-ids">
<title>pgp&lowbar;long&lowbar;ids</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, use 64 bit PGP key IDs, if <emphasis>unset</emphasis> use the normal 32 bit key IDs.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-retainable-sigs">
<title>pgp&lowbar;retainable&lowbar;sigs</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, signed and encrypted messages will consist of nested
<literal>multipart/signed</literal> and <literal>multipart/encrypted</literal> body parts.
</para>
<para>
This is useful for applications like encrypted and signed mailing
lists, where the outer layer (<literal>multipart/encrypted</literal>) can be easily
removed, while the inner <literal>multipart/signed</literal> part is retained.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-autoinline">
<title>pgp&lowbar;autoinline</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This option controls whether Mutt generates old-style inline
(traditional) PGP encrypted or signed messages under certain
circumstances.  This can be overridden by use of the pgp menu,
when inline is not required.
</para>
<para>
Note that Mutt might automatically use PGP/MIME for messages
which consist of more than a single MIME part.  Mutt can be
configured to ask before sending PGP/MIME messages when inline
(traditional) would not work.
</para>
<para>
Also see the <link linkend="pgp-mime-auto">&dollar;pgp&lowbar;mime&lowbar;auto</link> variable.
</para>
<para>
Also note that using the old-style PGP message format is <emphasis role="bold">strongly</emphasis>
<emphasis role="bold">deprecated</emphasis>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-replyinline">
<title>pgp&lowbar;replyinline</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable will cause Mutt to always attempt to
create an inline (traditional) message when replying to a
message which is PGP encrypted/signed inline.  This can be
overridden by use of the pgp menu, when inline is not
required.  This option does not automatically detect if the
(replied-to) message is inline; instead it relies on Mutt
internals for previously checked/flagged messages.
</para>
<para>
Note that Mutt might automatically use PGP/MIME for messages
which consist of more than a single MIME part.  Mutt can be
configured to ask before sending PGP/MIME messages when inline
(traditional) would not work.
</para>
<para>
Also see the <link linkend="pgp-mime-auto">&dollar;pgp&lowbar;mime&lowbar;auto</link> variable.
</para>
<para>
Also note that using the old-style PGP message format is <emphasis role="bold">strongly</emphasis>
<emphasis role="bold">deprecated</emphasis>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-show-unusable">
<title>pgp&lowbar;show&lowbar;unusable</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will display non-usable keys on the PGP key selection
menu.  This includes keys which have been revoked, have expired, or
have been marked as <quote>disabled</quote> by the user.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-sign-as">
<title>pgp&lowbar;sign&lowbar;as</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
If you have more than one key pair, this option allows you to specify
which of your private keys to use.  It is recommended that you use the
keyid form to specify your key (e.g. <literal>0x00112233</literal>).
(PGP only)
</para>
</sect2>

<sect2 id="pgp-strict-enc">
<title>pgp&lowbar;strict&lowbar;enc</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will automatically encode PGP/MIME signed messages as
quoted-printable.  Please note that unsetting this variable may
lead to problems with non-verifyable PGP signatures, so only change
this if you know what you are doing.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-timeout">
<title>pgp&lowbar;timeout</title>
<literallayout>Type: number
Default: 300</literallayout>

<para>
The number of seconds after which a cached passphrase will expire if
not used.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-sort-keys">
<title>pgp&lowbar;sort&lowbar;keys</title>
<literallayout>Type: sort order
Default: address</literallayout>

<para>
Specifies how the entries in the pgp menu are sorted. The
following are legal values:

</para>

<variablelist>
<varlistentry><term>address </term>
<listitem><para>sort alphabetically by user id
</para></listitem></varlistentry>
<varlistentry><term>keyid   </term>
<listitem><para>sort alphabetically by key id
</para></listitem></varlistentry>
<varlistentry><term>date    </term>
<listitem><para>sort by key creation date
</para></listitem></varlistentry>
<varlistentry><term>trust   </term>
<listitem><para>sort by the trust of the key
</para></listitem></varlistentry></variablelist>

<para>
If you prefer reverse order of the above values, prefix it with
<quote>reverse-</quote>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-mime-auto">
<title>pgp&lowbar;mime&lowbar;auto</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
This option controls whether Mutt will prompt you for
automatically sending a (signed/encrypted) message using
PGP/MIME when inline (traditional) fails (for any reason).
</para>
<para>
Also note that using the old-style PGP message format is <emphasis role="bold">strongly</emphasis>
<emphasis role="bold">deprecated</emphasis>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-auto-decode">
<title>pgp&lowbar;auto&lowbar;decode</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will automatically attempt to decrypt traditional PGP
messages whenever the user performs an operation which ordinarily would
result in the contents of the message being operated on.  For example,
if the user displays a pgp-traditional message which has not been manually
checked with the <literal><link linkend="check-traditional-pgp">&lt;check-traditional-pgp&gt;</link></literal> function, mutt will automatically
check the message for traditional pgp.
</para>
</sect2>

<sect2 id="pgp-mime-signature-filename">
<title>pgp&lowbar;mime&lowbar;signature&lowbar;filename</title>
<literallayout>Type: string
Default: <quote><literal>signature.asc</literal></quote></literallayout>

<para>
This option sets the filename used for signature parts in PGP/MIME
signed messages.
</para>
</sect2>

<sect2 id="pgp-mime-signature-description">
<title>pgp&lowbar;mime&lowbar;signature&lowbar;description</title>
<literallayout>Type: string
Default: <quote><literal>Digital signature</literal></quote></literallayout>

<para>
This option sets the Content-Description used for signature parts in
PGP/MIME signed messages.
</para>
</sect2>

<sect2 id="pgp-decode-command">
<title>pgp&lowbar;decode&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This format strings specifies a command which is used to decode
application/pgp attachments.
</para>
<para>
The PGP command formats have their own set of <literal>printf(3)</literal>-like sequences:

</para>

<variablelist>
<varlistentry><term>&percnt;p </term>
<listitem><para>Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty
string otherwise. Note: This may be used with a &percnt;? construct.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;f </term>
<listitem><para>Expands to the name of a file containing a message.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;s </term>
<listitem><para>Expands to the name of a file containing the signature part
           of a <literal>multipart/signed</literal> attachment when verifying it.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;a </term>
<listitem><para>The value of <link linkend="pgp-sign-as">&dollar;pgp&lowbar;sign&lowbar;as</link>.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;r </term>
<listitem><para>One or more key IDs.
</para></listitem></varlistentry></variablelist>

<para>
For examples on how to configure these formats for the various versions
of PGP which are floating around, see the pgp and gpg sample configuration files in
the <literal>samples/</literal> subdirectory which has been installed on your system
alongside the documentation.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-getkeys-command">
<title>pgp&lowbar;getkeys&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is invoked whenever mutt will need public key information.
Of the sequences supported by <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link>, &percnt;r is the only
<literal>printf(3)</literal>-like sequence used with this format.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-verify-command">
<title>pgp&lowbar;verify&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to verify PGP signatures.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-decrypt-command">
<title>pgp&lowbar;decrypt&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to decrypt a PGP encrypted message.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-clearsign-command">
<title>pgp&lowbar;clearsign&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This format is used to create an old-style <quote>clearsigned</quote> PGP
message.  Note that the use of this format is <emphasis role="bold">strongly</emphasis>
<emphasis role="bold">deprecated</emphasis>.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-sign-command">
<title>pgp&lowbar;sign&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to create the detached PGP signature for a
<literal>multipart/signed</literal> PGP/MIME body part.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-encrypt-sign-command">
<title>pgp&lowbar;encrypt&lowbar;sign&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to both sign and encrypt a body part.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-encrypt-only-command">
<title>pgp&lowbar;encrypt&lowbar;only&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to encrypt a body part without signing it.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-import-command">
<title>pgp&lowbar;import&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to import a key from a message into
the user's public key ring.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-export-command">
<title>pgp&lowbar;export&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to export a public key from the user's
key ring.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-verify-key-command">
<title>pgp&lowbar;verify&lowbar;key&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to verify key information from the key selection
menu.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-list-secring-command">
<title>pgp&lowbar;list&lowbar;secring&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to list the secret key ring's contents.  The
output format must be analogous to the one used by:

</para>

<screen>
gpg --list-keys --with-colons.

</screen><para>
This format is also generated by the <literal>pgpring</literal> utility which comes
with mutt.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-list-pubring-command">
<title>pgp&lowbar;list&lowbar;pubring&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to list the public key ring's contents.  The
output format must be analogous to the one used by

</para>

<screen>
gpg --list-keys --with-colons.

</screen><para>
This format is also generated by the <literal>pgpring</literal> utility which comes
with mutt.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">&dollar;pgp&lowbar;decode&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="forward-decrypt">
<title>forward&lowbar;decrypt</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls the handling of encrypted messages when forwarding a message.
When <emphasis>set</emphasis>, the outer layer of encryption is stripped off.  This
variable is only used if <link linkend="mime-forward">&dollar;mime&lowbar;forward</link> is <emphasis>set</emphasis> and
<link linkend="mime-forward-decode">&dollar;mime&lowbar;forward&lowbar;decode</link> is <emphasis>unset</emphasis>.
(PGP only)
</para>
</sect2>

<sect2 id="smime-timeout">
<title>smime&lowbar;timeout</title>
<literallayout>Type: number
Default: 300</literallayout>

<para>
The number of seconds after which a cached passphrase will expire if
not used.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-encrypt-with">
<title>smime&lowbar;encrypt&lowbar;with</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This sets the algorithm that should be used for encryption.
Valid choices are <quote>des</quote>, <quote>des3</quote>, <quote>rc2-40</quote>, <quote>rc2-64</quote>, <quote>rc2-128</quote>.
If <emphasis>unset</emphasis>, <quote>3des</quote> (TripleDES) is used.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-keys">
<title>smime&lowbar;keys</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
storage and retrieval of keys/certs by itself. This is very basic right now,
and stores keys and certificates in two different directories, both
named as the hash-value retrieved from OpenSSL. There is an index file
which contains mailbox-address keyid pair, and which can be manually
edited. This option points to the location of the private keys.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-ca-location">
<title>smime&lowbar;ca&lowbar;location</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable contains the name of either a directory, or a file which
contains trusted certificates for use with OpenSSL.
(S/MIME only)
</para>
<para>
<emphasis role="bold">Note:</emphasis> On Debian systems, this defaults to the first existing file in
the following list: &tilde;/.smime/ca-certificates.crt &tilde;/.smime/ca-bundle.crt
/etc/ssl/certs/ca-certificates.crt.
</para>
</sect2>

<sect2 id="smime-certificates">
<title>smime&lowbar;certificates</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
storage and retrieval of keys by itself. This is very basic right
now, and keys and certificates are stored in two different
directories, both named as the hash-value retrieved from
OpenSSL. There is an index file which contains mailbox-address
keyid pairs, and which can be manually edited. This option points to
the location of the certificates.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-decrypt-command">
<title>smime&lowbar;decrypt&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This format string specifies a command which is used to decrypt
<literal>application/x-pkcs7-mime</literal> attachments.
</para>
<para>
The OpenSSL command formats have their own set of <literal>printf(3)</literal>-like sequences
similar to PGP's:

</para>

<variablelist>
<varlistentry><term>&percnt;f </term>
<listitem><para>Expands to the name of a file containing a message.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;s </term>
<listitem><para>Expands to the name of a file containing the signature part
           of a <literal>multipart/signed</literal> attachment when verifying it.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;k </term>
<listitem><para>The key-pair specified with <link linkend="smime-default-key">&dollar;smime&lowbar;default&lowbar;key</link>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;c </term>
<listitem><para>One or more certificate IDs.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;a </term>
<listitem><para>The algorithm used for encryption.
</para></listitem></varlistentry>
<varlistentry><term>&percnt;C </term>
<listitem><para>CA location:  Depending on whether <link linkend="smime-ca-location">&dollar;smime&lowbar;ca&lowbar;location</link>
           points to a directory or file, this expands to
           <quote>-CApath <link linkend="smime-ca-location">&dollar;smime&lowbar;ca&lowbar;location</link></quote> or <quote>-CAfile <link linkend="smime-ca-location">&dollar;smime&lowbar;ca&lowbar;location</link></quote>.
</para></listitem></varlistentry></variablelist>

<para>
For examples on how to configure these formats, see the <literal>smime.rc</literal> in
the <literal>samples/</literal> subdirectory which has been installed on your system
alongside the documentation.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-verify-command">
<title>smime&lowbar;verify&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to verify S/MIME signatures of type <literal>multipart/signed</literal>.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-verify-opaque-command">
<title>smime&lowbar;verify&lowbar;opaque&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to verify S/MIME signatures of type
<literal>application/x-pkcs7-mime</literal>.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-sign-command">
<title>smime&lowbar;sign&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to created S/MIME signatures of type
<literal>multipart/signed</literal>, which can be read by all mail clients.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-sign-opaque-command">
<title>smime&lowbar;sign&lowbar;opaque&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to created S/MIME signatures of type
<literal>application/x-pkcs7-signature</literal>, which can only be handled by mail
clients supporting the S/MIME extension.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-encrypt-command">
<title>smime&lowbar;encrypt&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to create encrypted S/MIME messages.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-pk7out-command">
<title>smime&lowbar;pk7out&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to extract PKCS7 structures of S/MIME signatures,
in order to extract the public X509 certificate(s).
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-get-cert-command">
<title>smime&lowbar;get&lowbar;cert&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to extract X509 certificates from a PKCS7 structure.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-get-signer-cert-command">
<title>smime&lowbar;get&lowbar;signer&lowbar;cert&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to extract only the signers X509 certificate from a S/MIME
signature, so that the certificate's owner may get compared to the
email's <quote>From:</quote> field.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-import-cert-command">
<title>smime&lowbar;import&lowbar;cert&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to import a certificate via smime&lowbar;keys.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-get-cert-email-command">
<title>smime&lowbar;get&lowbar;cert&lowbar;email&lowbar;command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to extract the mail address(es) used for storing
X509 certificates, and for verification purposes (to check whether the
certificate was issued for the sender's mailbox).
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">&dollar;smime&lowbar;decrypt&lowbar;command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-default-key">
<title>smime&lowbar;default&lowbar;key</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is the default key-pair to use for signing. This must be set to the
keyid (the hash-value that OpenSSL generates) to work properly
(S/MIME only)
</para>
</sect2>

<sect2 id="ssl-client-cert">
<title>ssl&lowbar;client&lowbar;cert</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
The file containing a client certificate and its associated private
key.
</para>
</sect2>

<sect2 id="ssl-force-tls">
<title>ssl&lowbar;force&lowbar;tls</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If this variable is <emphasis>set</emphasis>, Mutt will require that all connections
to remote servers be encrypted. Furthermore it will attempt to
negotiate TLS even if the server does not advertise the capability,
since it would otherwise have to abort the connection anyway. This
option supersedes <link linkend="ssl-starttls">&dollar;ssl&lowbar;starttls</link>.
</para>
</sect2>

<sect2 id="ssl-starttls">
<title>ssl&lowbar;starttls</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis> (the default), mutt will attempt to use <literal>STARTTLS</literal> on servers
advertising the capability. When <emphasis>unset</emphasis>, mutt will not attempt to
use <literal>STARTTLS</literal> regardless of the server's capabilities.
</para>
</sect2>

<sect2 id="certificate-file">
<title>certificate&lowbar;file</title>
<literallayout>Type: path
Default: <quote><literal>&tilde;/.mutt&lowbar;certificates</literal></quote></literallayout>

<para>
This variable specifies the file where the certificates you trust
are saved. When an unknown certificate is encountered, you are asked
if you accept it or not. If you accept it, the certificate can also
be saved in this file and further connections are automatically
accepted.
</para>
<para>
You can also manually add CA certificates in this file. Any server
certificate that is signed with one of these CA certificates is
also automatically accepted.
</para>
<para>
Example:

</para>

<screen>
set certificate_file=~/.mutt/certificates

</screen></sect2>

<sect2 id="ssl-use-sslv3">
<title>ssl&lowbar;use&lowbar;sslv3</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable specifies whether to attempt to use SSLv3 in the
SSL authentication process.
</para>
</sect2>

<sect2 id="ssl-use-tlsv1">
<title>ssl&lowbar;use&lowbar;tlsv1</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable specifies whether to attempt to use TLSv1 in the
SSL authentication process.
</para>
</sect2>

<sect2 id="ssl-min-dh-prime-bits">
<title>ssl&lowbar;min&lowbar;dh&lowbar;prime&lowbar;bits</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
This variable specifies the minimum acceptable prime size (in bits)
for use in any Diffie-Hellman key exchange. A value of 0 will use
the default from the GNUTLS library.
</para>
</sect2>

<sect2 id="ssl-ca-certificates-file">
<title>ssl&lowbar;ca&lowbar;certificates&lowbar;file</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable specifies a file containing trusted CA certificates.
Any server certificate that is signed with one of these CA
certificates is also automatically accepted.
</para>
<para>
Example:

</para>

<screen>
set ssl_ca_certificates_file=/etc/ssl/certs/ca-certificates.crt

</screen><para>
<emphasis role="bold">Note:</emphasis> On Debian systems, this variable defaults to the example
mentioned. This file is managed by the <quote>ca-certificates</quote> package.
</para>
</sect2>

<sect2 id="pipe-split">
<title>pipe&lowbar;split</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Used in connection with the <literal>&lt;pipe-message&gt;</literal> function following
<literal>&lt;tag-prefix&gt;</literal>.  If this variable is <emphasis>unset</emphasis>, when piping a list of
tagged messages Mutt will concatenate the messages and will pipe them
all concatenated.  When <emphasis>set</emphasis>, Mutt will pipe the messages one by one.
In both cases the messages are piped in the current sorted order,
and the <link linkend="pipe-sep">&dollar;pipe&lowbar;sep</link> separator is added after each message.
</para>
</sect2>

<sect2 id="pipe-decode">
<title>pipe&lowbar;decode</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Used in connection with the <literal>&lt;pipe-message&gt;</literal> command.  When <emphasis>unset</emphasis>,
Mutt will pipe the messages without any preprocessing. When <emphasis>set</emphasis>, Mutt
will weed headers and will attempt to decode the messages
first.
</para>
</sect2>

<sect2 id="pipe-sep">
<title>pipe&lowbar;sep</title>
<literallayout>Type: string
Default: <quote><literal>&bsol;n</literal></quote></literallayout>

<para>
The separator to add between messages when piping a list of tagged
messages to an external Unix command.
</para>
</sect2>

<sect2 id="pop-authenticators">
<title>pop&lowbar;authenticators</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an POP server, in the order mutt should
try them.  Authentication methods are either <quote>user</quote>, <quote>apop</quote> or any
SASL mechanism, eg <quote>digest-md5</quote>, <quote>gssapi</quote> or <quote>cram-md5</quote>.
This option is case-insensitive. If this option is <emphasis>unset</emphasis>
(the default) mutt will try all available methods, in order from
most-secure to least-secure.
</para>
<para>
Example:

</para>

<screen>
set pop_authenticators="digest-md5:apop:user"

</screen></sect2>

<sect2 id="pop-auth-try-all">
<title>pop&lowbar;auth&lowbar;try&lowbar;all</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will try all available authentication methods.
When <emphasis>unset</emphasis>, Mutt will only fall back to other authentication
methods if the previous methods are unavailable. If a method is
available but authentication fails, Mutt will not connect to the POP server.
</para>
</sect2>

<sect2 id="pop-checkinterval">
<title>pop&lowbar;checkinterval</title>
<literallayout>Type: number
Default: 60</literallayout>

<para>
This variable configures how often (in seconds) mutt should look for
new mail in the currently selected mailbox if it is a POP mailbox.
</para>
</sect2>

<sect2 id="pop-delete">
<title>pop&lowbar;delete</title>
<literallayout>Type: quadoption
Default: ask-no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will delete successfully downloaded messages from the POP
server when using the <literal><link linkend="fetch-mail">&lt;fetch-mail&gt;</link></literal> function.  When <emphasis>unset</emphasis>, Mutt will
download messages but also leave them on the POP server.
</para>
</sect2>

<sect2 id="pop-host">
<title>pop&lowbar;host</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
The name of your POP server for the <literal><link linkend="fetch-mail">&lt;fetch-mail&gt;</link></literal> function.  You
can also specify an alternative port, username and password, ie:

</para>

<screen>
[pop[s]://][username[:password]@]popserver[:port]

</screen><para>
where <quote>&lsqb;...&rsqb;</quote> denotes an optional part.
</para>
</sect2>

<sect2 id="pop-last">
<title>pop&lowbar;last</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If this variable is <emphasis>set</emphasis>, mutt will try to use the <quote><literal>LAST</literal></quote> POP command
for retrieving only unread messages from the POP server when using
the <literal><link linkend="fetch-mail">&lt;fetch-mail&gt;</link></literal> function.
</para>
</sect2>

<sect2 id="pop-reconnect">
<title>pop&lowbar;reconnect</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not Mutt will try to reconnect to the POP server if
the connection is lost.
</para>
</sect2>

<sect2 id="pop-user">
<title>pop&lowbar;user</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Your login name on the POP server.
</para>
<para>
This variable defaults to your user name on the local machine.
</para>
</sect2>

<sect2 id="pop-pass">
<title>pop&lowbar;pass</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Specifies the password for your POP account.  If <emphasis>unset</emphasis>, Mutt will
prompt you for your password when you open a POP mailbox.
</para>
<para>
<emphasis role="bold">Warning</emphasis>: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc
even if you are the only one who can read the file.
</para>
</sect2>

<sect2 id="post-indent-string">
<title>post&lowbar;indent&lowbar;string</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Similar to the <link linkend="attribution">&dollar;attribution</link> variable, Mutt will append this
string after the inclusion of a message which is being replied to.
</para>
</sect2>

<sect2 id="postpone">
<title>postpone</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not messages are saved in the <link linkend="postponed">&dollar;postponed</link>
mailbox when you elect not to send immediately.
</para>
<para>
Also see the <link linkend="recall">&dollar;recall</link> variable.
</para>
</sect2>

<sect2 id="postponed">
<title>postponed</title>
<literallayout>Type: path
Default: <quote><literal>&tilde;/postponed</literal></quote></literallayout>

<para>
Mutt allows you to indefinitely <quote><link linkend="postpone">postpone</link> sending a message</quote> which
you are editing.  When you choose to postpone a message, Mutt saves it
in the mailbox specified by this variable.
</para>
<para>
Also see the <link linkend="postpone">&dollar;postpone</link> variable.
</para>
</sect2>

<sect2 id="preconnect">
<title>preconnect</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
If <emphasis>set</emphasis>, a shell command to be executed if mutt fails to establish
a connection to the server. This is useful for setting up secure
connections, e.g. with <literal>ssh(1)</literal>. If the command returns a  nonzero
status, mutt gives up opening the server. Example:

</para>

<screen>
set preconnect="ssh -f -q -L 1234:mailhost.net:143 mailhost.net \
sleep 20 &lt; /dev/null &gt; /dev/null"

</screen><para>
Mailbox <quote>foo</quote> on <quote>mailhost.net</quote> can now be reached
as <quote>{localhost:1234}foo</quote>.
</para>
<para>
Note: For this example to work, you must be able to log in to the
remote machine without having to enter a password.
</para>
<para>
When set, Mutt uses the tunnel for all remote connections.
Please see <quote><link linkend="account-hook">account-hook</link></quote> in the manual for how to use different
tunnel commands per connection.
</para>
</sect2>

<sect2 id="print">
<title>print</title>
<literallayout>Type: quadoption
Default: ask-no</literallayout>

<para>
Controls whether or not Mutt really prints messages.
This is set to <quote>ask-no</quote> by default, because some people
accidentally hit <quote>p</quote> often.
</para>
</sect2>

<sect2 id="print-command">
<title>print&lowbar;command</title>
<literallayout>Type: path
Default: <quote><literal>lpr</literal></quote></literallayout>

<para>
This specifies the command pipe that should be used to print messages.
</para>
</sect2>

<sect2 id="print-decode">
<title>print&lowbar;decode</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Used in connection with the <literal>&lt;print-message&gt;</literal> command.  If this
option is <emphasis>set</emphasis>, the message is decoded before it is passed to the
external command specified by <link linkend="print-command">&dollar;print&lowbar;command</link>.  If this option
is <emphasis>unset</emphasis>, no processing will be applied to the message when
printing it.  The latter setting may be useful if you are using
some advanced printer filter which is able to properly format
e-mail messages for printing.
</para>
</sect2>

<sect2 id="print-split">
<title>print&lowbar;split</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Used in connection with the <literal>&lt;print-message&gt;</literal> command.  If this option
is <emphasis>set</emphasis>, the command specified by <link linkend="print-command">&dollar;print&lowbar;command</link> is executed once for
each message which is to be printed.  If this option is <emphasis>unset</emphasis>,
the command specified by <link linkend="print-command">&dollar;print&lowbar;command</link> is executed only once, and
all the messages are concatenated, with a form feed as the message
separator.
</para>
<para>
Those who use the <literal>enscript</literal>(1) program's mail-printing mode will
most likely want to <emphasis>set</emphasis> this option.
</para>
</sect2>

<sect2 id="prompt-after">
<title>prompt&lowbar;after</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If you use an <emphasis>external</emphasis> <link linkend="pager">&dollar;pager</link>, setting this variable will
cause Mutt to prompt you for a command when the pager exits rather
than returning to the index menu.  If <emphasis>unset</emphasis>, Mutt will return to the
index menu when the external pager exits.
</para>
</sect2>

<sect2 id="query-command">
<title>query&lowbar;command</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This specifies the command that mutt will use to make external address
queries.  The string should contain a <quote>&percnt;s</quote>, which will be substituted
with the query string the user types.  See <quote><link linkend="query">query</link></quote> for more
information.
</para>
</sect2>

<sect2 id="query-format">
<title>query&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>&percnt;4c &percnt;t &percnt;-25.25a &percnt;-25.25n &percnt;?e?(&percnt;e)?</literal></quote></literallayout>

<para>
This variable describes the format of the <quote>query</quote> menu. The
following <literal>printf(3)</literal>-style sequences are understood:

</para>

<variablelist>
<varlistentry><term>&percnt;a  </term>
<listitem><para>destination address
</para></listitem></varlistentry>
<varlistentry><term>&percnt;c  </term>
<listitem><para>current entry number
</para></listitem></varlistentry>
<varlistentry><term>&percnt;e  </term>
<listitem><para>extra information *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;n  </term>
<listitem><para>destination name
</para></listitem></varlistentry>
<varlistentry><term>&percnt;t  </term>
<listitem><para><quote>*</quote> if current entry is tagged, a space otherwise
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&gt;X </term>
<listitem><para>right justify the rest of the string and pad with <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&verbar;X </term>
<listitem><para>pad to the end of the line with <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;*X </term>
<listitem><para>soft-fill with character <quote>X</quote> as pad
</para></listitem></varlistentry></variablelist>

<para>
For an explanation of <quote>soft-fill</quote>, see the <link linkend="index-format">&dollar;index&lowbar;format</link> documentation.
</para>
<para>
* = can be optionally printed if nonzero, see the <link linkend="status-format">&dollar;status&lowbar;format</link> documentation.
</para>
</sect2>

<sect2 id="quit">
<title>quit</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This variable controls whether <quote>quit</quote> and <quote>exit</quote> actually quit
from mutt.  If this option is <emphasis>set</emphasis>, they do quit, if it is <emphasis>unset</emphasis>, they
have no effect, and if it is set to <emphasis>ask-yes</emphasis> or <emphasis>ask-no</emphasis>, you are
prompted for confirmation when you try to quit.
</para>
</sect2>

<sect2 id="quote-regexp">
<title>quote&lowbar;regexp</title>
<literallayout>Type: regular expression
Default: <quote><literal>&circ;(&lsqb; &bsol;t&rsqb;*&lsqb;&verbar;&gt;:}#&rsqb;)+</literal></quote></literallayout>

<para>
A regular expression used in the internal pager to determine quoted
sections of text in the body of a message. Quoted text may be filtered
out using the <literal>&lt;toggle-quoted&gt;</literal> command, or colored according to the
<quote>color quoted</quote> family of directives.
</para>
<para>
Higher levels of quoting may be colored differently (<quote>color quoted1</quote>,
<quote>color quoted2</quote>, etc.). The quoting level is determined by removing
the last character from the matched text and recursively reapplying
the regular expression until it fails to produce a match.
</para>
<para>
Match detection may be overridden by the <link linkend="smileys">&dollar;smileys</link> regular expression.
</para>
</sect2>

<sect2 id="read-inc">
<title>read&lowbar;inc</title>
<literallayout>Type: number
Default: 10</literallayout>

<para>
If set to a value greater than 0, Mutt will display which message it
is currently on when reading a mailbox or when performing search actions
such as search and limit. The message is printed after
this many messages have been read or searched (e.g., if set to 25, Mutt will
print a message when it is at message 25, and then again when it gets
to message 50).  This variable is meant to indicate progress when
reading or searching large mailboxes which may take some time.
When set to 0, only a single message will appear before the reading
the mailbox.
</para>
<para>
Also see the <link linkend="write-inc">&dollar;write&lowbar;inc</link>, <link linkend="net-inc">&dollar;net&lowbar;inc</link> and <link linkend="time-inc">&dollar;time&lowbar;inc</link> variables and the
<quote><link linkend="tuning">tuning</link></quote> section of the manual for performance considerations.
</para>
</sect2>

<sect2 id="read-only">
<title>read&lowbar;only</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, all folders are opened in read-only mode.
</para>
</sect2>

<sect2 id="realname">
<title>realname</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable specifies what <quote>real</quote> or <quote>personal</quote> name should be used
when sending messages.
</para>
<para>
By default, this is the GECOS field from <literal>/etc/passwd</literal>.  Note that this
variable will <emphasis>not</emphasis> be used when the user has set a real name
in the <link linkend="from">&dollar;from</link> variable.
</para>
</sect2>

<sect2 id="recall">
<title>recall</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not Mutt recalls postponed messages
when composing a new message.
</para>
<para>
<emphasis>Setting</emphasis> this variable to is not generally useful, and thus not
recommended.
</para>
<para>
Also see <link linkend="postponed">&dollar;postponed</link> variable.
</para>
</sect2>

<sect2 id="record">
<title>record</title>
<literallayout>Type: path
Default: <quote><literal>&tilde;/sent</literal></quote></literallayout>

<para>
This specifies the file into which your outgoing messages should be
appended.  (This is meant as the primary method for saving a copy of
your messages, but another way to do this is using the <quote><link linkend="my-hdr">my&lowbar;hdr</link></quote>
command to create a <quote>Bcc:</quote> field with your email address in it.)
</para>
<para>
The value of <emphasis><link linkend="record">&dollar;record</link></emphasis> is overridden by the <link linkend="force-name">&dollar;force&lowbar;name</link> and
<link linkend="save-name">&dollar;save&lowbar;name</link> variables, and the <quote><link linkend="fcc-hook">fcc-hook</link></quote> command.
</para>
</sect2>

<sect2 id="reply-regexp">
<title>reply&lowbar;regexp</title>
<literallayout>Type: regular expression
Default: <quote><literal>&circ;(re(&lsqb;&bsol;&lsqb;0-9&bsol;&rsqb;+&rsqb;)*&verbar;aw):&lsqb; &bsol;t&rsqb;*</literal></quote></literallayout>

<para>
A regular expression used to recognize reply messages when threading
and replying. The default value corresponds to the English &quot;Re:&quot; and
the German &quot;Aw:&quot;.
</para>
</sect2>

<sect2 id="reply-self">
<title>reply&lowbar;self</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>unset</emphasis> and you are replying to a message sent by you, Mutt will
assume that you want to reply to the recipients of that message rather
than to yourself.
</para>
<para>
Also see the <quote><link linkend="alternates">alternates</link></quote> command.
</para>
</sect2>

<sect2 id="reply-to">
<title>reply&lowbar;to</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
If <emphasis>set</emphasis>, when replying to a message, Mutt will use the address listed
in the Reply-to: header as the recipient of the reply.  If <emphasis>unset</emphasis>,
it will use the address in the From: header field instead.  This
option is useful for reading a mailing list that sets the Reply-To:
header field to the list address and you want to send a private
message to the author of a message.
</para>
</sect2>

<sect2 id="resolve">
<title>resolve</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, the cursor will be automatically advanced to the next
(possibly undeleted) message whenever a command that modifies the
current message is executed.
</para>
</sect2>

<sect2 id="reverse-alias">
<title>reverse&lowbar;alias</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable controls whether or not Mutt will display the <quote>personal</quote>
name from your aliases in the index menu if it finds an alias that
matches the message's sender.  For example, if you have the following
alias:

</para>

<screen>
alias juser abd30425@somewhere.net (Joe User)

</screen><para>
and then you receive mail which contains the following header:

</para>

<screen>
From: abd30425@somewhere.net

</screen><para>
It would be displayed in the index menu as <quote>Joe User</quote> instead of
<quote>abd30425@somewhere.net.</quote>  This is useful when the person's e-mail
address is not human friendly.
</para>
</sect2>

<sect2 id="reverse-name">
<title>reverse&lowbar;name</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
It may sometimes arrive that you receive mail to a certain machine,
move the messages to another machine, and reply to some the messages
from there.  If this variable is <emphasis>set</emphasis>, the default <emphasis>From:</emphasis> line of
the reply messages is built using the address where you received the
messages you are replying to <emphasis role="bold">if</emphasis> that address matches your
<quote><link linkend="alternates">alternates</link></quote>.  If the variable is <emphasis>unset</emphasis>, or the address that would be
used doesn't match your <quote><link linkend="alternates">alternates</link></quote>, the <emphasis>From:</emphasis> line will use
your address on the current machine.
</para>
<para>
Also see the <quote><link linkend="alternates">alternates</link></quote> command.
</para>
</sect2>

<sect2 id="reverse-realname">
<title>reverse&lowbar;realname</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable fine-tunes the behaviour of the <link linkend="reverse-name">&dollar;reverse&lowbar;name</link> feature.
When it is <emphasis>set</emphasis>, mutt will use the address from incoming messages as-is,
possibly including eventual real names.  When it is <emphasis>unset</emphasis>, mutt will
override any such real names with the setting of the <link linkend="realname">&dollar;realname</link> variable.
</para>
</sect2>

<sect2 id="rfc2047-parameters">
<title>rfc2047&lowbar;parameters</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, Mutt will decode RFC2047-encoded MIME
parameters. You want to set this variable when mutt suggests you
to save attachments to files named like:

</para>

<screen>
=?iso-8859-1?Q?file=5F=E4=5F991116=2Ezip?=

</screen><para>
When this variable is <emphasis>set</emphasis> interactively, the change won't be
active until you change folders.
</para>
<para>
Note that this use of RFC2047's encoding is explicitly
prohibited by the standard, but nevertheless encountered in the
wild.
</para>
<para>
Also note that setting this parameter will <emphasis>not</emphasis> have the effect
that mutt <emphasis>generates</emphasis> this kind of encoding.  Instead, mutt will
unconditionally use the encoding specified in RFC2231.
</para>
</sect2>

<sect2 id="save-address">
<title>save&lowbar;address</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will take the sender's full address when choosing a
default folder for saving a mail. If <link linkend="save-name">&dollar;save&lowbar;name</link> or <link linkend="force-name">&dollar;force&lowbar;name</link>
is <emphasis>set</emphasis> too, the selection of the Fcc folder will be changed as well.
</para>
</sect2>

<sect2 id="save-empty">
<title>save&lowbar;empty</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, mailboxes which contain no saved messages will be removed
when closed (the exception is <link linkend="spoolfile">&dollar;spoolfile</link> which is never removed).
If <emphasis>set</emphasis>, mailboxes are never removed.
</para>
<para>
<emphasis role="bold">Note:</emphasis> This only applies to mbox and MMDF folders, Mutt does not
delete MH and Maildir directories.
</para>
</sect2>

<sect2 id="save-history">
<title>save&lowbar;history</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
This variable controls the size of the history (per category) saved in the
<link linkend="history-file">&dollar;history&lowbar;file</link> file.
</para>
</sect2>

<sect2 id="save-name">
<title>save&lowbar;name</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable controls how copies of outgoing messages are saved.
When <emphasis>set</emphasis>, a check is made to see if a mailbox specified by the
recipient address exists (this is done by searching for a mailbox in
the <link linkend="folder">&dollar;folder</link> directory with the <emphasis>username</emphasis> part of the
recipient address).  If the mailbox exists, the outgoing message will
be saved to that mailbox, otherwise the message is saved to the
<link linkend="record">&dollar;record</link> mailbox.
</para>
<para>
Also see the <link linkend="force-name">&dollar;force&lowbar;name</link> variable.
</para>
</sect2>

<sect2 id="score">
<title>score</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When this variable is <emphasis>unset</emphasis>, scoring is turned off.  This can
be useful to selectively disable scoring for certain folders when the
<link linkend="score-threshold-delete">&dollar;score&lowbar;threshold&lowbar;delete</link> variable and related are used.
</para>
</sect2>

<sect2 id="score-threshold-delete">
<title>score&lowbar;threshold&lowbar;delete</title>
<literallayout>Type: number
Default: -1</literallayout>

<para>
Messages which have been assigned a score equal to or lower than the value
of this variable are automatically marked for deletion by mutt.  Since
mutt scores are always greater than or equal to zero, the default setting
of this variable will never mark a message for deletion.
</para>
</sect2>

<sect2 id="score-threshold-flag">
<title>score&lowbar;threshold&lowbar;flag</title>
<literallayout>Type: number
Default: 9999</literallayout>

<para>
Messages which have been assigned a score greater than or equal to this
variable's value are automatically marked &quot;flagged&quot;.
</para>
</sect2>

<sect2 id="score-threshold-read">
<title>score&lowbar;threshold&lowbar;read</title>
<literallayout>Type: number
Default: -1</literallayout>

<para>
Messages which have been assigned a score equal to or lower than the value
of this variable are automatically marked as read by mutt.  Since
mutt scores are always greater than or equal to zero, the default setting
of this variable will never mark a message read.
</para>
</sect2>

<sect2 id="send-charset">
<title>send&lowbar;charset</title>
<literallayout>Type: string
Default: <quote><literal>us-ascii:iso-8859-1:utf-8</literal></quote></literallayout>

<para>
A colon-delimited list of character sets for outgoing messages. Mutt will use the
first character set into which the text can be converted exactly.
If your <link linkend="charset">&dollar;charset</link> is not <quote>iso-8859-1</quote> and recipients may not
understand <quote>UTF-8</quote>, it is advisable to include in the list an
appropriate widely used standard character set (such as
<quote>iso-8859-2</quote>, <quote>koi8-r</quote> or <quote>iso-2022-jp</quote>) either instead of or after
<quote>iso-8859-1</quote>.
</para>
<para>
In case the text cannot be converted into one of these exactly,
mutt uses <link linkend="charset">&dollar;charset</link> as a fallback.
</para>
</sect2>

<sect2 id="sendmail">
<title>sendmail</title>
<literallayout>Type: path
Default: <quote><literal>/usr/sbin/sendmail -oem -oi</literal></quote></literallayout>

<para>
Specifies the program and arguments used to deliver mail sent by Mutt.
Mutt expects that the specified program interprets additional
arguments as recipient addresses.
</para>
</sect2>

<sect2 id="sendmail-wait">
<title>sendmail&lowbar;wait</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
Specifies the number of seconds to wait for the <link linkend="sendmail">&dollar;sendmail</link> process
to finish before giving up and putting delivery in the background.
</para>
<para>
Mutt interprets the value of this variable as follows:

</para>

<variablelist>
<varlistentry><term>&gt;0 </term>
<listitem><para>number of seconds to wait for sendmail to finish before continuing
</para></listitem></varlistentry>
<varlistentry><term>0  </term>
<listitem><para>wait forever for sendmail to finish
</para></listitem></varlistentry>
<varlistentry><term>&lt;0 </term>
<listitem><para>always put sendmail in the background without waiting
</para></listitem></varlistentry></variablelist>

<para>
Note that if you specify a value other than 0, the output of the child
process will be put in a temporary file.  If there is some error, you
will be informed as to where to find the output.
</para>
</sect2>

<sect2 id="shell">
<title>shell</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Command to use when spawning a subshell.  By default, the user's login
shell from <literal>/etc/passwd</literal> is used.
</para>
</sect2>

<sect2 id="sig-dashes">
<title>sig&lowbar;dashes</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, a line containing <quote>-- </quote> (note the trailing space) will be inserted before your
<link linkend="signature">&dollar;signature</link>.  It is <emphasis role="bold">strongly</emphasis> recommended that you not <emphasis>unset</emphasis>
this variable unless your signature contains just your name.  The
reason for this is because many software packages use <quote>-- &bsol;n</quote> to
detect your signature.  For example, Mutt has the ability to highlight
the signature in a different color in the builtin pager.
</para>
</sect2>

<sect2 id="sig-on-top">
<title>sig&lowbar;on&lowbar;top</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, the signature will be included before any quoted or forwarded
text.  It is <emphasis role="bold">strongly</emphasis> recommended that you do not set this variable
unless you really know what you are doing, and are prepared to take
some heat from netiquette guardians.
</para>
</sect2>

<sect2 id="signature">
<title>signature</title>
<literallayout>Type: path
Default: <quote><literal>&tilde;/.signature</literal></quote></literallayout>

<para>
Specifies the filename of your signature, which is appended to all
outgoing messages.   If the filename ends with a pipe (<quote>&verbar;</quote>), it is
assumed that filename is a shell command and input should be read from
its standard output.
</para>
</sect2>

<sect2 id="simple-search">
<title>simple&lowbar;search</title>
<literallayout>Type: string
Default: <quote><literal>&tilde;f &percnt;s &verbar; &tilde;s &percnt;s</literal></quote></literallayout>

<para>
Specifies how Mutt should expand a simple search into a real search
pattern.  A simple search is one that does not contain any of the <quote>&tilde;</quote> pattern
operators.  See <quote><link linkend="patterns">patterns</link></quote> for more information on search patterns.
</para>
<para>
For example, if you simply type <quote>joe</quote> at a search or limit prompt, Mutt
will automatically expand it to the value specified by this variable by
replacing <quote>&percnt;s</quote> with the supplied string.
For the default value, <quote>joe</quote> would be expanded to: <quote>&tilde;f joe &verbar; &tilde;s joe</quote>.
</para>
</sect2>

<sect2 id="smart-wrap">
<title>smart&lowbar;wrap</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls the display of lines longer than the screen width in the
internal pager. If <emphasis>set</emphasis>, long lines are wrapped at a word boundary.  If
<emphasis>unset</emphasis>, lines are simply wrapped at the screen edge. Also see the
<link linkend="markers">&dollar;markers</link> variable.
</para>
</sect2>

<sect2 id="smileys">
<title>smileys</title>
<literallayout>Type: regular expression
Default: <quote><literal>(&gt;From )&verbar;(:&lsqb;-&circ;&rsqb;?&lsqb;&rsqb;&lsqb;)(&gt;&lt;}{&verbar;/DP&rsqb;)</literal></quote></literallayout>

<para>
The <emphasis>pager</emphasis> uses this variable to catch some common false
positives of <link linkend="quote-regexp">&dollar;quote&lowbar;regexp</link>, most notably smileys and not consider
a line quoted text if it also matches <link linkend="smileys">&dollar;smileys</link>. This mostly
happens at the beginning of a line.
</para>
</sect2>

<sect2 id="sleep-time">
<title>sleep&lowbar;time</title>
<literallayout>Type: number
Default: 1</literallayout>

<para>
Specifies time, in seconds, to pause while displaying certain informational
messages, while moving from folder to folder and after expunging
messages from the current folder.  The default is to pause one second, so
a value of zero for this option suppresses the pause.
</para>
</sect2>

<sect2 id="smtp-authenticators">
<title>smtp&lowbar;authenticators</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an SMTP server, in the order mutt should
try them.  Authentication methods are any SASL mechanism, eg
<quote>digest-md5</quote>, <quote>gssapi</quote> or <quote>cram-md5</quote>.
This option is case-insensitive. If it is <quote>unset</quote>
(the default) mutt will try all available methods, in order from
most-secure to least-secure.
</para>
<para>
Example:

</para>

<screen>
set smtp_authenticators="digest-md5:cram-md5"

</screen></sect2>

<sect2 id="smtp-pass">
<title>smtp&lowbar;pass</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Specifies the password for your SMTP account.  If <emphasis>unset</emphasis>, Mutt will
prompt you for your password when you first send mail via SMTP.
See <link linkend="smtp-url">&dollar;smtp&lowbar;url</link> to configure mutt to send mail via SMTP.
</para>
<para>
<emphasis role="bold">Warning</emphasis>: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc even
if you are the only one who can read the file.
</para>
</sect2>

<sect2 id="smtp-url">
<title>smtp&lowbar;url</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Defines the SMTP smarthost where sent messages should relayed for
delivery. This should take the form of an SMTP URL, eg:

</para>

<screen>
smtp[s]://[user[:pass]@]host[:port]/

</screen><para>
&bsol;.&bsol;.&bsol;. where <quote>&lsqb;...&rsqb;</quote> denotes an optional part.
Setting this variable overrides the value of the <link linkend="sendmail">&dollar;sendmail</link>
variable.
</para>
</sect2>

<sect2 id="sort">
<title>sort</title>
<literallayout>Type: sort order
Default: date</literallayout>

<para>
Specifies how to sort messages in the <quote>index</quote> menu.  Valid values
are:

</para>

<itemizedlist>
<listitem><para>date or date-sent
</para></listitem><listitem><para>date-received
</para></listitem><listitem><para>from
</para></listitem><listitem><para>mailbox-order (unsorted)
</para></listitem><listitem><para>score
</para></listitem><listitem><para>size
</para></listitem><listitem><para>spam
</para></listitem><listitem><para>subject
</para></listitem><listitem><para>threads
</para></listitem><listitem><para>to
</para></listitem></itemizedlist>

<para>
You may optionally use the <quote>reverse-</quote> prefix to specify reverse sorting
order (example: <quote><literal>set sort=reverse-date-sent</literal></quote>).
</para>
<para>
<emphasis role="bold">Note:</emphasis> On Debian systems, this option is set by default to
<quote>threads</quote> in /etc/Muttrc.
</para>
</sect2>

<sect2 id="sort-alias">
<title>sort&lowbar;alias</title>
<literallayout>Type: sort order
Default: alias</literallayout>

<para>
Specifies how the entries in the <quote>alias</quote> menu are sorted.  The
following are legal values:

</para>

<itemizedlist>
<listitem><para>address (sort alphabetically by email address)
</para></listitem><listitem><para>alias (sort alphabetically by alias name)
</para></listitem><listitem><para>unsorted (leave in order specified in .muttrc)
</para></listitem></itemizedlist>
</sect2>

<sect2 id="sort-aux">
<title>sort&lowbar;aux</title>
<literallayout>Type: sort order
Default: date</literallayout>

<para>
When sorting by threads, this variable controls how threads are sorted
in relation to other threads, and how the branches of the thread trees
are sorted.  This can be set to any value that <link linkend="sort">&dollar;sort</link> can, except
<quote>threads</quote> (in that case, mutt will just use <quote>date-sent</quote>).  You can also
specify the <quote>last-</quote> prefix in addition to the <quote>reverse-</quote> prefix, but <quote>last-</quote>
must come after <quote>reverse-</quote>.  The <quote>last-</quote> prefix causes messages to be
sorted against its siblings by which has the last descendant, using
the rest of <link linkend="sort-aux">&dollar;sort&lowbar;aux</link> as an ordering.  For instance,

</para>

<screen>
set sort_aux=last-date-received

</screen><para>
would mean that if a new message is received in a
thread, that thread becomes the last one displayed (or the first, if
you have <quote><literal>set sort=reverse-threads</literal></quote>.)
</para>
<para>
Note: For reversed <link linkend="sort">&dollar;sort</link>
order <link linkend="sort-aux">&dollar;sort&lowbar;aux</link> is reversed again (which is not the right thing to do,
but kept to not break any existing configuration setting).
</para>
</sect2>

<sect2 id="sort-browser">
<title>sort&lowbar;browser</title>
<literallayout>Type: sort order
Default: alpha</literallayout>

<para>
Specifies how to sort entries in the file browser.  By default, the
entries are sorted alphabetically.  Valid values:

</para>

<itemizedlist>
<listitem><para>alpha (alphabetically)
</para></listitem><listitem><para>date
</para></listitem><listitem><para>size
</para></listitem><listitem><para>unsorted
</para></listitem></itemizedlist>

<para>
You may optionally use the <quote>reverse-</quote> prefix to specify reverse sorting
order (example: <quote><literal>set sort&lowbar;browser=reverse-date</literal></quote>).
</para>
</sect2>

<sect2 id="sort-re">
<title>sort&lowbar;re</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable is only useful when sorting by threads with
<link linkend="strict-threads">&dollar;strict&lowbar;threads</link> <emphasis>unset</emphasis>.  In that case, it changes the heuristic
mutt uses to thread messages by subject.  With <link linkend="sort-re">&dollar;sort&lowbar;re</link> <emphasis>set</emphasis>, mutt will
only attach a message as the child of another message by subject if
the subject of the child message starts with a substring matching the
setting of <link linkend="reply-regexp">&dollar;reply&lowbar;regexp</link>.  With <link linkend="sort-re">&dollar;sort&lowbar;re</link> <emphasis>unset</emphasis>, mutt will attach
the message whether or not this is the case, as long as the
non-<link linkend="reply-regexp">&dollar;reply&lowbar;regexp</link> parts of both messages are identical.
</para>
</sect2>

<sect2 id="spam-separator">
<title>spam&lowbar;separator</title>
<literallayout>Type: string
Default: <quote><literal>,</literal></quote></literallayout>

<para>
This variable controls what happens when multiple spam headers
are matched: if <emphasis>unset</emphasis>, each successive header will overwrite any
previous matches value for the spam label. If <emphasis>set</emphasis>, each successive
match will append to the previous, using this variable's value as a
separator.
</para>
</sect2>

<sect2 id="spoolfile">
<title>spoolfile</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
If your spool mailbox is in a non-default place where Mutt cannot find
it, you can specify its location with this variable.  Mutt will
automatically set this variable to the value of the environment
variable <literal>&dollar;MAIL</literal> if it is not set.
</para>
</sect2>

<sect2 id="status-chars">
<title>status&lowbar;chars</title>
<literallayout>Type: string
Default: <quote><literal>-*&percnt;A</literal></quote></literallayout>

<para>
Controls the characters used by the <quote>&percnt;r</quote> indicator in
<link linkend="status-format">&dollar;status&lowbar;format</link>. The first character is used when the mailbox is
unchanged. The second is used when the mailbox has been changed, and
it needs to be resynchronized. The third is used if the mailbox is in
read-only mode, or if the mailbox will not be written when exiting
that mailbox (You can toggle whether to write changes to a mailbox
with the <literal>&lt;toggle-write&gt;</literal> operation, bound by default to <quote>&percnt;</quote>). The fourth
is used to indicate that the current folder has been opened in attach-
message mode (Certain operations like composing a new mail, replying,
forwarding, etc. are not permitted in this mode).
</para>
</sect2>

<sect2 id="status-format">
<title>status&lowbar;format</title>
<literallayout>Type: string
Default: <quote><literal>-&percnt;r-Mutt: &percnt;f &lsqb;Msgs:&percnt;?M?&percnt;M/?&percnt;m&percnt;?n? New:&percnt;n?&percnt;?o? Old:&percnt;o?&percnt;?d? Del:&percnt;d?&percnt;?F? Flag:&percnt;F?&percnt;?t? Tag:&percnt;t?&percnt;?p? Post:&percnt;p?&percnt;?b? Inc:&percnt;b?&percnt;?l? &percnt;l?&rsqb;---(&percnt;s/&percnt;S)-&percnt;&gt;-(&percnt;P)---</literal></quote></literallayout>

<para>
Controls the format of the status line displayed in the <quote>index</quote>
menu.  This string is similar to <link linkend="index-format">&dollar;index&lowbar;format</link>, but has its own
set of <literal>printf(3)</literal>-like sequences:

</para>

<variablelist>
<varlistentry><term>&percnt;b  </term>
<listitem><para>number of mailboxes with new mail *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;d  </term>
<listitem><para>number of deleted messages *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;f  </term>
<listitem><para>the full pathname of the current mailbox
</para></listitem></varlistentry>
<varlistentry><term>&percnt;F  </term>
<listitem><para>number of flagged messages *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;h  </term>
<listitem><para>local hostname
</para></listitem></varlistentry>
<varlistentry><term>&percnt;l  </term>
<listitem><para>size (in bytes) of the current mailbox *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;L  </term>
<listitem><para>size (in bytes) of the messages shown
(i.e., which match the current limit) *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;m  </term>
<listitem><para>the number of messages in the mailbox *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;M  </term>
<listitem><para>the number of messages shown (i.e., which match the current limit) *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;n  </term>
<listitem><para>number of new messages in the mailbox *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;o  </term>
<listitem><para>number of old unread messages *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;p  </term>
<listitem><para>number of postponed messages *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;P  </term>
<listitem><para>percentage of the way through the index
</para></listitem></varlistentry>
<varlistentry><term>&percnt;r  </term>
<listitem><para>modified/read-only/won't-write/attach-message indicator,
according to <link linkend="status-chars">&dollar;status&lowbar;chars</link>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;s  </term>
<listitem><para>current sorting mode (<link linkend="sort">&dollar;sort</link>)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;S  </term>
<listitem><para>current aux sorting method (<link linkend="sort-aux">&dollar;sort&lowbar;aux</link>)
</para></listitem></varlistentry>
<varlistentry><term>&percnt;t  </term>
<listitem><para>number of tagged messages *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;u  </term>
<listitem><para>number of unread messages *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;v  </term>
<listitem><para>Mutt version string
</para></listitem></varlistentry>
<varlistentry><term>&percnt;V  </term>
<listitem><para>currently active limit pattern, if any *
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&gt;X </term>
<listitem><para>right justify the rest of the string and pad with <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;&verbar;X </term>
<listitem><para>pad to the end of the line with <quote>X</quote>
</para></listitem></varlistentry>
<varlistentry><term>&percnt;*X </term>
<listitem><para>soft-fill with character <quote>X</quote> as pad
</para></listitem></varlistentry></variablelist>

<para>
For an explanation of <quote>soft-fill</quote>, see the <link linkend="index-format">&dollar;index&lowbar;format</link> documentation.
</para>
<para>
* = can be optionally printed if nonzero
</para>
<para>
Some of the above sequences can be used to optionally print a string
if their value is nonzero.  For example, you may only want to see the
number of flagged messages if such messages exist, since zero is not
particularly meaningful.  To optionally print a string based upon one
of the above sequences, the following construct is used:
</para>
<para>
<literal>&percnt;?&lt;sequence&lowbar;char&gt;?&lt;optional&lowbar;string&gt;?</literal>
</para>
<para>
where <emphasis>sequence&lowbar;char</emphasis> is a character from the table above, and
<emphasis>optional&lowbar;string</emphasis> is the string you would like printed if
<emphasis>sequence&lowbar;char</emphasis> is nonzero.  <emphasis>optional&lowbar;string</emphasis> <emphasis role="bold">may</emphasis> contain
other sequences as well as normal text, but you may <emphasis role="bold">not</emphasis> nest
optional strings.
</para>
<para>
Here is an example illustrating how to optionally print the number of
new messages in a mailbox:
</para>
<para>
<literal>&percnt;?n?&percnt;n new messages.?</literal>
</para>
<para>
You can also switch between two strings using the following construct:
</para>
<para>
<literal>&percnt;?&lt;sequence&lowbar;char&gt;?&lt;if&lowbar;string&gt;&amp;&lt;else&lowbar;string&gt;?</literal>
</para>
<para>
If the value of <emphasis>sequence&lowbar;char</emphasis> is non-zero, <emphasis>if&lowbar;string</emphasis> will
be expanded, otherwise <emphasis>else&lowbar;string</emphasis> will be expanded.
</para>
<para>
You can force the result of any <literal>printf(3)</literal>-like sequence to be lowercase
by prefixing the sequence character with an underscore (<quote>&lowbar;</quote>) sign.
For example, if you want to display the local hostname in lowercase,
you would use: <quote><literal>&percnt;&lowbar;h</literal></quote>.
</para>
<para>
If you prefix the sequence character with a colon (<quote>:</quote>) character, mutt
will replace any dots in the expansion by underscores. This might be helpful
with IMAP folders that don't like dots in folder names.
</para>
</sect2>

<sect2 id="status-on-top">
<title>status&lowbar;on&lowbar;top</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable causes the <quote>status bar</quote> to be displayed on
the first line of the screen rather than near the bottom. If <link linkend="help">&dollar;help</link>
is <emphasis>set</emphasis>, too it'll be placed at the bottom.
</para>
</sect2>

<sect2 id="strict-threads">
<title>strict&lowbar;threads</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, threading will only make use of the <quote>In-Reply-To</quote> and
<quote>References:</quote> fields when you <link linkend="sort">&dollar;sort</link> by message threads.  By
default, messages with the same subject are grouped together in
<quote>pseudo threads.</quote>. This may not always be desirable, such as in a
personal mailbox where you might have several unrelated messages with
the subjects like <quote>hi</quote> which will get grouped together. See also
<link linkend="sort-re">&dollar;sort&lowbar;re</link> for a less drastic way of controlling this
behaviour.
</para>
</sect2>

<sect2 id="suspend">
<title>suspend</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, mutt won't stop when the user presses the terminal's
<emphasis>susp</emphasis> key, usually <quote>&circ;Z</quote>. This is useful if you run mutt
inside an xterm using a command like <quote><literal>xterm -e mutt</literal></quote>.
</para>
</sect2>

<sect2 id="text-flowed">
<title>text&lowbar;flowed</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will generate <quote>format=flowed</quote> bodies with a content type
of <quote><literal>text/plain; format=flowed</literal></quote>.
This format is easier to handle for some mailing software, and generally
just looks like ordinary text.  To actually make use of this format's
features, you'll need support in your editor.
</para>
<para>
Note that <link linkend="indent-string">&dollar;indent&lowbar;string</link> is ignored when this option is <emphasis>set</emphasis>.
</para>
</sect2>

<sect2 id="thread-received">
<title>thread&lowbar;received</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt uses the date received rather than the date sent
to thread messages by subject.
</para>
</sect2>

<sect2 id="thorough-search">
<title>thorough&lowbar;search</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Affects the <literal>&tilde;b</literal> and <literal>&tilde;h</literal> search operations described in
section <quote><link linkend="patterns">patterns</link></quote>.  If <emphasis>set</emphasis>, the headers and body/attachments of
messages to be searched are decoded before searching. If <emphasis>unset</emphasis>,
messages are searched as they appear in the folder.
</para>
<para>
Users searching attachments or for non-ASCII characters should <emphasis>set</emphasis>
this value because decoding also includes MIME parsing/decoding and possible
character set conversions. Otherwise mutt will attempt to match against the
raw message received (for example quoted-printable encoded or with encoded
headers) which may lead to incorrect search results.
</para>
</sect2>

<sect2 id="tilde">
<title>tilde</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, the internal-pager will pad blank lines to the bottom of the
screen with a tilde (<quote>&tilde;</quote>).
</para>
</sect2>

<sect2 id="time-inc">
<title>time&lowbar;inc</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
Along with <link linkend="read-inc">&dollar;read&lowbar;inc</link>, <link linkend="write-inc">&dollar;write&lowbar;inc</link>, and <link linkend="net-inc">&dollar;net&lowbar;inc</link>, this
variable controls the frequency with which progress updates are
displayed. It suppresses updates less than <link linkend="time-inc">&dollar;time&lowbar;inc</link> milliseconds
apart. This can improve throughput on systems with slow terminals,
or when running mutt on a remote system.
</para>
<para>
Also see the <quote><link linkend="tuning">tuning</link></quote> section of the manual for performance considerations.
</para>
</sect2>

<sect2 id="timeout">
<title>timeout</title>
<literallayout>Type: number
Default: 600</literallayout>

<para>
When Mutt is waiting for user input either idleing in menus or
in an interactive prompt, Mutt would block until input is
present. Depending on the context, this would prevent certain
operations from working, like checking for new mail or keeping
an IMAP connection alive.
</para>
<para>
This variable controls how many seconds Mutt will at most wait
until it aborts waiting for input, performs these operations and
continues to wait for input.
</para>
<para>
A value of zero or less will cause Mutt to never time out.
</para>
</sect2>

<sect2 id="tmpdir">
<title>tmpdir</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable allows you to specify where Mutt will place its
temporary files needed for displaying and composing messages.  If
this variable is not set, the environment variable <literal>&dollar;TMPDIR</literal> is
used.  If <literal>&dollar;TMPDIR</literal> is not set then <quote><literal>/tmp</literal></quote> is used.
</para>
</sect2>

<sect2 id="to-chars">
<title>to&lowbar;chars</title>
<literallayout>Type: string
Default: <quote><literal> +TCFL</literal></quote></literallayout>

<para>
Controls the character used to indicate mail addressed to you.  The
first character is the one used when the mail is <emphasis>not</emphasis> addressed to your
address.  The second is used when you are the only
recipient of the message.  The third is when your address
appears in the <quote>To:</quote> header field, but you are not the only recipient of
the message.  The fourth character is used when your
address is specified in the <quote>Cc:</quote> header field, but you are not the only
recipient.  The fifth character is used to indicate mail that was sent
by <emphasis>you</emphasis>.  The sixth character is used to indicate when a mail
was sent to a mailing-list you subscribe to.
</para>
</sect2>

<sect2 id="trash">
<title>trash</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
If set, this variable specifies the path of the trash folder where the
mails marked for deletion will be moved, instead of being irremediably
purged.
</para>
<para>
NOTE: When you delete a message in the trash folder, it is really
deleted, so that you have a way to clean the trash.
</para>
</sect2>

<sect2 id="tunnel">
<title>tunnel</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Setting this variable will cause mutt to open a pipe to a command
instead of a raw socket. You may be able to use this to set up
preauthenticated connections to your IMAP/POP3/SMTP server. Example:

</para>

<screen>
set tunnel="ssh -q mailhost.net /usr/local/libexec/imapd"

</screen><para>
Note: For this example to work you must be able to log in to the remote
machine without having to enter a password.
</para>
</sect2>

<sect2 id="use-8bitmime">
<title>use&lowbar;8bitmime</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
<emphasis role="bold">Warning:</emphasis> do not set this variable unless you are using a version
of sendmail which supports the <literal>-B8BITMIME</literal> flag (such as sendmail
8.8.x) or you may not be able to send mail.
</para>
<para>
When <emphasis>set</emphasis>, Mutt will invoke <link linkend="sendmail">&dollar;sendmail</link> with the <literal>-B8BITMIME</literal>
flag when sending 8-bit messages to enable ESMTP negotiation.
</para>
</sect2>

<sect2 id="use-domain">
<title>use&lowbar;domain</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will qualify all local addresses (ones without the
<quote>@host</quote> portion) with the value of <link linkend="hostname">&dollar;hostname</link>.  If <emphasis>unset</emphasis>, no
addresses will be qualified.
</para>
</sect2>

<sect2 id="use-envelope-from">
<title>use&lowbar;envelope&lowbar;from</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will set the <emphasis>envelope</emphasis> sender of the message.
If <link linkend="envelope-from-address">&dollar;envelope&lowbar;from&lowbar;address</link> is <emphasis>set</emphasis>, it will be used as the sender
address. If <emphasis>unset</emphasis>, mutt will attempt to derive the sender from the
<quote>From:</quote> header.
</para>
<para>
Note that this information is passed to sendmail command using the
<literal>-f</literal> command line switch. Therefore setting this option is not useful
if the <link linkend="sendmail">&dollar;sendmail</link> variable already contains <literal>-f</literal> or if the
executable pointed to by <link linkend="sendmail">&dollar;sendmail</link> doesn't support the <literal>-f</literal> switch.
</para>
</sect2>

<sect2 id="use-from">
<title>use&lowbar;from</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will generate the <quote>From:</quote> header field when
sending messages.  If <emphasis>unset</emphasis>, no <quote>From:</quote> header field will be
generated unless the user explicitly sets one using the <quote><link linkend="my-hdr">my&lowbar;hdr</link></quote>
command.
</para>
</sect2>

<sect2 id="use-idn">
<title>use&lowbar;idn</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will show you international domain names decoded.
Note: You can use IDNs for addresses even if this is <emphasis>unset</emphasis>.
This variable only affects decoding.
</para>
</sect2>

<sect2 id="use-ipv6">
<title>use&lowbar;ipv6</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will look for IPv6 addresses of hosts it tries to
contact.  If this option is <emphasis>unset</emphasis>, Mutt will restrict itself to IPv4 addresses.
Normally, the default should work.
</para>
</sect2>

<sect2 id="user-agent">
<title>user&lowbar;agent</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will add a <quote>User-Agent:</quote> header to outgoing
messages, indicating which version of mutt was used for composing
them.
</para>
</sect2>

<sect2 id="visual">
<title>visual</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Specifies the visual editor to invoke when the <quote><literal>&tilde;v</literal></quote> command is
given in the builtin editor.
</para>
</sect2>

<sect2 id="wait-key">
<title>wait&lowbar;key</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether Mutt will ask you to press a key after an external command
has been invoked by these functions: <literal>&lt;shell-escape&gt;</literal>,
<literal>&lt;pipe-message&gt;</literal>, <literal>&lt;pipe-entry&gt;</literal>, <literal>&lt;print-message&gt;</literal>,
and <literal>&lt;print-entry&gt;</literal> commands.
</para>
<para>
It is also used when viewing attachments with <quote><link linkend="auto-view">auto&lowbar;view</link></quote>, provided
that the corresponding mailcap entry has a <emphasis>needsterminal</emphasis> flag,
and the external program is interactive.
</para>
<para>
When <emphasis>set</emphasis>, Mutt will always ask for a key. When <emphasis>unset</emphasis>, Mutt will wait
for a key only if the external command returned a non-zero status.
</para>
</sect2>

<sect2 id="weed">
<title>weed</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will weed headers when displaying, forwarding,
printing, or replying to messages.
</para>
</sect2>

<sect2 id="wrap">
<title>wrap</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
When set to a positive value, mutt will wrap text at <link linkend="wrap">&dollar;wrap</link> characters.
When set to a negative value, mutt will wrap text so that there are <link linkend="wrap">&dollar;wrap</link>
characters of empty space on the right side of the terminal.
</para>
</sect2>

<sect2 id="wrap-search">
<title>wrap&lowbar;search</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether searches wrap around the end.
</para>
<para>
When <emphasis>set</emphasis>, searches will wrap around the first (or last) item. When
<emphasis>unset</emphasis>, incremental searches will not wrap.
</para>
</sect2>

<sect2 id="wrapmargin">
<title>wrapmargin</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
(DEPRECATED) Equivalent to setting <link linkend="wrap">&dollar;wrap</link> with a negative value.
</para>
</sect2>

<sect2 id="write-inc">
<title>write&lowbar;inc</title>
<literallayout>Type: number
Default: 10</literallayout>

<para>
When writing a mailbox, a message will be printed every
<link linkend="write-inc">&dollar;write&lowbar;inc</link> messages to indicate progress.  If set to 0, only a
single message will be displayed before writing a mailbox.
</para>
<para>
Also see the <link linkend="read-inc">&dollar;read&lowbar;inc</link>, <link linkend="net-inc">&dollar;net&lowbar;inc</link> and <link linkend="time-inc">&dollar;time&lowbar;inc</link> variables and the
<quote><link linkend="tuning">tuning</link></quote> section of the manual for performance considerations.
</para>
</sect2>

<sect2 id="write-bcc">
<title>write&lowbar;bcc</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether mutt writes out the <quote>Bcc:</quote> header when preparing
messages to be sent.  Exim users may wish to unset this. If mutt
is set to deliver directly via SMTP (see <link linkend="smtp-url">&dollar;smtp&lowbar;url</link>), this
option does nothing: mutt will never write out the <quote>Bcc:</quote> header
in this case.
</para>
<para>
<emphasis role="bold">Note:</emphasis> On Debian systems, exim4 and postfix strip BCC headers by
default. The above warning applies to exim3 users, see /etc/Muttrc.
</para>
</sect2>

<sect2 id="xterm-icon">
<title>xterm&lowbar;icon</title>
<literallayout>Type: string
Default: <quote><literal>M&percnt;?n?AIL&amp;ail?</literal></quote></literallayout>

<para>
Controls the format of the icon title, as long as xterm&lowbar;set&lowbar;titles
is enabled. This string is identical in formatting to the one used by
<quote><link linkend="status-format">&dollar;status&lowbar;format</link></quote>.
</para>
</sect2>

<sect2 id="xterm-set-titles">
<title>xterm&lowbar;set&lowbar;titles</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls whether mutt sets the xterm title bar and icon name
(as long as you are in an appropriate terminal).
</para>
</sect2>

<sect2 id="xterm-title">
<title>xterm&lowbar;title</title>
<literallayout>Type: string
Default: <quote><literal>Mutt with &percnt;?m?&percnt;m messages&amp;no messages?&percnt;?n? &lsqb;&percnt;n NEW&rsqb;?</literal></quote></literallayout>

<para>
Controls the format of the title bar of the xterm provided that
xterm&lowbar;set&lowbar;titles has been set. This string is identical in formatting
to the one used by <quote><link linkend="status-format">&dollar;status&lowbar;format</link></quote>.
</para>
</sect2>

</sect1>

<sect1 id="functions">
<title>Functions</title>

<para>
The following is the list of available functions listed by the mapping
in which they are available.  The default key setting is given, and an
explanation of what the function does.  The key bindings of these
functions can be changed with the <link linkend="bind">bind</link>
command.
</para>

<sect2 id="generic_map">
<title>generic menu</title>
<para>
The <emphasis>generic</emphasis> menu is not a real menu, but specifies common functions
(such as movement) available in all menus except for <emphasis>pager</emphasis> and
<emphasis>editor</emphasis>.  Changing settings for this menu will affect the default
bindings for all menus (except as noted).
</para>


<table id="generic_table">
<title>Default generic function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;top-page&gt;</literal></entry><entry>H</entry><entry>move to the top of the page</entry></row>
<row><entry><literal>&lt;next-entry&gt;</literal></entry><entry>j</entry><entry>move to the next entry</entry></row>
<row><entry><literal>&lt;previous-entry&gt;</literal></entry><entry>k</entry><entry>move to the previous entry</entry></row>
<row><entry><literal>&lt;bottom-page&gt;</literal></entry><entry>L</entry><entry>move to the bottom of the page</entry></row>
<row><entry><literal>&lt;refresh&gt;</literal></entry><entry>^L</entry><entry>clear and redraw the screen</entry></row>
<row><entry><literal>&lt;middle-page&gt;</literal></entry><entry>M</entry><entry>move to the middle of the page</entry></row>
<row><entry><literal>&lt;search-next&gt;</literal></entry><entry>n</entry><entry>search for next match</entry></row>
<row><entry><literal>&lt;exit&gt;</literal></entry><entry>q</entry><entry>exit this menu</entry></row>
<row><entry><literal>&lt;tag-entry&gt;</literal></entry><entry>t</entry><entry>tag the current entry</entry></row>
<row><entry><literal>&lt;next-page&gt;</literal></entry><entry>z</entry><entry>move to the next page</entry></row>
<row><entry><literal>&lt;previous-page&gt;</literal></entry><entry>Z</entry><entry>move to the previous page</entry></row>
<row><entry><literal>&lt;last-entry&gt;</literal></entry><entry>*</entry><entry>move to the last entry</entry></row>
<row><entry><literal>&lt;first-entry&gt;</literal></entry><entry>=</entry><entry>move to the first entry</entry></row>
<row><entry><literal>&lt;enter-command&gt;</literal></entry><entry>:</entry><entry>enter a muttrc command</entry></row>
<row><entry><literal>&lt;next-line&gt;</literal></entry><entry>&gt;</entry><entry>scroll down one line</entry></row>
<row><entry><literal>&lt;previous-line&gt;</literal></entry><entry>&lt;</entry><entry>scroll up one line</entry></row>
<row><entry><literal>&lt;half-up&gt;</literal></entry><entry>[</entry><entry>scroll up 1/2 page</entry></row>
<row><entry><literal>&lt;half-down&gt;</literal></entry><entry>]</entry><entry>scroll down 1/2 page</entry></row>
<row><entry><literal>&lt;help&gt;</literal></entry><entry>?</entry><entry>this screen</entry></row>
<row><entry><literal>&lt;tag-prefix&gt;</literal></entry><entry>;</entry><entry>apply next function to tagged messages</entry></row>
<row><entry><literal>&lt;tag-prefix-cond&gt;</literal></entry><entry></entry><entry>apply next function ONLY to tagged messages</entry></row>
<row><entry><literal>&lt;end-cond&gt;</literal></entry><entry></entry><entry>end of conditional execution (noop)</entry></row>
<row><entry><literal>&lt;shell-escape&gt;</literal></entry><entry>!</entry><entry>invoke a command in a subshell</entry></row>
<row><entry><literal>&lt;select-entry&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>select the current entry</entry></row>
<row><entry><literal>&lt;search&gt;</literal></entry><entry>/</entry><entry>search for a regular expression</entry></row>
<row><entry><literal>&lt;search-reverse&gt;</literal></entry><entry>Esc /</entry><entry>search backwards for a regular expression</entry></row>
<row><entry><literal>&lt;search-opposite&gt;</literal></entry><entry></entry><entry>search for next match in opposite direction</entry></row>
<row><entry><literal>&lt;jump&gt;</literal></entry><entry></entry><entry>jump to an index number</entry></row>
<row><entry><literal>&lt;current-top&gt;</literal></entry><entry></entry><entry>move entry to top of screen</entry></row>
<row><entry><literal>&lt;current-middle&gt;</literal></entry><entry></entry><entry>move entry to middle of screen</entry></row>
<row><entry><literal>&lt;current-bottom&gt;</literal></entry><entry></entry><entry>move entry to bottom of screen</entry></row>
<row><entry><literal>&lt;what-key&gt;</literal></entry><entry></entry><entry>display the keycode for a key press</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="index_map">
<title>index menu</title>


<table id="index_table">
<title>Default index function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>a</entry><entry>create an alias from a message sender</entry></row>
<row><entry><literal>&lt;bounce-message&gt;</literal></entry><entry>b</entry><entry>remail a message to another user</entry></row>
<row><entry><literal>&lt;break-thread&gt;</literal></entry><entry>#</entry><entry>break the thread in two</entry></row>
<row><entry><literal>&lt;change-folder&gt;</literal></entry><entry>c</entry><entry>open a different folder</entry></row>
<row><entry><literal>&lt;change-folder-readonly&gt;</literal></entry><entry>Esc c</entry><entry>open a different folder in read only mode</entry></row>
<row><entry><literal>&lt;next-unread-mailbox&gt;</literal></entry><entry></entry><entry>open next mailbox with new mail</entry></row>
<row><entry><literal>&lt;collapse-thread&gt;</literal></entry><entry>Esc v</entry><entry>collapse/uncollapse current thread</entry></row>
<row><entry><literal>&lt;collapse-all&gt;</literal></entry><entry>Esc V</entry><entry>collapse/uncollapse all threads</entry></row>
<row><entry><literal>&lt;copy-message&gt;</literal></entry><entry>C</entry><entry>copy a message to a file/mailbox</entry></row>
<row><entry><literal>&lt;decode-copy&gt;</literal></entry><entry>Esc C</entry><entry>make decoded (text/plain) copy</entry></row>
<row><entry><literal>&lt;decode-save&gt;</literal></entry><entry>Esc s</entry><entry>make decoded copy (text/plain) and delete</entry></row>
<row><entry><literal>&lt;delete-message&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;delete-pattern&gt;</literal></entry><entry>D</entry><entry>delete messages matching a pattern</entry></row>
<row><entry><literal>&lt;delete-thread&gt;</literal></entry><entry>^D</entry><entry>delete all messages in thread</entry></row>
<row><entry><literal>&lt;delete-subthread&gt;</literal></entry><entry>Esc d</entry><entry>delete all messages in subthread</entry></row>
<row><entry><literal>&lt;edit&gt;</literal></entry><entry>e</entry><entry>edit the raw message</entry></row>
<row><entry><literal>&lt;edit-type&gt;</literal></entry><entry>^E</entry><entry>edit attachment content type</entry></row>
<row><entry><literal>&lt;forward-message&gt;</literal></entry><entry>f</entry><entry>forward a message with comments</entry></row>
<row><entry><literal>&lt;flag-message&gt;</literal></entry><entry>F</entry><entry>toggle a message's 'important' flag</entry></row>
<row><entry><literal>&lt;group-reply&gt;</literal></entry><entry>g</entry><entry>reply to all recipients</entry></row>
<row><entry><literal>&lt;fetch-mail&gt;</literal></entry><entry>G</entry><entry>retrieve mail from POP server</entry></row>
<row><entry><literal>&lt;imap-fetch-mail&gt;</literal></entry><entry></entry><entry>force retrieval of mail from IMAP server</entry></row>
<row><entry><literal>&lt;display-toggle-weed&gt;</literal></entry><entry>h</entry><entry>display message and toggle header weeding</entry></row>
<row><entry><literal>&lt;next-undeleted&gt;</literal></entry><entry>j</entry><entry>move to the next undeleted message</entry></row>
<row><entry><literal>&lt;previous-undeleted&gt;</literal></entry><entry>k</entry><entry>move to the previous undeleted message</entry></row>
<row><entry><literal>&lt;limit&gt;</literal></entry><entry>l</entry><entry>show only messages matching a pattern</entry></row>
<row><entry><literal>&lt;link-threads&gt;</literal></entry><entry>&amp;</entry><entry>link tagged message to the current one</entry></row>
<row><entry><literal>&lt;list-reply&gt;</literal></entry><entry>L</entry><entry>reply to specified mailing list</entry></row>
<row><entry><literal>&lt;mail&gt;</literal></entry><entry>m</entry><entry>compose a new mail message</entry></row>
<row><entry><literal>&lt;toggle-new&gt;</literal></entry><entry>N</entry><entry>toggle a message's 'new' flag</entry></row>
<row><entry><literal>&lt;toggle-write&gt;</literal></entry><entry>%</entry><entry>toggle whether the mailbox will be rewritten</entry></row>
<row><entry><literal>&lt;next-thread&gt;</literal></entry><entry>^N</entry><entry>jump to the next thread</entry></row>
<row><entry><literal>&lt;next-subthread&gt;</literal></entry><entry>Esc n</entry><entry>jump to the next subthread</entry></row>
<row><entry><literal>&lt;purge-message&gt;</literal></entry><entry></entry><entry>really delete the current entry, bypassing the trash folder</entry></row>
<row><entry><literal>&lt;query&gt;</literal></entry><entry>Q</entry><entry>query external program for addresses</entry></row>
<row><entry><literal>&lt;quit&gt;</literal></entry><entry>q</entry><entry>save changes to mailbox and quit</entry></row>
<row><entry><literal>&lt;reply&gt;</literal></entry><entry>r</entry><entry>reply to a message</entry></row>
<row><entry><literal>&lt;show-limit&gt;</literal></entry><entry>Esc l</entry><entry>show currently active limit pattern</entry></row>
<row><entry><literal>&lt;sort-mailbox&gt;</literal></entry><entry>o</entry><entry>sort messages</entry></row>
<row><entry><literal>&lt;sort-reverse&gt;</literal></entry><entry>O</entry><entry>sort messages in reverse order</entry></row>
<row><entry><literal>&lt;print-message&gt;</literal></entry><entry>p</entry><entry>print the current entry</entry></row>
<row><entry><literal>&lt;previous-thread&gt;</literal></entry><entry>^P</entry><entry>jump to previous thread</entry></row>
<row><entry><literal>&lt;previous-subthread&gt;</literal></entry><entry>Esc p</entry><entry>jump to previous subthread</entry></row>
<row><entry><literal>&lt;recall-message&gt;</literal></entry><entry>R</entry><entry>recall a postponed message</entry></row>
<row><entry><literal>&lt;read-thread&gt;</literal></entry><entry>^R</entry><entry>mark the current thread as read</entry></row>
<row><entry><literal>&lt;read-subthread&gt;</literal></entry><entry>Esc r</entry><entry>mark the current subthread as read</entry></row>
<row><entry><literal>&lt;resend-message&gt;</literal></entry><entry>Esc e</entry><entry>use the current message as a template for a new one</entry></row>
<row><entry><literal>&lt;save-message&gt;</literal></entry><entry>s</entry><entry>save message/attachment to a file</entry></row>
<row><entry><literal>&lt;tag-pattern&gt;</literal></entry><entry>T</entry><entry>tag messages matching a pattern</entry></row>
<row><entry><literal>&lt;tag-subthread&gt;</literal></entry><entry></entry><entry>tag the current subthread</entry></row>
<row><entry><literal>&lt;tag-thread&gt;</literal></entry><entry>Esc t</entry><entry>tag the current thread</entry></row>
<row><entry><literal>&lt;untag-pattern&gt;</literal></entry><entry>^T</entry><entry>untag messages matching a pattern</entry></row>
<row><entry><literal>&lt;undelete-message&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>
<row><entry><literal>&lt;undelete-pattern&gt;</literal></entry><entry>U</entry><entry>undelete messages matching a pattern</entry></row>
<row><entry><literal>&lt;undelete-subthread&gt;</literal></entry><entry>Esc u</entry><entry>undelete all messages in subthread</entry></row>
<row><entry><literal>&lt;undelete-thread&gt;</literal></entry><entry>^U</entry><entry>undelete all messages in thread</entry></row>
<row><entry><literal>&lt;view-attachments&gt;</literal></entry><entry>v</entry><entry>show MIME attachments</entry></row>
<row><entry><literal>&lt;show-version&gt;</literal></entry><entry>V</entry><entry>show the Mutt version number and date</entry></row>
<row><entry><literal>&lt;set-flag&gt;</literal></entry><entry>w</entry><entry>set a status flag on a message</entry></row>
<row><entry><literal>&lt;clear-flag&gt;</literal></entry><entry>W</entry><entry>clear a status flag from a message</entry></row>
<row><entry><literal>&lt;display-message&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>display a message</entry></row>
<row><entry><literal>&lt;buffy-list&gt;</literal></entry><entry>.</entry><entry>list mailboxes with new mail</entry></row>
<row><entry><literal>&lt;sync-mailbox&gt;</literal></entry><entry>$</entry><entry>save changes to mailbox</entry></row>
<row><entry><literal>&lt;display-address&gt;</literal></entry><entry>@</entry><entry>display full address of sender</entry></row>
<row><entry><literal>&lt;pipe-message&gt;</literal></entry><entry>|</entry><entry>pipe message/attachment to a shell command</entry></row>
<row><entry><literal>&lt;next-new&gt;</literal></entry><entry></entry><entry>jump to the next new message</entry></row>
<row><entry><literal>&lt;next-new-then-unread&gt;</literal></entry><entry>&lt;Tab&gt;</entry><entry>jump to the next new or unread message</entry></row>
<row><entry><literal>&lt;previous-new&gt;</literal></entry><entry></entry><entry>jump to the previous new message</entry></row>
<row><entry><literal>&lt;previous-new-then-unread&gt;</literal></entry><entry>Esc &lt;Tab&gt;</entry><entry>jump to the previous new or unread message</entry></row>
<row><entry><literal>&lt;next-unread&gt;</literal></entry><entry></entry><entry>jump to the next unread message</entry></row>
<row><entry><literal>&lt;previous-unread&gt;</literal></entry><entry></entry><entry>jump to the previous unread message</entry></row>
<row><entry><literal>&lt;parent-message&gt;</literal></entry><entry>P</entry><entry>jump to parent message in thread</entry></row>
<row><entry><literal>&lt;extract-keys&gt;</literal></entry><entry>^K</entry><entry>extract supported public keys</entry></row>
<row><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>^F</entry><entry>wipe passphrase(s) from memory</entry></row>
<row><entry><literal>&lt;check-traditional-pgp&gt;</literal></entry><entry>Esc P</entry><entry>check for classic PGP</entry></row>
<row><entry><literal>&lt;mail-key&gt;</literal></entry><entry>Esc k</entry><entry>mail a PGP public key</entry></row>
<row><entry><literal>&lt;decrypt-copy&gt;</literal></entry><entry></entry><entry>make decrypted copy</entry></row>
<row><entry><literal>&lt;decrypt-save&gt;</literal></entry><entry></entry><entry>make decrypted copy and delete</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pager_map">
<title>pager menu</title>


<table id="pager_table">
<title>Default pager function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;break-thread&gt;</literal></entry><entry>#</entry><entry>break the thread in two</entry></row>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>a</entry><entry>create an alias from a message sender</entry></row>
<row><entry><literal>&lt;bounce-message&gt;</literal></entry><entry>b</entry><entry>remail a message to another user</entry></row>
<row><entry><literal>&lt;change-folder&gt;</literal></entry><entry>c</entry><entry>open a different folder</entry></row>
<row><entry><literal>&lt;change-folder-readonly&gt;</literal></entry><entry>Esc c</entry><entry>open a different folder in read only mode</entry></row>
<row><entry><literal>&lt;next-unread-mailbox&gt;</literal></entry><entry></entry><entry>open next mailbox with new mail</entry></row>
<row><entry><literal>&lt;copy-message&gt;</literal></entry><entry>C</entry><entry>copy a message to a file/mailbox</entry></row>
<row><entry><literal>&lt;decode-copy&gt;</literal></entry><entry>Esc C</entry><entry>make decoded (text/plain) copy</entry></row>
<row><entry><literal>&lt;delete-message&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;delete-thread&gt;</literal></entry><entry>^D</entry><entry>delete all messages in thread</entry></row>
<row><entry><literal>&lt;delete-subthread&gt;</literal></entry><entry>Esc d</entry><entry>delete all messages in subthread</entry></row>
<row><entry><literal>&lt;edit&gt;</literal></entry><entry>e</entry><entry>edit the raw message</entry></row>
<row><entry><literal>&lt;edit-type&gt;</literal></entry><entry>^E</entry><entry>edit attachment content type</entry></row>
<row><entry><literal>&lt;forward-message&gt;</literal></entry><entry>f</entry><entry>forward a message with comments</entry></row>
<row><entry><literal>&lt;flag-message&gt;</literal></entry><entry>F</entry><entry>toggle a message's 'important' flag</entry></row>
<row><entry><literal>&lt;group-reply&gt;</literal></entry><entry>g</entry><entry>reply to all recipients</entry></row>
<row><entry><literal>&lt;imap-fetch-mail&gt;</literal></entry><entry></entry><entry>force retrieval of mail from IMAP server</entry></row>
<row><entry><literal>&lt;display-toggle-weed&gt;</literal></entry><entry>h</entry><entry>display message and toggle header weeding</entry></row>
<row><entry><literal>&lt;next-undeleted&gt;</literal></entry><entry>j</entry><entry>move to the next undeleted message</entry></row>
<row><entry><literal>&lt;next-entry&gt;</literal></entry><entry>J</entry><entry>move to the next entry</entry></row>
<row><entry><literal>&lt;previous-undeleted&gt;</literal></entry><entry>k</entry><entry>move to the previous undeleted message</entry></row>
<row><entry><literal>&lt;previous-entry&gt;</literal></entry><entry>K</entry><entry>move to the previous entry</entry></row>
<row><entry><literal>&lt;link-threads&gt;</literal></entry><entry>&amp;</entry><entry>link tagged message to the current one</entry></row>
<row><entry><literal>&lt;list-reply&gt;</literal></entry><entry>L</entry><entry>reply to specified mailing list</entry></row>
<row><entry><literal>&lt;redraw-screen&gt;</literal></entry><entry>^L</entry><entry>clear and redraw the screen</entry></row>
<row><entry><literal>&lt;mail&gt;</literal></entry><entry>m</entry><entry>compose a new mail message</entry></row>
<row><entry><literal>&lt;mark-as-new&gt;</literal></entry><entry>N</entry><entry>toggle a message's 'new' flag</entry></row>
<row><entry><literal>&lt;search-next&gt;</literal></entry><entry>n</entry><entry>search for next match</entry></row>
<row><entry><literal>&lt;next-thread&gt;</literal></entry><entry>^N</entry><entry>jump to the next thread</entry></row>
<row><entry><literal>&lt;next-subthread&gt;</literal></entry><entry>Esc n</entry><entry>jump to the next subthread</entry></row>
<row><entry><literal>&lt;print-message&gt;</literal></entry><entry>p</entry><entry>print the current entry</entry></row>
<row><entry><literal>&lt;previous-thread&gt;</literal></entry><entry>^P</entry><entry>jump to previous thread</entry></row>
<row><entry><literal>&lt;previous-subthread&gt;</literal></entry><entry>Esc p</entry><entry>jump to previous subthread</entry></row>
<row><entry><literal>&lt;purge-message&gt;</literal></entry><entry></entry><entry>really delete the current entry, bypassing the trash folder</entry></row>
<row><entry><literal>&lt;quit&gt;</literal></entry><entry>Q</entry><entry>save changes to mailbox and quit</entry></row>
<row><entry><literal>&lt;exit&gt;</literal></entry><entry>q</entry><entry>exit this menu</entry></row>
<row><entry><literal>&lt;reply&gt;</literal></entry><entry>r</entry><entry>reply to a message</entry></row>
<row><entry><literal>&lt;recall-message&gt;</literal></entry><entry>R</entry><entry>recall a postponed message</entry></row>
<row><entry><literal>&lt;read-thread&gt;</literal></entry><entry>^R</entry><entry>mark the current thread as read</entry></row>
<row><entry><literal>&lt;read-subthread&gt;</literal></entry><entry>Esc r</entry><entry>mark the current subthread as read</entry></row>
<row><entry><literal>&lt;resend-message&gt;</literal></entry><entry>Esc e</entry><entry>use the current message as a template for a new one</entry></row>
<row><entry><literal>&lt;save-message&gt;</literal></entry><entry>s</entry><entry>save message/attachment to a file</entry></row>
<row><entry><literal>&lt;skip-quoted&gt;</literal></entry><entry>S</entry><entry>skip beyond quoted text</entry></row>
<row><entry><literal>&lt;decode-save&gt;</literal></entry><entry>Esc s</entry><entry>make decoded copy (text/plain) and delete</entry></row>
<row><entry><literal>&lt;tag-message&gt;</literal></entry><entry>t</entry><entry>tag the current entry</entry></row>
<row><entry><literal>&lt;toggle-quoted&gt;</literal></entry><entry>T</entry><entry>toggle display of quoted text</entry></row>
<row><entry><literal>&lt;undelete-message&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>
<row><entry><literal>&lt;undelete-subthread&gt;</literal></entry><entry>Esc u</entry><entry>undelete all messages in subthread</entry></row>
<row><entry><literal>&lt;undelete-thread&gt;</literal></entry><entry>^U</entry><entry>undelete all messages in thread</entry></row>
<row><entry><literal>&lt;view-attachments&gt;</literal></entry><entry>v</entry><entry>show MIME attachments</entry></row>
<row><entry><literal>&lt;show-version&gt;</literal></entry><entry>V</entry><entry>show the Mutt version number and date</entry></row>
<row><entry><literal>&lt;search-toggle&gt;</literal></entry><entry>\\</entry><entry>toggle search pattern coloring</entry></row>
<row><entry><literal>&lt;display-address&gt;</literal></entry><entry>@</entry><entry>display full address of sender</entry></row>
<row><entry><literal>&lt;next-new&gt;</literal></entry><entry></entry><entry>jump to the next new message</entry></row>
<row><entry><literal>&lt;pipe-message&gt;</literal></entry><entry>|</entry><entry>pipe message/attachment to a shell command</entry></row>
<row><entry><literal>&lt;help&gt;</literal></entry><entry>?</entry><entry>this screen</entry></row>
<row><entry><literal>&lt;next-page&gt;</literal></entry><entry>&lt;Space&gt;</entry><entry>move to the next page</entry></row>
<row><entry><literal>&lt;previous-page&gt;</literal></entry><entry>-</entry><entry>move to the previous page</entry></row>
<row><entry><literal>&lt;top&gt;</literal></entry><entry>^</entry><entry>jump to the top of the message</entry></row>
<row><entry><literal>&lt;sync-mailbox&gt;</literal></entry><entry>$</entry><entry>save changes to mailbox</entry></row>
<row><entry><literal>&lt;shell-escape&gt;</literal></entry><entry>!</entry><entry>invoke a command in a subshell</entry></row>
<row><entry><literal>&lt;enter-command&gt;</literal></entry><entry>:</entry><entry>enter a muttrc command</entry></row>
<row><entry><literal>&lt;buffy-list&gt;</literal></entry><entry>.</entry><entry>list mailboxes with new mail</entry></row>
<row><entry><literal>&lt;search&gt;</literal></entry><entry>/</entry><entry>search for a regular expression</entry></row>
<row><entry><literal>&lt;search-reverse&gt;</literal></entry><entry>Esc /</entry><entry>search backwards for a regular expression</entry></row>
<row><entry><literal>&lt;search-opposite&gt;</literal></entry><entry></entry><entry>search for next match in opposite direction</entry></row>
<row><entry><literal>&lt;next-line&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>scroll down one line</entry></row>
<row><entry><literal>&lt;jump&gt;</literal></entry><entry></entry><entry>jump to an index number</entry></row>
<row><entry><literal>&lt;next-unread&gt;</literal></entry><entry></entry><entry>jump to the next unread message</entry></row>
<row><entry><literal>&lt;previous-new&gt;</literal></entry><entry></entry><entry>jump to the previous new message</entry></row>
<row><entry><literal>&lt;previous-unread&gt;</literal></entry><entry></entry><entry>jump to the previous unread message</entry></row>
<row><entry><literal>&lt;half-up&gt;</literal></entry><entry></entry><entry>scroll up 1/2 page</entry></row>
<row><entry><literal>&lt;half-down&gt;</literal></entry><entry></entry><entry>scroll down 1/2 page</entry></row>
<row><entry><literal>&lt;previous-line&gt;</literal></entry><entry></entry><entry>scroll up one line</entry></row>
<row><entry><literal>&lt;bottom&gt;</literal></entry><entry></entry><entry>jump to the bottom of the message</entry></row>
<row><entry><literal>&lt;parent-message&gt;</literal></entry><entry>P</entry><entry>jump to parent message in thread</entry></row>
<row><entry><literal>&lt;check-traditional-pgp&gt;</literal></entry><entry>Esc P</entry><entry>check for classic PGP</entry></row>
<row><entry><literal>&lt;mail-key&gt;</literal></entry><entry>Esc k</entry><entry>mail a PGP public key</entry></row>
<row><entry><literal>&lt;extract-keys&gt;</literal></entry><entry>^K</entry><entry>extract supported public keys</entry></row>
<row><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>^F</entry><entry>wipe passphrase(s) from memory</entry></row>
<row><entry><literal>&lt;decrypt-copy&gt;</literal></entry><entry></entry><entry>make decrypted copy</entry></row>
<row><entry><literal>&lt;decrypt-save&gt;</literal></entry><entry></entry><entry>make decrypted copy and delete</entry></row>
<row><entry><literal>&lt;what-key&gt;</literal></entry><entry></entry><entry>display the keycode for a key press</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="alias_map">
<title>alias menu</title>


<table id="alias_table">
<title>Default alias function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;delete-entry&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;undelete-entry&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="query_map">
<title>query menu</title>


<table id="query_table">
<title>Default query function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>a</entry><entry>create an alias from a message sender</entry></row>
<row><entry><literal>&lt;mail&gt;</literal></entry><entry>m</entry><entry>compose a new mail message</entry></row>
<row><entry><literal>&lt;query&gt;</literal></entry><entry>Q</entry><entry>query external program for addresses</entry></row>
<row><entry><literal>&lt;query-append&gt;</literal></entry><entry>A</entry><entry>append new query results to current results</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="attach_map">
<title>attach menu</title>


<table id="attach_table">
<title>Default attach function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;bounce-message&gt;</literal></entry><entry>b</entry><entry>remail a message to another user</entry></row>
<row><entry><literal>&lt;display-toggle-weed&gt;</literal></entry><entry>h</entry><entry>display message and toggle header weeding</entry></row>
<row><entry><literal>&lt;edit-type&gt;</literal></entry><entry>^E</entry><entry>edit attachment content type</entry></row>
<row><entry><literal>&lt;print-entry&gt;</literal></entry><entry>p</entry><entry>print the current entry</entry></row>
<row><entry><literal>&lt;save-entry&gt;</literal></entry><entry>s</entry><entry>save message/attachment to a file</entry></row>
<row><entry><literal>&lt;pipe-entry&gt;</literal></entry><entry>|</entry><entry>pipe message/attachment to a shell command</entry></row>
<row><entry><literal>&lt;view-mailcap&gt;</literal></entry><entry>m</entry><entry>force viewing of attachment using mailcap</entry></row>
<row><entry><literal>&lt;reply&gt;</literal></entry><entry>r</entry><entry>reply to a message</entry></row>
<row><entry><literal>&lt;resend-message&gt;</literal></entry><entry>Esc e</entry><entry>use the current message as a template for a new one</entry></row>
<row><entry><literal>&lt;group-reply&gt;</literal></entry><entry>g</entry><entry>reply to all recipients</entry></row>
<row><entry><literal>&lt;list-reply&gt;</literal></entry><entry>L</entry><entry>reply to specified mailing list</entry></row>
<row><entry><literal>&lt;forward-message&gt;</literal></entry><entry>f</entry><entry>forward a message with comments</entry></row>
<row><entry><literal>&lt;view-text&gt;</literal></entry><entry>T</entry><entry>view attachment as text</entry></row>
<row><entry><literal>&lt;view-attach&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>view attachment using mailcap entry if necessary</entry></row>
<row><entry><literal>&lt;delete-entry&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;undelete-entry&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>
<row><entry><literal>&lt;collapse-parts&gt;</literal></entry><entry>v</entry><entry>Toggle display of subparts</entry></row>
<row><entry><literal>&lt;check-traditional-pgp&gt;</literal></entry><entry>Esc P</entry><entry>check for classic PGP</entry></row>
<row><entry><literal>&lt;extract-keys&gt;</literal></entry><entry>^K</entry><entry>extract supported public keys</entry></row>
<row><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>^F</entry><entry>wipe passphrase(s) from memory</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="compose_map">
<title>compose menu</title>


<table id="compose_table">
<title>Default compose function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;attach-file&gt;</literal></entry><entry>a</entry><entry>attach file(s) to this message</entry></row>
<row><entry><literal>&lt;attach-message&gt;</literal></entry><entry>A</entry><entry>attach message(s) to this message</entry></row>
<row><entry><literal>&lt;edit-bcc&gt;</literal></entry><entry>b</entry><entry>edit the BCC list</entry></row>
<row><entry><literal>&lt;edit-cc&gt;</literal></entry><entry>c</entry><entry>edit the CC list</entry></row>
<row><entry><literal>&lt;copy-file&gt;</literal></entry><entry>C</entry><entry>save message/attachment to a file</entry></row>
<row><entry><literal>&lt;detach-file&gt;</literal></entry><entry>D</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;toggle-disposition&gt;</literal></entry><entry>^D</entry><entry>toggle disposition between inline/attachment</entry></row>
<row><entry><literal>&lt;edit-description&gt;</literal></entry><entry>d</entry><entry>edit attachment description</entry></row>
<row><entry><literal>&lt;edit-message&gt;</literal></entry><entry>e</entry><entry>edit the message</entry></row>
<row><entry><literal>&lt;edit-headers&gt;</literal></entry><entry>E</entry><entry>edit the message with headers</entry></row>
<row><entry><literal>&lt;edit-file&gt;</literal></entry><entry>^X e</entry><entry>edit the file to be attached</entry></row>
<row><entry><literal>&lt;edit-encoding&gt;</literal></entry><entry>^E</entry><entry>edit attachment transfer-encoding</entry></row>
<row><entry><literal>&lt;edit-from&gt;</literal></entry><entry>Esc f</entry><entry>edit the from field</entry></row>
<row><entry><literal>&lt;edit-fcc&gt;</literal></entry><entry>f</entry><entry>enter a file to save a copy of this message in</entry></row>
<row><entry><literal>&lt;filter-entry&gt;</literal></entry><entry>F</entry><entry>filter attachment through a shell command</entry></row>
<row><entry><literal>&lt;get-attachment&gt;</literal></entry><entry>G</entry><entry>get a temporary copy of an attachment</entry></row>
<row><entry><literal>&lt;display-toggle-weed&gt;</literal></entry><entry>h</entry><entry>display message and toggle header weeding</entry></row>
<row><entry><literal>&lt;ispell&gt;</literal></entry><entry>i</entry><entry>run ispell on the message</entry></row>
<row><entry><literal>&lt;print-entry&gt;</literal></entry><entry>l</entry><entry>print the current entry</entry></row>
<row><entry><literal>&lt;edit-mime&gt;</literal></entry><entry>m</entry><entry>edit attachment using mailcap entry</entry></row>
<row><entry><literal>&lt;new-mime&gt;</literal></entry><entry>n</entry><entry>compose new attachment using mailcap entry</entry></row>
<row><entry><literal>&lt;postpone-message&gt;</literal></entry><entry>P</entry><entry>save this message to send later</entry></row>
<row><entry><literal>&lt;edit-reply-to&gt;</literal></entry><entry>r</entry><entry>edit the Reply-To field</entry></row>
<row><entry><literal>&lt;rename-file&gt;</literal></entry><entry>R</entry><entry>rename/move an attached file</entry></row>
<row><entry><literal>&lt;edit-subject&gt;</literal></entry><entry>s</entry><entry>edit the subject of this message</entry></row>
<row><entry><literal>&lt;edit-to&gt;</literal></entry><entry>t</entry><entry>edit the TO list</entry></row>
<row><entry><literal>&lt;edit-type&gt;</literal></entry><entry>^T</entry><entry>edit attachment content type</entry></row>
<row><entry><literal>&lt;write-fcc&gt;</literal></entry><entry>w</entry><entry>write the message to a folder</entry></row>
<row><entry><literal>&lt;toggle-unlink&gt;</literal></entry><entry>u</entry><entry>toggle whether to delete file after sending it</entry></row>
<row><entry><literal>&lt;toggle-recode&gt;</literal></entry><entry></entry><entry>toggle recoding of this attachment</entry></row>
<row><entry><literal>&lt;update-encoding&gt;</literal></entry><entry>U</entry><entry>update an attachment's encoding info</entry></row>
<row><entry><literal>&lt;view-attach&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>view attachment using mailcap entry if necessary</entry></row>
<row><entry><literal>&lt;send-message&gt;</literal></entry><entry>y</entry><entry>send the message</entry></row>
<row><entry><literal>&lt;pipe-entry&gt;</literal></entry><entry>|</entry><entry>pipe message/attachment to a shell command</entry></row>
<row><entry><literal>&lt;attach-key&gt;</literal></entry><entry>Esc k</entry><entry>attach a PGP public key</entry></row>
<row><entry><literal>&lt;pgp-menu&gt;</literal></entry><entry>p</entry><entry>show PGP options</entry></row>
<row><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>^F</entry><entry>wipe passphrase(s) from memory</entry></row>
<row><entry><literal>&lt;smime-menu&gt;</literal></entry><entry>S</entry><entry>show S/MIME options</entry></row>
<row><entry><literal>&lt;mix&gt;</literal></entry><entry>M</entry><entry>send the message through a mixmaster remailer chain</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="postpone_map">
<title>postpone menu</title>


<table id="postpone_table">
<title>Default postpone function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;delete-entry&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;undelete-entry&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="browser_map">
<title>browser menu</title>


<table id="browser_table">
<title>Default browser function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;change-dir&gt;</literal></entry><entry>c</entry><entry>change directories</entry></row>
<row><entry><literal>&lt;display-filename&gt;</literal></entry><entry>@</entry><entry>display the currently selected file's name</entry></row>
<row><entry><literal>&lt;enter-mask&gt;</literal></entry><entry>m</entry><entry>enter a file mask</entry></row>
<row><entry><literal>&lt;sort&gt;</literal></entry><entry>o</entry><entry>sort messages</entry></row>
<row><entry><literal>&lt;sort-reverse&gt;</literal></entry><entry>O</entry><entry>sort messages in reverse order</entry></row>
<row><entry><literal>&lt;select-new&gt;</literal></entry><entry>N</entry><entry>select a new file in this directory</entry></row>
<row><entry><literal>&lt;check-new&gt;</literal></entry><entry></entry><entry>check mailboxes for new mail</entry></row>
<row><entry><literal>&lt;toggle-mailboxes&gt;</literal></entry><entry>&lt;Tab&gt;</entry><entry>toggle whether to browse mailboxes or all files</entry></row>
<row><entry><literal>&lt;view-file&gt;</literal></entry><entry>&lt;Space&gt;</entry><entry>view file</entry></row>
<row><entry><literal>&lt;buffy-list&gt;</literal></entry><entry>.</entry><entry>list mailboxes with new mail</entry></row>
<row><entry><literal>&lt;create-mailbox&gt;</literal></entry><entry>C</entry><entry>create a new mailbox (IMAP only)</entry></row>
<row><entry><literal>&lt;delete-mailbox&gt;</literal></entry><entry>d</entry><entry>delete the current mailbox (IMAP only)</entry></row>
<row><entry><literal>&lt;rename-mailbox&gt;</literal></entry><entry>r</entry><entry>rename the current mailbox (IMAP only)</entry></row>
<row><entry><literal>&lt;subscribe&gt;</literal></entry><entry>s</entry><entry>subscribe to current mailbox (IMAP only)</entry></row>
<row><entry><literal>&lt;unsubscribe&gt;</literal></entry><entry>u</entry><entry>unsubscribe from current mailbox (IMAP only)</entry></row>
<row><entry><literal>&lt;toggle-subscribed&gt;</literal></entry><entry>T</entry><entry>toggle view all/subscribed mailboxes (IMAP only)</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pgp_map">
<title>pgp menu</title>


<table id="pgp_table">
<title>Default pgp function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;verify-key&gt;</literal></entry><entry>c</entry><entry>verify a PGP public key</entry></row>
<row><entry><literal>&lt;view-name&gt;</literal></entry><entry>%</entry><entry>view the key's user id</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="smime_map">
<title>smime menu</title>


<table id="smime_table">
<title>Default smime function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;verify-key&gt;</literal></entry><entry>c</entry><entry>verify a PGP public key</entry></row>
<row><entry><literal>&lt;view-name&gt;</literal></entry><entry>%</entry><entry>view the key's user id</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="mix_map">
<title>mix menu</title>


<table id="mix_table">
<title>Default mix function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;accept&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>Accept the chain constructed</entry></row>
<row><entry><literal>&lt;append&gt;</literal></entry><entry>a</entry><entry>Append a remailer to the chain</entry></row>
<row><entry><literal>&lt;insert&gt;</literal></entry><entry>i</entry><entry>Insert a remailer into the chain</entry></row>
<row><entry><literal>&lt;delete&gt;</literal></entry><entry>d</entry><entry>Delete a remailer from the chain</entry></row>
<row><entry><literal>&lt;chain-prev&gt;</literal></entry><entry>&lt;Left&gt;</entry><entry>Select the previous element of the chain</entry></row>
<row><entry><literal>&lt;chain-next&gt;</literal></entry><entry>&lt;Right&gt;</entry><entry>Select the next element of the chain</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="editor_map">
<title>editor menu</title>


<table id="editor_table">
<title>Default editor function bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;bol&gt;</literal></entry><entry>^A</entry><entry>jump to the beginning of the line</entry></row>
<row><entry><literal>&lt;backward-char&gt;</literal></entry><entry>^B</entry><entry>move the cursor one character to the left</entry></row>
<row><entry><literal>&lt;backward-word&gt;</literal></entry><entry>Esc b</entry><entry>move the cursor to the beginning of the word</entry></row>
<row><entry><literal>&lt;capitalize-word&gt;</literal></entry><entry>Esc c</entry><entry>capitalize the word</entry></row>
<row><entry><literal>&lt;downcase-word&gt;</literal></entry><entry>Esc l</entry><entry>convert the word to lower case</entry></row>
<row><entry><literal>&lt;upcase-word&gt;</literal></entry><entry>Esc u</entry><entry>convert the word to upper case</entry></row>
<row><entry><literal>&lt;delete-char&gt;</literal></entry><entry>^D</entry><entry>delete the char under the cursor</entry></row>
<row><entry><literal>&lt;eol&gt;</literal></entry><entry>^E</entry><entry>jump to the end of the line</entry></row>
<row><entry><literal>&lt;forward-char&gt;</literal></entry><entry>^F</entry><entry>move the cursor one character to the right</entry></row>
<row><entry><literal>&lt;forward-word&gt;</literal></entry><entry>Esc f</entry><entry>move the cursor to the end of the word</entry></row>
<row><entry><literal>&lt;backspace&gt;</literal></entry><entry>&lt;Backspace&gt;</entry><entry>delete the char in front of the cursor</entry></row>
<row><entry><literal>&lt;kill-eol&gt;</literal></entry><entry>^K</entry><entry>delete chars from cursor to end of line</entry></row>
<row><entry><literal>&lt;kill-eow&gt;</literal></entry><entry>Esc d</entry><entry>delete chars from the cursor to the end of the word</entry></row>
<row><entry><literal>&lt;kill-line&gt;</literal></entry><entry>^U</entry><entry>delete all chars on the line</entry></row>
<row><entry><literal>&lt;quote-char&gt;</literal></entry><entry>^V</entry><entry>quote the next typed key</entry></row>
<row><entry><literal>&lt;kill-word&gt;</literal></entry><entry>^W</entry><entry>delete the word in front of the cursor</entry></row>
<row><entry><literal>&lt;complete&gt;</literal></entry><entry>&lt;Tab&gt;</entry><entry>complete filename or alias</entry></row>
<row><entry><literal>&lt;complete-query&gt;</literal></entry><entry>^T</entry><entry>complete address with query</entry></row>
<row><entry><literal>&lt;buffy-cycle&gt;</literal></entry><entry>&lt;Space&gt;</entry><entry>cycle among incoming mailboxes</entry></row>
<row><entry><literal>&lt;history-up&gt;</literal></entry><entry></entry><entry>scroll up through the history list</entry></row>
<row><entry><literal>&lt;history-down&gt;</literal></entry><entry></entry><entry>scroll down through the history list</entry></row>
<row><entry><literal>&lt;transpose-chars&gt;</literal></entry><entry></entry><entry>transpose character under cursor with previous</entry></row>

</tbody>
</tgroup>
</table>

</sect2>


</sect1>

</chapter>

<chapter id="miscellany">
<title>Miscellany</title>

<sect1 id="acknowledgements">
<title>Acknowledgements</title>

<para>
Kari Hurtta <email>kari.hurtta@fmi.fi</email>
co-developed the original MIME parsing code back in the ELM-ME days.
</para>

<para>
The following people have been very helpful to the development of Mutt:
</para>

<itemizedlist>
<listitem><para>Vikas Agnihotri <email>vikasa@writeme.com</email></para></listitem>
<listitem><para>Francois Berjon <email>Francois.Berjon@aar.alcatel-alsthom.fr</email></para></listitem>
<listitem><para>Aric Blumer <email>aric@fore.com</email></para></listitem>
<listitem><para>John Capo <email>jc@irbs.com</email></para></listitem>
<listitem><para>David Champion <email>dgc@uchicago.edu</email></para></listitem>
<listitem><para>Brendan Cully <email>brendan@kublai.com</email></para></listitem>
<listitem><para>Liviu Daia <email>daia@stoilow.imar.ro</email></para></listitem>
<listitem><para>Thomas E. Dickey <email>dickey@herndon4.his.com</email></para></listitem>
<listitem><para>David DeSimone <email>fox@convex.hp.com</email></para></listitem>
<listitem><para>Nickolay N. Dudorov <email>nnd@wint.itfs.nsk.su</email></para></listitem>
<listitem><para>Ruslan Ermilov <email>ru@freebsd.org</email></para></listitem>
<listitem><para>Edmund Grimley Evans <email>edmundo@rano.org</email></para></listitem>
<listitem><para>Michael Finken <email>finken@conware.de</email></para></listitem>
<listitem><para>Sven Guckes <email>guckes@math.fu-berlin.de</email></para></listitem>
<listitem><para>Lars Hecking <email>lhecking@nmrc.ie</email></para></listitem>
<listitem><para>Mark Holloman <email>holloman@nando.net</email></para></listitem>
<listitem><para>Andreas Holzmann <email>holzmann@fmi.uni-passau.de</email></para></listitem>
<listitem><para>Marco d'Itri <email>md@linux.it</email></para></listitem>
<listitem><para>Bj&ouml;rn Jacke <email>bjacke@suse.com</email></para></listitem>
<listitem><para>Byrial Jensen <email>byrial@image.dk</email></para></listitem>
<listitem><para>David Jeske <email>jeske@igcom.net</email></para></listitem>
<listitem><para>Christophe Kalt <email>kalt@hugo.int-evry.fr</email></para></listitem>
<listitem><para>Tommi Komulainen <email>Tommi.Komulainen@iki.fi</email></para></listitem>
<listitem><para>Felix von Leitner (a.k.a <quote>Fefe</quote>) <email>leitner@math.fu-berlin.de</email></para></listitem>
<listitem><para>Brandon Long <email>blong@fiction.net</email></para></listitem>
<listitem><para>Jimmy M&auml;kel&auml; <email>jmy@flashback.net</email></para></listitem>
<listitem><para>Lars Marowsky-Bree <email>lmb@pointer.in-minden.de</email></para></listitem>
<listitem><para>Thomas <quote>Mike</quote> Michlmayr <email>mike@cosy.sbg.ac.at</email></para></listitem>
<listitem><para>Andrew W. Nosenko <email>awn@bcs.zp.ua</email></para></listitem>
<listitem><para>David O'Brien <email>obrien@Nuxi.cs.ucdavis.edu</email></para></listitem>
<listitem><para>Clint Olsen <email>olsenc@ichips.intel.com</email></para></listitem>
<listitem><para>Park Myeong Seok <email>pms@romance.kaist.ac.kr</email></para></listitem>
<listitem><para>Thomas Parmelan <email>tom@ankh.fr.eu.org</email></para></listitem>
<listitem><para>Ollivier Robert <email>roberto@keltia.freenix.fr</email></para></listitem>
<listitem><para>Thomas Roessler <email>roessler@does-not-exist.org</email></para></listitem>
<listitem><para>Roland Rosenfeld <email>roland@spinnaker.de</email></para></listitem>
<listitem><para>Rocco Rutte <email>pdmef@gmx.net</email></para></listitem>
<listitem><para>TAKIZAWA Takashi <email>taki@luna.email.ne.jp</email></para></listitem>
<listitem><para>Allain Thivillon <email>Allain.Thivillon@alma.fr</email></para></listitem>
<listitem><para>Gero Treuner <email>gero@70t.de</email></para></listitem>
<listitem><para>Vsevolod Volkov <email>vvv@lucky.net</email></para></listitem>
<listitem><para>Ken Weinert <email>kenw@ihs.com</email></para></listitem>
</itemizedlist>

</sect1>

<sect1 id="about">
<title>About this document</title>

<para>
This document was written in <ulink url="http://docbook.sourceforge.net">DocBook</ulink>,
and then rendered using the <ulink url="http://xmlsoft.org/XSLT/">Gnome XSLT toolkit</ulink>.
</para>

</sect1>

</chapter>

</book>

<!--
vim:ft=xml
-->
